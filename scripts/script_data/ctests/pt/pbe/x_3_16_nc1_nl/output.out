/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c71f0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c71f0> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffcf00c71f0> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c7640> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c7dc0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c75e0> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c7cd0> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c6d70> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c6a40> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c4a30> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00c6710> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c6410> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c6ce0> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c61a0> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf00c6590> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf00c6440> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5ed0> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5b10> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5e70> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf00c50f0> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5540> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5f30> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c4d60> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c5600> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf00c54b0> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf00c41c0> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00c43d0> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffcf00c4130> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf0442f50> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c7640> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c7640> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-1.36885638e-02 -3.66713241e-03 -5.44158460e-03 ... -9.48874913e+00
 -9.48874913e+00 -9.48874913e+00] = PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046674  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c7dc0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c7dc0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc with xc_func = [-7.95821778e-03 -3.35731552e-03 -7.77507592e-04 ... -4.29087394e+00
 -4.29087394e+00 -4.29087394e+00] = PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597091, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025284, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.499812984008539  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c75e0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c75e0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc with xc_func = [-7.57938855e-03 -3.07514578e-03 -5.57625799e-04 ... -6.19877933e-01
 -6.19877933e-01 -6.19877933e-01] = PBE,
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627842  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c7cd0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c7cd0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc with xc_func = [-0.01468815 -0.00517057 -0.00517057 ... -0.02678611 -1.73720972
 -1.73720972] = PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033774427073  <S^2> = 2.0027451  2S+1 = 3.0018295
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6d70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6d70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc with xc_func = [-3.98356457e-03 -1.23065250e-03 -1.70723315e-04 ... -4.92814432e+00
 -4.92814432e+00 -4.92814432e+00] = PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.72346812e-13, dtype=float64), Array(148.53260668, dtype=float64))
rho0_b = (Array(9.54708348e-16, dtype=float64), Array(148.54628045, dtype=float64))
gamma_a = (Array(5.88116269e-24, dtype=float64), Array(4945156.99723323, dtype=float64))
gamma_b = (Array(1.30615552e-29, dtype=float64), Array(4956870.32051824, dtype=float64))
gamma_ab = (Array(8.76424155e-27, dtype=float64), Array(4950939.12751179, dtype=float64))
tau_a = (Array(1.10320163e-12, dtype=float64), Array(4773.97027659, dtype=float64))
tau_b = (Array(1.43788283e-14, dtype=float64), Array(4747.12443074, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577123056  <S^2> = 0.75161941  2S+1 = 2.0016188
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6a40> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6a40> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc with xc_func = [-3.30405803e-03 -3.41839274e-03 -1.95113857e-03 ... -1.07991822e+01
 -1.07991822e+01 -1.07991822e+01] = PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.26326803e-11, dtype=float64), Array(1561.90471267, dtype=float64))
rho0_b = (Array(4.79296446e-13, dtype=float64), Array(1561.957872, dtype=float64))
gamma_a = (Array(1.30819976e-20, dtype=float64), Array(2.73171449e+09, dtype=float64))
gamma_b = (Array(1.46595678e-24, dtype=float64), Array(2.73216524e+09, dtype=float64))
gamma_ab = (Array(-1.25624536e-17, dtype=float64), Array(2.73193661e+09, dtype=float64))
tau_a = (Array(3.15601165e-11, dtype=float64), Array(239540.9486741, dtype=float64))
tau_b = (Array(5.56649532e-13, dtype=float64), Array(239371.78228036, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226560993794  <S^2> = 0.75226415  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c4a30> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c4a30> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc with xc_func = [-0.03276818 -0.02303624 -0.01367192 ... -0.00120726 -0.00521074
 -0.0008577 ] = PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.95718504e-12, dtype=float64), Array(679.40140666, dtype=float64))
rho0_b = (Array(5.90718452e-12, dtype=float64), Array(679.49865978, dtype=float64))
gamma_a = (Array(9.77838559e-23, dtype=float64), Array(2.66170711e+08, dtype=float64))
gamma_b = (Array(9.76666494e-23, dtype=float64), Array(2.66254716e+08, dtype=float64))
gamma_ab = (Array(1.07714316e-22, dtype=float64), Array(2.6621271e+08, dtype=float64))
tau_a = (Array(3.6984349e-12, dtype=float64), Array(56081.37751189, dtype=float64))
tau_b = (Array(2.0987556e-12, dtype=float64), Array(56073.23123415, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.938786811462  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6710> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6710> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-6.93118224e-03 -3.79404461e-03 -3.61022376e-03 ... -1.01450192e+01
 -1.01450192e+01 -1.01450192e+01] = PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.90791427e-12, dtype=float64), Array(1294.97546995, dtype=float64))
rho0_b = (Array(9.84997544e-15, dtype=float64), Array(1295.1090119, dtype=float64))
gamma_a = (Array(1.96947343e-23, dtype=float64), Array(1.63838355e+09, dtype=float64))
gamma_b = (Array(5.59443126e-28, dtype=float64), Array(1.6389205e+09, dtype=float64))
gamma_ab = (Array(-7.15336325e-17, dtype=float64), Array(1.63865081e+09, dtype=float64))
tau_a = (Array(1.29990621e-12, dtype=float64), Array(172116.85539495, dtype=float64))
tau_b = (Array(1.01083292e-14, dtype=float64), Array(171895.27158801, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182912  <S^2> = -4.4408921e-16  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6410> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6410> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc with xc_func = [-9.68556838e-04 -1.58030978e-04 -2.09323169e-03 ... -4.72032007e-01
 -4.72032007e-01 -4.72032007e-01] = PBE,
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 1.0658141e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6ce0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6ce0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc with xc_func = [-0.0009845  -0.00469897 -0.00189737 ... -0.00039042 -0.00039042
 -0.0009845 ] = PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.64475685, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933661, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204673, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850635, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = 3.5527137e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c61a0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c61a0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc with xc_func = [-0.00286189 -0.00231863 -0.00239899 ... -0.00271898 -0.75353821
 -0.75353821] = PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.15074654, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.1576729, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420972, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.3377924465129  <S^2> = 4.0072745e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6590> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6590> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc with xc_func = [-1.84394882e-03 -3.55776797e-04 -4.08566935e-04 ... -5.84585023e-01
 -5.84585023e-01 -5.84585023e-01] = PBE,
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746184, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036921, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391552, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026184e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322843  <S^2> = 1.0658141e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c6440> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c6440> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc with xc_func = [-1.72112130e-03 -1.54560209e-03 -4.43207046e-03 ... -8.82594092e-05
 -3.64230826e+00 -3.64230826e+00] = PBE,
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35237432, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.35046354, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.35141893, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601494, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601223, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.00560888896  <S^2> = 4.938272e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5ed0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5ed0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc with xc_func = [-0.00502491 -0.00397238 -0.00534772 ... -0.00397238 -0.38764465
 -0.38764465] = PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.2256862e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5b10> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5b10> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc with xc_func = [-1.71711724e-03 -3.76892734e-04 -5.79099618e-03 ... -4.85816312e-01
 -4.85816312e-01 -4.85816312e-01] = PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996829, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158325, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577577, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.214894530621  <S^2> = 1.0018599  2S+1 = 2.2377309
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5e70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5e70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc with xc_func = [-3.70003813e-03 -1.16009309e-03 -1.63710029e-04 ... -6.00048810e-01
 -6.00048810e-01 -6.00048810e-01] = PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.66027798e-13, dtype=float64), Array(148.29947233, dtype=float64))
rho0_b = (Array(1.66027825e-13, dtype=float64), Array(148.29947233, dtype=float64))
gamma_a = (Array(3.59966852e-25, dtype=float64), Array(4951708.97648124, dtype=float64))
gamma_b = (Array(3.59966969e-25, dtype=float64), Array(4951708.97645702, dtype=float64))
gamma_ab = (Array(2.14122839e-24, dtype=float64), Array(4951708.97646913, dtype=float64))
tau_a = (Array(2.8156297e-13, dtype=float64), Array(4771.62334816, dtype=float64))
tau_b = (Array(2.81563013e-13, dtype=float64), Array(4771.62334816, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346373  <S^2> = 1.2434498e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c50f0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c50f0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc with xc_func = [-0.00080685 -0.00080685 -0.00433533 ... -0.00042622 -0.00042487
 -0.00042487] = PBE,
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931845e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.01493244, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01409493, dtype=float64))
gamma_ab = (Array(1.65925441e-22, dtype=float64), Array(440696.01451368, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.29901851, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901762, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.5902839e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5540> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5540> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc with xc_func = [-0.00293144 -0.00403376 -0.00852947 ... -0.66580799 -0.66580799
 -0.66580799] = PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683906, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.3412988, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.34406893, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374077  <S^2> = 6.750156e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5f30> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5f30> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc with xc_func = [-1.54831565e-03 -2.88752043e-04 -3.45288369e-04 ... -3.18329034e+00
 -3.18329034e+00 -3.18329034e+00] = PBE,
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018921  <S^2> = 7.7715612e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c4d60> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c4d60> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc with xc_func = [-0.00373656 -0.00390507 -0.00390507 ... -0.55062385 -0.55062385
 -0.55062385] = PBE,
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.5864643e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c5600> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c5600> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc with xc_func = [-0.00885728 -0.00885728 -0.01125225 ... -0.00885728 -0.00885728
 -0.01125225] = PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.65584888, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498097, dtype=float64))
gamma_ab = (Array(6.900802e-19, dtype=float64), Array(74474467.54541492, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845815  <S^2> = 8.2422957e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c54b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c54b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc with xc_func = [-1.23255630e-03 -2.61714634e-03 -6.05692557e-03 ... -8.17682399e+00
 -8.17682399e+00 -8.17682399e+00] = PBE,
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469574  <S^2> = 2.5389468e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c41c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c41c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc with xc_func = [-4.16570160e-03 -2.30406907e-03 -4.63502656e-04 ... -1.93795423e+00
 -1.93795423e+00 -1.93795423e+00] = PBE,
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.565335824744  <S^2> = 1.0034705  2S+1 = 2.2391699
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c43d0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c43d0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc with xc_func = [-0.00125226 -0.00173985 -0.00173982 ... -0.34090629 -0.34090629
 -0.34090629] = PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.40844876e-12, dtype=float64), Array(856.05048517, dtype=float64))
rho0_b = (Array(8.4084491e-12, dtype=float64), Array(856.05048518, dtype=float64))
gamma_a = (Array(2.86299923e-22, dtype=float64), Array(5.06808645e+08, dtype=float64))
gamma_b = (Array(2.86299946e-22, dtype=float64), Array(5.06808645e+08, dtype=float64))
gamma_ab = (Array(2.9394468e-22, dtype=float64), Array(5.06808645e+08, dtype=float64))
tau_a = (Array(4.27960131e-12, dtype=float64), Array(79367.69517297, dtype=float64))
tau_b = (Array(4.27960147e-12, dtype=float64), Array(79367.69517188, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864074  <S^2> = 3.2418512e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00c4130> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00c4130> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc with xc_func = [-0.00393652 -0.00161628 -0.00027595 ... -0.00036041 -0.00036041
 -0.00036041] = PBE,
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271682, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483504  <S^2> = 6.2003735e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0442f50> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0442f50> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc with xc_func = [-3.51825999e-03 -5.33715656e-04 -1.44785771e-03 ... -1.25655096e+00
 -1.25655096e+00 -1.25655096e+00] = PBE,
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437819  <S^2> = 1.3152146e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Exchange contribution only
PBE,
no spin scaling
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc with xc_func = [-0.00384021 -0.00157622 -0.00027991 ... -0.00029574 -0.00029574
 -0.00029574] = PBE,
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-10.08342402203768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-10.08342402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3840>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bb5b0; to 'JaxprTracer' at 0x7ffc304bb1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31233e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-3.576607106761178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.57660711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242cf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1032eed0; to 'JaxprTracer' at 0x7ffc1032eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a710390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15134751133630056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15134751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d9d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06b2ed0; to 'JaxprTracer' at 0x7ffbd06b2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x486c38d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-83.9171066105329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-83.91710661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb05045c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04ffc90; to 'JaxprTracer' at 0x7ffbb04ff880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be5e620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-9.39558372390088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-9.39558372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026ace0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009d990; to 'JaxprTracer' at 0x7ffb90329210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5456cec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9226536196257171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92265362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903bc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dd1c0; to 'JaxprTracer' at 0x7ffb506dcef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539f02a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5549624462496433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55496245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236c70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387d68e0; to 'JaxprTracer' at 0x7ffb387d6750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59373b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-6.434053490524648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-6.43405349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237840>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38535300; to 'JaxprTracer' at 0x7ffb385352b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfe109b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-3.06422716407499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.06422716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b050>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107bc810; to 'JaxprTracer' at 0x7ffb10542bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67cc6c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7109089407161252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71090894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702881b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083b1fd0; to 'JaxprTracer' at 0x7ffb083b2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x687dd100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5798263488595877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57982635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2a80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a23e0; to 'JaxprTracer' at 0x7ffb004a1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e72e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-1.3567819439604885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.35678194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241ce0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0274040; to 'JaxprTracer' at 0x7ffab02744a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fad8e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-9.352989348678083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-9.35298935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d150>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90045620; to 'JaxprTracer' at 0x7ffa90047100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fd248d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2939602458889837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29396025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca610>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70131ad0; to 'JaxprTracer' at 0x7ffa70131670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fc93480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-1.7960088360076412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.79600884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268710>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50203290; to 'JaxprTracer' at 0x7ffa50173dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc68b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-7.56777752979274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-7.56777753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286810>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10753560; to 'JaxprTracer' at 0x7ffa10732840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x793f04a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4591980241428863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45919802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234a10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e2930; to 'JaxprTracer' at 0x7ff9f07e27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78afa750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-2.976406749762545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.97640675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a890>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064c4f0; to 'JaxprTracer' at 0x7ff9d064c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8399a7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-1.139033479479439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.13903348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086501b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c72610; to 'JaxprTracer' at 0x7ff7a2c72bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8392bd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1054695207309261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10546952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1a90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716b3c9f0; to 'JaxprTracer' at 0x7ff716b3cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85cf7040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9025441664682491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90254417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e2f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160b1b70; to 'JaxprTracer' at 0x7ff7160b1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccc6530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7991263750581277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79912638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02534f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71591e340; to 'JaxprTracer' at 0x7ff71591e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fd2d580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3650486796051609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36504868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151df650; to 'JaxprTracer' at 0x7ff7151df4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90301480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.4561205938831541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45612059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d16b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7144f59e0; to 'JaxprTracer' at 0x7ff7144f55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f567bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3287197197725466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32871972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e750>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed20040; to 'JaxprTracer' at 0x7ff70ed20540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9923a9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7136619592265013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71366196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773760>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e880d60; to 'JaxprTracer' at 0x7ff70e8827a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b7332f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4252942800553261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42529428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01041e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e1c4630; to 'JaxprTracer' at 0x7ff70e1c4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f1f0120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 85.46872858254547
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0, epoch_train_loss=85.46872858254547
Epoch 1
Epoch 1 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(6.759681077892843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(6.75968108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6f90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc30b0; to 'JaxprTracer' at 0x7ff70efc2cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8339dd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(1.4035740799936662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.40357408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f650>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71616b3d0; to 'JaxprTracer' at 0x7ff71616b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f6e380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.04131471485118111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.04131471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773080>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0187ce0; to 'JaxprTracer' at 0x7ff9d0185620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62811f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(33.85338014690977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(33.85338015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9220>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10316ca0; to 'JaxprTracer' at 0x7ffa10317060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc24a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(3.834789431674564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.83478943, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252110>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346cd3f0; to 'JaxprTracer' at 0x7ffa341fa200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa73f2a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.5636794718176578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.56367947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8480>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072d620; to 'JaxprTracer' at 0x7ffa705d0d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x833e6290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.22717397297954664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22717397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236230>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab048f740; to 'JaxprTracer' at 0x7ffab048ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86244ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(3.057937995280448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.057938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506597b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00454fe0; to 'JaxprTracer' at 0x7ffb004555d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8620b210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(1.197107516145787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.19710752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285fa0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00747510; to 'JaxprTracer' at 0x7ffb00744630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b595a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.24324440366814115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.2432444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f57e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385c6d40; to 'JaxprTracer' at 0x7ffb385c51c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63dd0610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(0.5483318401083751, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.54833184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6490>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387a3380; to 'JaxprTracer' at 0x7ffb387a20c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68310a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.5030806534244943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.50308065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c8d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a3880; to 'JaxprTracer' at 0x7ffb700a24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x694d1800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(4.749748212170311, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(4.74974821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771470>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9025e6b0; to 'JaxprTracer' at 0x7ffb9025e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x462ba600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.19711223754200993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.19711224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240dc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bec00; to 'JaxprTracer' at 0x7ffbb06bc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36943a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.680197565864208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.68019757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252430>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06eb380; to 'JaxprTracer' at 0x7ffbb0692200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ebcc0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(3.0042339607519346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.00423396, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086529a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04f71f0; to 'JaxprTracer' at 0x7ffbf04f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d854010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.13754519966950957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.1375452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235860>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102616c0; to 'JaxprTracer' at 0x7ffc10262c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75033b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(1.2164143838369788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.21641438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148f70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081a4360; to 'JaxprTracer' at 0x7ffc300ccfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4591bdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.5288220780335421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.52882208, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685730>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704c5f80; to 'JaxprTracer' at 0x7ffc704c71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4592f1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(0.010455800545532166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.0104558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ffd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021e520; to 'JaxprTracer' at 0x7ffc902514e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33da2b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.5505495558683822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.55054956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013ccb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90724e50; to 'JaxprTracer' at 0x7ffc90725580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0e08f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.39559738307320497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.39559738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101247a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a5850; to 'JaxprTracer' at 0x7ffcb07a5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b09e1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.15815241487111859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.15815241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2e70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0494b30; to 'JaxprTracer' at 0x7ffcd0497ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65d49810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.2014870306360263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.20148703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4530>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb086c2750; to 'JaxprTracer' at 0x7ffb086c1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63531bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.08679327345518877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.08679327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d24e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715899030; to 'JaxprTracer' at 0x7ff715898270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x949d4f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.24328138266363236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.24328138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b3d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f045580; to 'JaxprTracer' at 0x7ff70f0457b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e72170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.15229378610114855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.15229379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e270>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01045e0; to 'JaxprTracer' at 0x7ffbb0104450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x729c2680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 36.80359318473204
1, epoch_train_loss=36.80359318473204
Epoch 2
Epoch 2 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.14280465674710252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.14280466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0413dd0; to 'JaxprTracer' at 0x7ffcf04104f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ecc7340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(0.49537071079659223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.49537071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241fc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0401440; to 'JaxprTracer' at 0x7ffcb0402750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94af9b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.005541084392880118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00554108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126f90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303259e0; to 'JaxprTracer' at 0x7ffc1047e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x639fe4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(12.560866863622216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(12.56086686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026aea0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf029b6f0; to 'JaxprTracer' at 0x7ffbf029a8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459d1bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(1.405390455985604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.40539046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659100>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0318860; to 'JaxprTracer' at 0x7ffbd0319580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c2a7ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.14948226236336107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.14948226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cab40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9025e070; to 'JaxprTracer' at 0x7ffb9025dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cfab830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.02803876037780778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02803876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02523d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3873b740; to 'JaxprTracer' at 0x7ffb38739a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25cc2ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.43864692398372324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.43864692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50245c60; to 'JaxprTracer' at 0x7ffb50246250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8251baf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(0.4252364875873268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.42523649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f260>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb103c1b70; to 'JaxprTracer' at 0x7ffb085eab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x922f8cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.06401807141783857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.06401807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903ad0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07a8bd0; to 'JaxprTracer' at 0x7ffab07a9a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cd3fbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020711847678668398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02071185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3870>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00e9d0; to 'JaxprTracer' at 0x7ff70f00f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4287eec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.16455242166515674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.16455242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7be0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab029f150; to 'JaxprTracer' at 0x7ffab029fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d0bce00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(0.3766450855192604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.37664509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126730>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70323fb0; to 'JaxprTracer' at 0x7ffa903591c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x462c8980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.011039651660317042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01103965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda0c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e7380; to 'JaxprTracer' at 0x7ffa700e5260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a601df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.2255527429153268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22555274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284d50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa345604f0; to 'JaxprTracer' at 0x7ffa345609f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36a5aef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(1.0953654010255116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.0953654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8ff0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451e020; to 'JaxprTracer' at 0x7ffbb0178860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7311cb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.030369665776091688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03036967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652280>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c9a30; to 'JaxprTracer' at 0x7ff9d01cae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5024d470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(0.3803140007824554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.380314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca1f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011cd60; to 'JaxprTracer' at 0x7ff9d011e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb438d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.1289085084157856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.12890851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107711d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715eaff60; to 'JaxprTracer' at 0x7ff715ead4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x419a68b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.026633563158516758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02663356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd5d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715484f90; to 'JaxprTracer' at 0x7ff715485fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d698f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02491151170736955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02491151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd9b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714edeb10; to 'JaxprTracer' at 0x7ff714edca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab51e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.05626260168856357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.0562626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8db0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b330bd0; to 'JaxprTracer' at 0x7ff70b332ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x627cc6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.009344194290871112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00934419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05088e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5844a110; to 'JaxprTracer' at 0x7ffc58449080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a168940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.014993854437231098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01499385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057d30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638d800; to 'JaxprTracer' at 0x7ff71638d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x857703d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.011093635621956822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01109364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f300>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34724cc0; to 'JaxprTracer' at 0x7ffa34726ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6789fba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.06965051085109386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.06965051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8e30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7025ccc0; to 'JaxprTracer' at 0x7ffc7025fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ff76930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.02092526363564503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02092526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0dd50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06aa160; to 'JaxprTracer' at 0x7ffbd06a9fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c3aa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 14.126733381869267
2, epoch_train_loss=14.126733381869267
Epoch 3
Epoch 3 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03669338825576548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03669339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589e40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107edee0; to 'JaxprTracer' at 0x7ffa107ee610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44ed4cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.033578786582031915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03357879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013dcc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714aa3a60; to 'JaxprTracer' at 0x7ff714aa0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79a2d330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01628210884585737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01628211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb260>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a7d760; to 'JaxprTracer' at 0x7ff7a2a7f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa643d070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.025190772228395605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772cf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07499e0; to 'JaxprTracer' at 0x7ff9f074b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b2fb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.035491917044885656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03549192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e3e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341fac00; to 'JaxprTracer' at 0x7ffa341f9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76bce7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04047723393168824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04047723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284730>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072dfd0; to 'JaxprTracer' at 0x7ffa9072ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61d83220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.03724640776130934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03724641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca910>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02e9f30; to 'JaxprTracer' at 0x7ffcf02eb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x627df2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03866828103267281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03866828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8370>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b29a6b0; to 'JaxprTracer' at 0x7ff70b29bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fc11600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.032105681333543246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03210568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702856d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0770400; to 'JaxprTracer' at 0x7ffab0707830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884928a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.038996799787148075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0389968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fe900>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828ff10; to 'JaxprTracer' at 0x7ffb3828c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34f01630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03395363658697091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03395364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106d30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382d9c10; to 'JaxprTracer' at 0x7ffb382d8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bb62040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0374891829954867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03748918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e890>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f0b510; to 'JaxprTracer' at 0x7ff71591e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e7130c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.03876409393189468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03876409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb520>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5067e7f0; to 'JaxprTracer' at 0x7ffb9053e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28915890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04243823207690583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04243823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490460>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0346890; to 'JaxprTracer' at 0x7ffbb0346840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a9c920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.04084542476313705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04084542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c0d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f04f0; to 'JaxprTracer' at 0x7ffbd04f0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95077a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.038797026697431534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03879703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1420>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0682d90; to 'JaxprTracer' at 0x7ffbd0680b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x537a3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.036223137986613106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03622314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2690>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30102200; to 'JaxprTracer' at 0x7ffbf00e6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa624f850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.03788670445092416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0378867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687f20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304da700; to 'JaxprTracer' at 0x7ffc304da750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97137260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.03895058286681467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03895058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c400>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5c680; to 'JaxprTracer' at 0x7ffc106b5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77cacc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03021231857190234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03021232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05086a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06d5440; to 'JaxprTracer' at 0x7ffcb06d7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459a8520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.036713480434888826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03671348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124920>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0277560; to 'JaxprTracer' at 0x7ffcd0277b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x826e72d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04227403613766867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04227404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243f90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147e69d0; to 'JaxprTracer' at 0x7ffcf002d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x423d21c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.03792917148579441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03792917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff0b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067ecf0; to 'JaxprTracer' at 0x7ffcb067f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84ef2190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04023114351819437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04023114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6990>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8a8f40; to 'JaxprTracer' at 0x7ff70e8abfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ce2aff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.03619729831315513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0361973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb3f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10263a60; to 'JaxprTracer' at 0x7ffc907a3fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0e64530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.03547812486205544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03547812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8250>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed209a0; to 'JaxprTracer' at 0x7ff70ed231a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48b00450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.03725933087606588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03725933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744850>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed7b00; to 'JaxprTracer' at 0x7ff7a2ed7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e23e500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.191081239344681
3, epoch_train_loss=4.191081239344681
Epoch 4
Epoch 4 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03882392318806062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03882392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5844a700; to 'JaxprTracer' at 0x7ffc58448900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ddb440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03511049575047002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0351105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d860>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02436f0; to 'JaxprTracer' at 0x7ffcd0240540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15bedaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.017638293583480222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01763829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba350>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0694680; to 'JaxprTracer' at 0x7ffc90641ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x621a3970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.02673165521857647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02673166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243370>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100aa8e0; to 'JaxprTracer' at 0x7ffc100abf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b6b5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.03764360288088129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0376436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a660>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ee1b0; to 'JaxprTracer' at 0x7ffbb02efe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39a9c340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.042601689658302085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04260169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284780>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071a570; to 'JaxprTracer' at 0x7ff9f071b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4abd5d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.03933150488798922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0393315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cade0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102d4180; to 'JaxprTracer' at 0x7ffa102d46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9aa09c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.040316629962960204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04031663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8470>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387d5e90; to 'JaxprTracer' at 0x7ffb387d5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x494e6be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.03457315658642677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03457316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8820>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08627e20; to 'JaxprTracer' at 0x7ffb08626de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f412600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04112133633693994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04112134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903ef0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107bc040; to 'JaxprTracer' at 0x7ffb006d6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x434a6e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03617278252753707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03617278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9670>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f075a7f0; to 'JaxprTracer' at 0x7ff9f07593a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39509370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.03964671883012992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03964672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e9b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f2480; to 'JaxprTracer' at 0x7ff70c1af0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78b81380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.041181387062587574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04118139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9290>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104ecc20; to 'JaxprTracer' at 0x7ffa706712b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc2dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.044824298644981636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0448243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb280>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50651300; to 'JaxprTracer' at 0x7ffa50650ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91f5a4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.04370331198186581, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04370331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05087c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072cd60; to 'JaxprTracer' at 0x7ffbb0744cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa604dae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.04130887335211528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04130887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026aee0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05bf560; to 'JaxprTracer' at 0x7ff9d05bef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6987be30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0383622447848735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03836224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106380>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bf880; to 'JaxprTracer' at 0x7ff7168bd4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8286e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.03997165045848363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03997165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286350>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03ebc40; to 'JaxprTracer' at 0x7ffcd03e97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45c001b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.04124309047933119, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04124309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f680>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716658590; to 'JaxprTracer' at 0x7ff7166596c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ad55820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03221240732097742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03221241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d1290>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300cca40; to 'JaxprTracer' at 0x7ffc300cd350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c3511d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.038940071926762056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03894007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107700a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021c360; to 'JaxprTracer' at 0x7ffa501cfa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d30f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.044625233855539306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04462523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd720>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb100d8360; to 'JaxprTracer' at 0x7ffb706ccae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x877ef9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04048480912502362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04048481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5a30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b70b0; to 'JaxprTracer' at 0x7ffc906b71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ca34260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04231494317812879, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04231494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301912b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70734860; to 'JaxprTracer' at 0x7ffcf0411c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4628c3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.03885227921623462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03885228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58656cf0; to 'JaxprTracer' at 0x7ffc58654180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c633b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.03778600417482127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.037786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1570>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714eded90; to 'JaxprTracer' at 0x7ff70e6121b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6577a900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.03986755022523545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03986755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b950>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102fd300; to 'JaxprTracer' at 0x7ffa102fd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57ce9040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.180489928534392
4, epoch_train_loss=4.180489928534392
Epoch 5
Epoch 5 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04078430644300541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04078431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3e50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011c2c0; to 'JaxprTracer' at 0x7ff9d011fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ffa2c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03679642160087013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03679642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71455d350; to 'JaxprTracer' at 0x7ff71455cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2511880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.018974691102253402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0548f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715f10a40; to 'JaxprTracer' at 0x7ff715f12c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f7ad670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.02839756517619082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02839757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfe550>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a69da0; to 'JaxprTracer' at 0x7ff9f0064090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92f3d240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.039363269038086804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03936327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d31b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10314c20; to 'JaxprTracer' at 0x7ff7a2e5ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41759630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04490882569145018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04490883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cacb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160b3ab0; to 'JaxprTracer' at 0x7ff7160b0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54af3ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.04138502711414963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04138503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8c20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9056a700; to 'JaxprTracer' at 0x7ffa90568450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7baadcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04259954207588035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04259954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa906fccc0; to 'JaxprTracer' at 0x7ffa906fe930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11c24b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.037280773825932964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03728077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f6f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142dc720; to 'JaxprTracer' at 0x7ff7142df470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x876e13b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04320070941772453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04320071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747150>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081a5d00; to 'JaxprTracer' at 0x7ffb081a74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4608afa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.038173837107333755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03817384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba600>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385358f0; to 'JaxprTracer' at 0x7ffb385342c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x599dd900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04189667268640738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04189667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904909a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382d9b20; to 'JaxprTracer' at 0x7ffb382d8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39003ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04337085652862801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04337086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056350>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9032aa70; to 'JaxprTracer' at 0x7ffb90328450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a7031b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04727906940854565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04727907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235860>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069d530; to 'JaxprTracer' at 0x7ffb5069ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x738cb040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.04592564730677927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04592565, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d1030>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03470b0; to 'JaxprTracer' at 0x7ffbb03463e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4865dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.043367055537244285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04336706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca010>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0489e40; to 'JaxprTracer' at 0x7ffbf048b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69c7f190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.04071134870298377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04071135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4ce0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107384a0; to 'JaxprTracer' at 0x7ffc10738770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c2cd670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.04204635492576712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04204635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702851c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70059760; to 'JaxprTracer' at 0x7ffc70058630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f706860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.04383727957235976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04383728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508130>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70297c40; to 'JaxprTracer' at 0x7ffc702c8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a5cc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03435582974307038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03435583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02792a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00b4950; to 'JaxprTracer' at 0x7ffcf00b7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa43ee2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.04100283795454048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04100284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241700>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702fc6d0; to 'JaxprTracer' at 0x7ffc702fd9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x495870d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04705529372247965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04705529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7760>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008c7c0; to 'JaxprTracer' at 0x7ff9f008d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d57e250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04313216875575675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04313217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edbee0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064ec50; to 'JaxprTracer' at 0x7ff9d064f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39bd8400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04449689746359225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0444969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502349f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed71fd0; to 'JaxprTracer' at 0x7ff70ed73fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f9b7350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.04160725290191167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04160725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c3d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a20c0; to 'JaxprTracer' at 0x7ffb700a3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac35210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.040244866295107595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04024487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651610>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08462890; to 'JaxprTracer' at 0x7ffb08462520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d449e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.04253596967211096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04253597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca120>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016a200; to 'JaxprTracer' at 0x7ffc1016a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b948a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.169848564309998
5, epoch_train_loss=4.169848564309998
Epoch 6
Epoch 6 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.042948897634455606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0429489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107b00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70506c50; to 'JaxprTracer' at 0x7ffc70507010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229577f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0386562199287568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03865622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032d810>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1032fa60; to 'JaxprTracer' at 0x7ffc1032e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30717160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.02013692917755277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02013693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbe10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90640cc0; to 'JaxprTracer' at 0x7ffc90641a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87e07850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0299055844264874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02990558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a360>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd056ac00; to 'JaxprTracer' at 0x7ffbd056bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11d9c070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.041337844584435825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04133784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269f50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90292020; to 'JaxprTracer' at 0x7ffb902936f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x932b1150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04720188785213471, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04720189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bbaa0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb046f5b0; to 'JaxprTracer' at 0x7ffbb046f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bb51270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.04367285247666431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04367285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca250>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387d45e0; to 'JaxprTracer' at 0x7ffb387d48b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1206d9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.044781337351589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04478134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9190>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855c4a0; to 'JaxprTracer' at 0x7ffb3855cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7947620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.03980670521661997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03980671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d38a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e5a1580; to 'JaxprTracer' at 0x7ff70e5a2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45bdb5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0453312647025549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04533126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903f80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1add50; to 'JaxprTracer' at 0x7ff70c1ac680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ee32ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.040141390114355455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04014139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107ac0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083b2980; to 'JaxprTracer' at 0x7ffb083b0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x361e2c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.044102202376847324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0441022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50150bd0; to 'JaxprTracer' at 0x7ffa501511c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bdeac60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04557267346432763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04557267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb380>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34234ae0; to 'JaxprTracer' at 0x7ffa34236f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63471950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04975326602374895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04975327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f1e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10343d80; to 'JaxprTracer' at 0x7ffa10343fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86cf9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.04831909234198933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04831909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902681b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10522c00; to 'JaxprTracer' at 0x7ffa10521b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c030510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.045534261488037416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04553426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bad0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078ed40; to 'JaxprTracer' at 0x7ffa1078ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ef7cc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.042965667799481376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04296567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287440>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154518a0; to 'JaxprTracer' at 0x7ff715450220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b8b13f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.044150486507111175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04415049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e210>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71430ade0; to 'JaxprTracer' at 0x7ffc90250860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1aab500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.04629550679569169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04629551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cffb30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0410950; to 'JaxprTracer' at 0x7ffcd0413fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87644690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03634769727479842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0363477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192ff0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0203e70; to 'JaxprTracer' at 0x7ffcf02037e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1886d040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.043405671868855404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04340567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda070>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907be7f0; to 'JaxprTracer' at 0x7ffc907bec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80123eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04952237361582858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04952237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251170>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38739ad0; to 'JaxprTracer' at 0x7ffb3873a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aaa9b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04573155945848699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04573156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b470>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06ab560; to 'JaxprTracer' at 0x7ffcb06a9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x965b30c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04685620150570433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0468562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492200>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30741a30; to 'JaxprTracer' at 0x7ffc30742390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d651d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.044169312716368196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04416931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c12b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01bb100; to 'JaxprTracer' at 0x7ff716aa4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9657e250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.042580847925135036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04258085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107735a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9046b830; to 'JaxprTracer' at 0x7ffb9046b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x851d4eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.04515853908770949, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04515854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4650>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd3ec0; to 'JaxprTracer' at 0x7ff7a2cd3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2a208b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.1589957509515125
6, epoch_train_loss=4.1589957509515125
Epoch 7
Epoch 7 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.003970243288383017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00397024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4d50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90622f70; to 'JaxprTracer' at 0x7ffc90623fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a60590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03698479009120321, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03698479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0caf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc1ee0; to 'JaxprTracer' at 0x7ffc10453060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x744703a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.02115176921622628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a4b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0203c40; to 'JaxprTracer' at 0x7ffcb02014e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31a5a160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03139061581686526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03139062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd7e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714819b20; to 'JaxprTracer' at 0x7ff714819260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7421f9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.03767820147187882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0376782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d22f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50650f90; to 'JaxprTracer' at 0x7ffa506517b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968e71d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.012452590035137287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01245259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca140>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168be480; to 'JaxprTracer' at 0x7ff7168bd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fb420e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.018576956036440054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01857696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9760>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0820ec00; to 'JaxprTracer' at 0x7ffb0820c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80877cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.0029496514909511757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00294965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8220>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0715fd0; to 'JaxprTracer' at 0x7ffcb0717ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8be22250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04216754347141359, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04216754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050b330>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142deca0; to 'JaxprTracer' at 0x7ff7142dfba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40c3ae00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.044136564565050766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04413656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588b10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb103297b0; to 'JaxprTracer' at 0x7ffb103286d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dfe75a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03788645981980335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03788646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7530>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b68e0; to 'JaxprTracer' at 0x7ffc584b4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c739510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04430337222336741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04430337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d590>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e82c040; to 'JaxprTracer' at 0x7ffb90516700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe55a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.043497852230739355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04349785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b190>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714c67e70; to 'JaxprTracer' at 0x7ff714c67790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a0870a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.009170747699297523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00917075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032da70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e5d1b20; to 'JaxprTracer' at 0x7ff70e5d28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95029810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.04226280852259526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04226281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d0210>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03692b0; to 'JaxprTracer' at 0x7ffbf036bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59d30f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.04210474845252069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04210475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2b00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0114450; to 'JaxprTracer' at 0x7ffbd0114720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x978d5190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.04414082361238822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04414082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c94a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dc9a0; to 'JaxprTracer' at 0x7ffc902de110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79fb9290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.04269201057902876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04269201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0403420; to 'JaxprTracer' at 0x7ffcb0403740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185cb020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.004899293515026141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00489929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907499c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c70950; to 'JaxprTracer' at 0x7ff7a2c71530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4442b7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03830856101327128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03830856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4400>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0331940; to 'JaxprTracer' at 0x7ffbf0332f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4002cae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.028381873515587436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02838187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba7d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7169436f0; to 'JaxprTracer' at 0x7ff7169414e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3933d1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.0006728841680356957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00067288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234610>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d03ba430; to 'JaxprTracer' at 0x7ff9d03baac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x657def70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.028702041157234084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02870204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191a60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed20680; to 'JaxprTracer' at 0x7ff70ed21b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e0ec90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.01563670986255285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01563671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685fc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307cd530; to 'JaxprTracer' at 0x7ffc307ce980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9990f0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.04605152657211609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04605153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107980>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305106d0; to 'JaxprTracer' at 0x7ff7163e7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94ae6c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04401726119116291, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04401726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240ea0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07ddb20; to 'JaxprTracer' at 0x7ffb10705580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc7bc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.03407777527690171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03407778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148730>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50678f40; to 'JaxprTracer' at 0x7ff70e834310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cc820a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.267718646522475
7, epoch_train_loss=4.267718646522475
Epoch 8
Epoch 8 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04714915052711067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04714915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c95e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715c280e0; to 'JaxprTracer' at 0x7ff715c29850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x605635e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.042197094432281756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04219709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101263f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f2f70; to 'JaxprTracer' at 0x7ffa902f25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a402ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.021868248870417342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032dd60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e883470; to 'JaxprTracer' at 0x7ff70e8821b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x409326b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.032994119590516624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03299412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4640>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106d8f90; to 'JaxprTracer' at 0x7ffc106db1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50ebc430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.04500170286660333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0450017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b1e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00ac9a0; to 'JaxprTracer' at 0x7ffbf00adfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30cd6520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.05180480812864129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05180481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b91a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901359e0; to 'JaxprTracer' at 0x7ffb90137920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f28470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.04792193672924254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04792194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fbc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd5a30; to 'JaxprTracer' at 0x7ff7a2cd5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dd29360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04910807314097849, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04910807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cf70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0293650; to 'JaxprTracer' at 0x7ffbf02928e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x231dd150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04363236134792582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04363236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5090>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004d5800; to 'JaxprTracer' at 0x7ffb004d4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfc58260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.049482640405668056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04948264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903880>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ac130; to 'JaxprTracer' at 0x7ff70c1ae160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80cd8910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.043932926871247106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04393293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca230>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107c2c00; to 'JaxprTracer' at 0x7ffa107c2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x516608f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04826680098605595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0482668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124fe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902bf1a0; to 'JaxprTracer' at 0x7ffa902beed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83875cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04977635255337321, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04977635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c8e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072f1a0; to 'JaxprTracer' at 0x7ffa5072eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1998f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0546724686483382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05467247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5890>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504862f0; to 'JaxprTracer' at 0x7ffa50484ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b9c320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.052665210538043725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05266521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02786a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71591f1f0; to 'JaxprTracer' at 0x7ff71591e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41e034a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.049592112792180267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04959211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269b30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e89cb0; to 'JaxprTracer' at 0x7ff7a2e8a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84e51150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.047112661041294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04711266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9870>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902f9170; to 'JaxprTracer' at 0x7ffb902fa930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8911ed20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.048236574629141576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04823657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d0c20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08420270; to 'JaxprTracer' at 0x7ffb08422610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5242c7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.050858781477589814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05085878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054fe0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71634a660; to 'JaxprTracer' at 0x7ff70efc2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d368660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.039994059203041464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03999406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192880>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bbbce0; to 'JaxprTracer' at 0x7ff715bb8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88062370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.04758134199574931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04758134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b630>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf048aac0; to 'JaxprTracer' at 0x7ffa903586d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x429fef20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.05437958064446628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05437958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d070>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154522f0; to 'JaxprTracer' at 0x7ff7154513f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aa8c5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.05020346017860401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05020346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df230>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04bb150; to 'JaxprTracer' at 0x7ffbd04bb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x567b74d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.05140366984365005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05140367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e140>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90251490; to 'JaxprTracer' at 0x7ffc902528e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987fe040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.04847706617301442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04847707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252940>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10342890; to 'JaxprTracer' at 0x7ffa10343fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43bc1c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.046698808714925544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04669881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650800>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05d9440; to 'JaxprTracer' at 0x7ff9d05da6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e925270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.04956432837906537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04956433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021ed60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70356980; to 'JaxprTracer' at 0x7ffb70356e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ec7d710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.138606903831172
8, epoch_train_loss=4.138606903831172
Epoch 9
Epoch 9 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04938588487549718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04938588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f1760; to 'JaxprTracer' at 0x7ffbd04f1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b096b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.044081622281327525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04408162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edaf30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102f52b0; to 'JaxprTracer' at 0x7ffc102f42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x506ae780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.022741982473438015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013cd50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71518b560; to 'JaxprTracer' at 0x7ff715188bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af4a350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03456841442811842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03456841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190da0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716627dd0; to 'JaxprTracer' at 0x7ff716624e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a6d3480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.04698249726872096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0469825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4790>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50652430; to 'JaxprTracer' at 0x7ffa50650040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1573020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.05418280332927309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0541828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8130>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5068d620; to 'JaxprTracer' at 0x7ffa5068d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b95c7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05020406166946132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05020406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8a10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34560680; to 'JaxprTracer' at 0x7ff70ed435b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41cba340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05137966543071844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05137967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bace0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa905698f0; to 'JaxprTracer' at 0x7ffa90568860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c024110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04528578344076939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04528578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b2a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10540860; to 'JaxprTracer' at 0x7ffb10542e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86045420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05162475621790007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05162476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148570>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04b9f30; to 'JaxprTracer' at 0x7ffab04b9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9efbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.04595427141098254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04595427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9060>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7024bd80; to 'JaxprTracer' at 0x7ffc7024be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75bdc770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0503082679950559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05030827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda3d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507188b0; to 'JaxprTracer' at 0x7ff71511acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7187a790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.051967347662646296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05196735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c4f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90103290; to 'JaxprTracer' at 0x7ffb90101c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58260390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.057212865870832894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05721287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c27a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf036aed0; to 'JaxprTracer' at 0x7ffbf03681d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfb5c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.05503654119242857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05503654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfef70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f7b50; to 'JaxprTracer' at 0x7ffc306f7100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x689989f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.0517609777941386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05176098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2ac0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a00e0; to 'JaxprTracer' at 0x7ffb004a3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92715570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.04906157842733128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04906158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02866f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ad170; to 'JaxprTracer' at 0x7ffc300ac130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x415a0530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.05034510347961584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0503451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027aa70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0496ca0; to 'JaxprTracer' at 0x7ffcd04960c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85f049c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.05311831745232607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05311832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502346a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2d0e1b0; to 'JaxprTracer' at 0x7ff7a2d0c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aae2590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.041770157910026015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04177016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd620>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b8b30; to 'JaxprTracer' at 0x7ffb900bb380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eab4600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.04984941427434231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04984941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01077a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08681440; to 'JaxprTracer' at 0x7ffb086817b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ceed60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.05691649733133328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0569165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08420d60; to 'JaxprTracer' at 0x7ffb08422250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f2ffa00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.05234203197169493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05234203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a630>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906216c0; to 'JaxprTracer' at 0x7ffc90622e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac61d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.053833821343632834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05383382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c32e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f4c20; to 'JaxprTracer' at 0x7ffc907f7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e2eb7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05042942043558134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05042942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770820>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05d91c0; to 'JaxprTracer' at 0x7ff9d05d9b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x289b75d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04859520525148853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04859521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fc820>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077d1c0; to 'JaxprTracer' at 0x7ffa1077d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a99cdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.05165298012727085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05165298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848efb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07104f0; to 'JaxprTracer' at 0x7ff9f0710630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a1071f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.1280939701916255
9, epoch_train_loss=4.1280939701916255
Epoch 10
Epoch 10 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05178462932072434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05178463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca830>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0610090; to 'JaxprTracer' at 0x7ff9f0610900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cfcea50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.046116162144517456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04611616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a980>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062b470; to 'JaxprTracer' at 0x7ffcb06299e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x266b0670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.023927911500500807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2020>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00f650; to 'JaxprTracer' at 0x7ff70f00da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x556397a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03633724585311822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03633725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c3b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902014e0; to 'JaxprTracer' at 0x7ffc902035b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3960c030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.049187691047494105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04918769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6ef0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bfd80; to 'JaxprTracer' at 0x7ffbb06bc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6195e890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.056815833066316115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05681583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508580>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d4b80; to 'JaxprTracer' at 0x7ffb704d78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40fa24c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05265936627013888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05265937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06caf40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00732fc0; to 'JaxprTracer' at 0x7ffb00732930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ecab2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05385187202456083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05385187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9740>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd5300; to 'JaxprTracer' at 0x7ff7a2cd6250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ec7ad20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04746570195854395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0474657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055630>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306c5e40; to 'JaxprTracer' at 0x7ffc306c6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d8adf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05405210980385432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05405211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903d70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02ea660; to 'JaxprTracer' at 0x7ffcf02e80e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87229a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0482438019927133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0482438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9790>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34266020; to 'JaxprTracer' at 0x7ffa342649a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60764780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.05268430763943444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05268431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658c50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50151a30; to 'JaxprTracer' at 0x7ffa50153330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c7c560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.05446596114233194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05446596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0600>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451c860; to 'JaxprTracer' at 0x7ffa3451f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cb856e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.06005060277819557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0600506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7200>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160e0270; to 'JaxprTracer' at 0x7ff7160e0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ba8dc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.057746395546327565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0577464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7200>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0067650; to 'JaxprTracer' at 0x7ff9f0065580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c2cf160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.05423243140436266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05423243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749780>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2aa6200; to 'JaxprTracer' at 0x7ff9d067f510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b47dca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.051378809115627554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05137881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fae0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb100db2e0; to 'JaxprTracer' at 0x7ffb100d9da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41f61f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.052743651237450354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05274365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6b40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a17b0; to 'JaxprTracer' at 0x7ffc582a3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e124240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.055719615798514005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05571962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193290>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704ba840; to 'JaxprTracer' at 0x7ffb704b8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4802af00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.043875778670575696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04387578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490bf0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387a3970; to 'JaxprTracer' at 0x7ffb387a2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a837bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.052270193630037355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05227019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b180>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062d7b0; to 'JaxprTracer' at 0x7ffc3062eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4feef2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.059745004440381624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.059745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570c180; to 'JaxprTracer' at 0x7ff71570c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b119640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.05489109975115425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0548911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685220>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb27100; to 'JaxprTracer' at 0x7ff70eb245e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22c685e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.056476007270353505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05647601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9580>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda29d0; to 'JaxprTracer' at 0x7ff70eda3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d2b8040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05285343435827033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05285343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edad10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05d8cc0; to 'JaxprTracer' at 0x7ff9d05d9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45f90420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.050888952992733945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05088895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f02c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077f4c0; to 'JaxprTracer' at 0x7ffc10093c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4531f680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.05417561411851632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05417561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5350>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705298a0; to 'JaxprTracer' at 0x7ffb705299e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6719b290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.116254686158746
10, epoch_train_loss=4.116254686158746
Epoch 11
Epoch 11 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05434677828404764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05434678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0cd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8b58f0; to 'JaxprTracer' at 0x7ff70e8b6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68170d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.048221059539752274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04822106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7110>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1da070; to 'JaxprTracer' at 0x7ff70c1db1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2646a1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.025431183505847513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c6b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828e5c0; to 'JaxprTracer' at 0x7ffc7044f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24d593e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03838357597113638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03838358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191fd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706cc360; to 'JaxprTracer' at 0x7ffb706cf790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c30e020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.051545025451853285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05154503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6a90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042f0b0; to 'JaxprTracer' at 0x7ffc7042e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37a74c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.059717889956075236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05971789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9510>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701090d0; to 'JaxprTracer' at 0x7ffa70109bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439a9e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.055262983353647856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05526298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074ace0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706153f0; to 'JaxprTracer' at 0x7ffa70614fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5658f9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05654191045562419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05654191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907493e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ece29d0; to 'JaxprTracer' at 0x7ff70ece22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61851980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0502910417632666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05029104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032ecc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07aa390; to 'JaxprTracer' at 0x7ffab07aa8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77090550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05670309852676781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0567031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e1c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08624d10; to 'JaxprTracer' at 0x7ffb1032a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc427b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.05084828432728154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05084828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285c10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10520810; to 'JaxprTracer' at 0x7ffa10520bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x389111d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.05537023020301976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05537023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7750>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70719440; to 'JaxprTracer' at 0x7ffb7071b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a5eddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.05723127956035292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05723128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e7a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0178220; to 'JaxprTracer' at 0x7ffbb0178ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6deb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.06319201258423439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06319201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251be0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34793c90; to 'JaxprTracer' at 0x7ffa34790cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x543d95c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.060767657132365996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06076766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055030>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106d8540; to 'JaxprTracer' at 0x7ffc106d9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c96d570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.05696367213408343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05696367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb660>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ce520; to 'JaxprTracer' at 0x7ffa344e1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9a8fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.054068357007450926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05406836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235eb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05fe1b0; to 'JaxprTracer' at 0x7ffcb05fcdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b905f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.055371517780872404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05537152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd300>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf002f290; to 'JaxprTracer' at 0x7ffcf002d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa55e9f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.05871366165678612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05871366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684c10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea987c0; to 'JaxprTracer' at 0x7ff70ea9a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60f57ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.04639869729609917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0463987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c28e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7165f5530; to 'JaxprTracer' at 0x7ff7165f4f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d9bfc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.05480355046058796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05480355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284430>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f06122a0; to 'JaxprTracer' at 0x7ff9f0611cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eea9cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.06286818958024457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06286819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659fd0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0588ae0; to 'JaxprTracer' at 0x7ff9f058a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x427d0ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.05792645226044201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05792645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492fc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704b8bd0; to 'JaxprTracer' at 0x7ffb704b8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d97fdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.059326696192850914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0593267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252b10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50741940; to 'JaxprTracer' at 0x7ffb50741a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a3297c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05582446416970852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05582446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744890>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02f8f40; to 'JaxprTracer' at 0x7ffbf02f8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa233b900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.053617765096088774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05361777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086519d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715ecf1a0; to 'JaxprTracer' at 0x7ff715ecc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc617a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.05720938701059062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05720939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b91d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0116700; to 'JaxprTracer' at 0x7ffbd0116e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5371fe40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.103092809183949
11, epoch_train_loss=4.103092809183949
Epoch 12
Epoch 12 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0571291616561868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05712916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fe20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a2430; to 'JaxprTracer' at 0x7ffcd07a27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723f360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.05044594902215721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05044595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269520>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c71ee0; to 'JaxprTracer' at 0x7ff7a2c73b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23138bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.027188072134562966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02718807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a960>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346cc4f0; to 'JaxprTracer' at 0x7ffa346ce480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c498550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04073434765644954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04073435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125830>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706b3470; to 'JaxprTracer' at 0x7ffc706b11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7691a5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.05410405269570583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05410405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032df40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026dcb0; to 'JaxprTracer' at 0x7ffcb026e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x139db500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.06297530927793214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06297531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748340>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0112a70; to 'JaxprTracer' at 0x7ffbb0110220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b87c560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05806937012266642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05806937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9090>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715118f40; to 'JaxprTracer' at 0x7ff715119850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3db686b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.059554897073070594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0595549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9cb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00815d0; to 'JaxprTracer' at 0x7ffbf0081ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465de40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.053589516579923176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05358952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0572e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb103508b0; to 'JaxprTracer' at 0x7ffb103512b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35affb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05969032526486932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05969033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903400>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703cf880; to 'JaxprTracer' at 0x7ffa703cf240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50bbf1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.05381488789896298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05381489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c750>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900adb70; to 'JaxprTracer' at 0x7ffa900accc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d10330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.058431140745831577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05843114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b4b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0153470; to 'JaxprTracer' at 0x7ffbb0153330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39459530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.06038324096874443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06038324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a750>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021c450; to 'JaxprTracer' at 0x7ffbf011fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987342b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.06671806454482415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06671806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105110>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa104f24d0; to 'JaxprTracer' at 0x7ffa104f0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a5df3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.06414639869059792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0641464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032df80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f3f100; to 'JaxprTracer' at 0x7ff7160b1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a19bbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.06005628204359796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06005628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285f20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714592340; to 'JaxprTracer' at 0x7ff714593ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28797a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.05715903500386513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05715904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b87d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10680db0; to 'JaxprTracer' at 0x7ffc10682ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5456a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0583396065303604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05833961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc080>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1075fab0; to 'JaxprTracer' at 0x7ffb1075e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4212420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.06212732871063991, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06212733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e590>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700595d0; to 'JaxprTracer' at 0x7ffc70059850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e123320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.04931629517842264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0493163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490c20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58654770; to 'JaxprTracer' at 0x7ffc58656ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56594080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.05750302333882827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05750302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d3e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0297f10; to 'JaxprTracer' at 0x7ffcb077f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48ab4700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.06636998693477425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06636999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca270>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10452570; to 'JaxprTracer' at 0x7ffc10453b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x571cb760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.06142697258916448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06142697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0b20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea9bba0; to 'JaxprTracer' at 0x7ff70ea9acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x610a1630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.06248782501324474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06248783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01046d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0435940; to 'JaxprTracer' at 0x7ffcd0436250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7269f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.059294207726847195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05929421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff760>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a73b50; to 'JaxprTracer' at 0x7ffb387a2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81f5d9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0567644159870675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05676442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252490>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077dda0; to 'JaxprTracer' at 0x7ffa1077cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x921d1490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.060716106179713306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06071611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289e80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f8180; to 'JaxprTracer' at 0x7ffb900f8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x252d2080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.088341484752266
12, epoch_train_loss=4.088341484752266
Epoch 13
Epoch 13 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.060379820887541014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06037982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086526b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90672200; to 'JaxprTracer' at 0x7ffc90673240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af688c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.052956268657535784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05295627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285810>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341fbe70; to 'JaxprTracer' at 0x7ffa341fade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbfd7f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.02913428064891289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02913428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1290>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073b9c0; to 'JaxprTracer' at 0x7ffc10739580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c347d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0436336992579395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0436337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6aa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b299620; to 'JaxprTracer' at 0x7ff70b29a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5550f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.05704796310311617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05704796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013fa90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e3600; to 'JaxprTracer' at 0x7ff9f07e2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4e7da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.06695295352736975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06695295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d58e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb384f5940; to 'JaxprTracer' at 0x7ffb384f6840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x900a0b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.06135412324898933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06135412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508120>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a29e5a80; to 'JaxprTracer' at 0x7ff7a29e6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e2e8380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.06319495732708946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06319496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050b6d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e0f290; to 'JaxprTracer' at 0x7ff7a2e0dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66af1a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.05720952019475342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05720952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02858b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068bc90; to 'JaxprTracer' at 0x7ffc3068a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32786710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.06317017290742351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06317017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de840>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01401d0; to 'JaxprTracer' at 0x7ffcf0142340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a01e1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.05730036916970789, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05730037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653790>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b16c0; to 'JaxprTracer' at 0x7ffbd00b28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ef2cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06202875876812921, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06202876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702866a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151599e0; to 'JaxprTracer' at 0x7ff71515ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b80c750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.06411090335567643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0641109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca870>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05389a0; to 'JaxprTracer' at 0x7ffbf029b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15856130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.07101423187237366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07101423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fb60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dc0e0; to 'JaxprTracer' at 0x7ffb506dcd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88a05350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.06803740519816216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06803741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013fb40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de6b0; to 'JaxprTracer' at 0x7ff9f05deca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97940470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.06367801034870868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06367801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055740>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064e4d0; to 'JaxprTracer' at 0x7ffcb064e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b237170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0608106635806043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06081066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb0a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303244f0; to 'JaxprTracer' at 0x7ffc30324f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x535acba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.06189218067923188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06189218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f42d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638c310; to 'JaxprTracer' at 0x7ff71638eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fdebb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.06617746121308543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06617746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684840>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855d710; to 'JaxprTracer' at 0x7ffbb0746930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55095220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05276091886040058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05276092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3090>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7052ad40; to 'JaxprTracer' at 0x7ffb7052a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a176260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06056058073114651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06056058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506598c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10598310; to 'JaxprTracer' at 0x7ffa1059a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73892350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.07060319756241341, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0706032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9ae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70357740; to 'JaxprTracer' at 0x7ffc70507240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x940335f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0654410326409008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06544103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca940>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714272160; to 'JaxprTracer' at 0x7ff714272570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x443a06c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.06625054524461325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06625055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269e80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90621e90; to 'JaxprTracer' at 0x7ffc906213f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99fa6480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0632564169123141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06325642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb2a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f1300; to 'JaxprTracer' at 0x7ffbd04f3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9483b250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.06042157513020246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06042158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f8f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021eed0; to 'JaxprTracer' at 0x7ffb5021d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87d6ee50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.06469615392108356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06469615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06858a0; to 'JaxprTracer' at 0x7ffbd0685da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b30840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.0709720580825275
13, epoch_train_loss=4.0709720580825275
Epoch 14
Epoch 14 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09253666185480719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09253666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba190>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0295f30; to 'JaxprTracer' at 0x7ffcf0295e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40d675a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06030448990926803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06030449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279380>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd1ee0; to 'JaxprTracer' at 0x7ff7a2cd0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3429a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03116961199485065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03116961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fc90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081769d0; to 'JaxprTracer' at 0x7ffb08177ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c205a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0471129914844636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04711299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124a60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5c2c0; to 'JaxprTracer' at 0x7ff716a5e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c02d2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06587881505012833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06587882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02868c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142adda0; to 'JaxprTracer' at 0x7ff7142acdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97561d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11286252402131539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11286252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1380>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34562390; to 'JaxprTracer' at 0x7ffa34563bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x287afce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.08481424195199846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08481424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0541b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b02c0; to 'JaxprTracer' at 0x7ffbd00b15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ba9340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10116142794933772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10116143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054fc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7163e5440; to 'JaxprTracer' at 0x7ff7163e4450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bd9fc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06098591227217861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06098591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4490>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50246480; to 'JaxprTracer' at 0x7ffb50244090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c320700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.07125608204176068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07125608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903ed0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714ab9260; to 'JaxprTracer' at 0x7ff714ab9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x136ab430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06505728627708193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06505729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8420>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a52610; to 'JaxprTracer' at 0x7ff714a513a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99f7c850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06878951588722187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06878952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027bdc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9011af20; to 'JaxprTracer' at 0x7ffa9011bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1578ede0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07288739603262577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0728874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e450>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03cda80; to 'JaxprTracer' at 0x7ff9f03ce570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1b14b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11688991375435868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11688991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286e20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042d170; to 'JaxprTracer' at 0x7ffc7042e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f555970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07970723654048495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07970724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285980>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e6105e0; to 'JaxprTracer' at 0x7ff70e6104a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0baec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07330461727463275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07330462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509b50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5846a8e0; to 'JaxprTracer' at 0x7ffc5846ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x837f7310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.06657705473974482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06657705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301916e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00b4a90; to 'JaxprTracer' at 0x7ffcf00b5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55da9480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.06992915401540283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06992915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492460>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90469440; to 'JaxprTracer' at 0x7ffb904685e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c2ac1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.09995101535658842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09995102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9850>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8b48b0; to 'JaxprTracer' at 0x7ff70e8b4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3575c710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05667816043035309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05667816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3280>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704b8f40; to 'JaxprTracer' at 0x7ffc1013b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34bee760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07724160687881026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07724161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770fc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382daca0; to 'JaxprTracer' at 0x7ffb382d83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b39200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11090195567386119, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11090196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650360>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab029f600; to 'JaxprTracer' at 0x7ffc707c0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a4a6040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0832344814601149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08323448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101241e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10294720; to 'JaxprTracer' at 0x7ffc10294e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x751163a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.09413873030977155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09413873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236a50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a31f0; to 'JaxprTracer' at 0x7ffc582a3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f684290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.06848713577833193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06848714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8120>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07ebba0; to 'JaxprTracer' at 0x7ff9f07ea700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856a1700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0657897180675904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06578972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3130>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715edf4c0; to 'JaxprTracer' at 0x7ff9f071ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a86c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07852081869865053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07852082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104b80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0693010; to 'JaxprTracer' at 0x7ffbb0693150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0380300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.9676057242790117
14, epoch_train_loss=3.9676057242790117
Epoch 15
Epoch 15 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16867180928014067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16867181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cffdc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153f60; to 'JaxprTracer' at 0x7ffa50153100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x519a3b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0690806108280805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06908061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7610>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0788a40; to 'JaxprTracer' at 0x7ff9f078b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7433beb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.033389157538729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03338916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086533a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d040cf90; to 'JaxprTracer' at 0x7ff9d040e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f4b65c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05018850427808805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0501885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbf10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed23380; to 'JaxprTracer' at 0x7ff70ed21d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x755e4810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.08012098308910164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08012098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900459e0; to 'JaxprTracer' at 0x7ffa90047600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8187b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.23070873067839442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23070873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4aa0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03cda80; to 'JaxprTracer' at 0x7ff9f03cc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x487e1f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.13423231137407204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13423231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02866f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a29e7ab0; to 'JaxprTracer' at 0x7ff7a29e7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64040f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.19580088660221454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19580089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07064d0; to 'JaxprTracer' at 0x7ff9f07058a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17a5dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06527170174481045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0652717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124590>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001d46d0; to 'JaxprTracer' at 0x7ffb001d5f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5c03a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.08265461880174808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08265462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028ab40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166cbce0; to 'JaxprTracer' at 0x7ff7166c8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d4ea170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.07706190153882753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0770619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca8d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0588e50; to 'JaxprTracer' at 0x7ff9f0589440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2358b4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.07758589774201868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0775859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5d80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ccf40; to 'JaxprTracer' at 0x7ffbd071bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x675c2300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.08615235927917253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08615236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086520b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02be7f0; to 'JaxprTracer' at 0x7ffbb02bcd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d76d350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2341760046650807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.234176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba440>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012d440; to 'JaxprTracer' at 0x7ff9f012eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8199b870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.10063003977354479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10063004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5960>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90200ea0; to 'JaxprTracer' at 0x7ff7142af470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e0c2240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.08892751281228385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08892751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d68a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064f6f0; to 'JaxprTracer' at 0x7ffcb064d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e0922f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.07348670814772124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07348671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907489f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072ee80; to 'JaxprTracer' at 0x7ffa5072f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9791b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.08152727722746596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08152728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032f310>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30103470; to 'JaxprTracer' at 0x7ffb081758f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x895ddbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.18479072320355072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18479072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fc10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2eaa2a0; to 'JaxprTracer' at 0x7ff7a2eab150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa036a180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05877465180852359, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05877465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473eb30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423f150; to 'JaxprTracer' at 0x7ffa3423fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bf0f880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10904953278767023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10904953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278150>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70682ac0; to 'JaxprTracer' at 0x7ffc70683650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9848adc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.21170585878917486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21170586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0ee70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570df30; to 'JaxprTracer' at 0x7ffbf04bcfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x984ab5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12355745829542579, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12355746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0490>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8b6930; to 'JaxprTracer' at 0x7ff70e8b4f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65558870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.15772421602602443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15772422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014bc60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a57b0; to 'JaxprTracer' at 0x7ffcb07a41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x750e2680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.07477914176395703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07477914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054980>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90623ab0; to 'JaxprTracer' at 0x7ffc90623470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75f6e2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.07211802222462416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07211802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a200>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd021ff60; to 'JaxprTracer' at 0x7ffc582a3fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c937110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10773621598210988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10773622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f77c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00444bd0; to 'JaxprTracer' at 0x7ffb00444a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ec91c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7354776541702375
15, epoch_train_loss=3.7354776541702375
Epoch 16
Epoch 16 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5039792030312409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5039792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858baf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0201b20; to 'JaxprTracer' at 0x7ffcb0201ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62856750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08747582948018873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08747583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a860>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304daa70; to 'JaxprTracer' at 0x7ffc304d8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d710180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03640073528143938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03640074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f1e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1010c130; to 'JaxprTracer' at 0x7ffc1010c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48e026b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05397353980319743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05397354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026bf40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0411bc0; to 'JaxprTracer' at 0x7ffcf04134c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26206d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10531404765416714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10531405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c2b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706b2de0; to 'JaxprTracer' at 0x7ffc706b2390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c4aafe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.45407028512534375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45407029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8150>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026f830; to 'JaxprTracer' at 0x7ffb7026e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9845e3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.240339362259399, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24033936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4660>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906d0e00; to 'JaxprTracer' at 0x7ffc906d07c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28cf4020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.37710508652408486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37710509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d66b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107c2110; to 'JaxprTracer' at 0x7ffb107c3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30da6050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.07095239094472393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07095239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105caf80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004d6020; to 'JaxprTracer' at 0x7ffb004d5530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ba78d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10156247221225012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10156247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903f80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e5de40; to 'JaxprTracer' at 0x7ff714ab9ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e8144b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09850370509943217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09850371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589f60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a39c0; to 'JaxprTracer' at 0x7ffb1077e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8972d0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09176496885062867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09176497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149b50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed49f0; to 'JaxprTracer' at 0x7ff7a2ed46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32ef4740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10873351187769154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10873351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0de70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07395d0; to 'JaxprTracer' at 0x7ffbf073a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84d95aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.45620337010707546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45620337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744840>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e0db0; to 'JaxprTracer' at 0x7ff9f07e0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25df4820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13813576086371207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13813576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065cd30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bffc90; to 'JaxprTracer' at 0x7ff715bfeac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e22ebf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11579373314466687, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11579373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687b60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147e7010; to 'JaxprTracer' at 0x7ff7147e7100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24a5b5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.08421235283783846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08421235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1ea0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062ea70; to 'JaxprTracer' at 0x7ffc3062e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x578726f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10130657662127183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10130658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6050>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05e9350; to 'JaxprTracer' at 0x7ff9d05e88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x362799c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.34474673496043323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34474673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2090>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0434810; to 'JaxprTracer' at 0x7ffcd0435df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ce66e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06517108341368545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06517108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652330>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700f7330; to 'JaxprTracer' at 0x7ffa700f7e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bc78940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.17890996693177585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17890997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287840>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90739120; to 'JaxprTracer' at 0x7ffb9073a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92962ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4036858382430861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40368584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6c20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71634a840; to 'JaxprTracer' at 0x7ff7163499e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5ba3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.19907281245640304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19907281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fb60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd18f0; to 'JaxprTracer' at 0x7ff7a2cd3a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac467e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.28403135890206743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28403136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfcfe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d75b0; to 'JaxprTracer' at 0x7ffb704d7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41e1ae30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.08401145479045884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08401145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90493280>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3053ea20; to 'JaxprTracer' at 0x7ffc3053f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b22a180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.08197197175595317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08197197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9f80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158a7060; to 'JaxprTracer' at 0x7ff7158a4b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6681a8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16251152497681057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16251152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508770>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e5db70; to 'JaxprTracer' at 0x7ffbb02ab880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9873ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.263719911026368
16, epoch_train_loss=3.263719911026368
Epoch 17
Epoch 17 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-12.780710422304587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-12.78071042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e110>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2eab0b0; to 'JaxprTracer' at 0x7ff714f086d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7684b5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-1.1871641634239265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.18716416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e3a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638e1b0; to 'JaxprTracer' at 0x7ff71638fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85c0a760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.08316778808621308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08316779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd7c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda1080; to 'JaxprTracer' at 0x7ff70eda1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f080f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-25.87493833543792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-25.87493834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235da0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71518bce0; to 'JaxprTracer' at 0x7ff71518a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3966da20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-2.9709112845019474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.97091128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d35b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e612200; to 'JaxprTracer' at 0x7ff70e612e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x414e2950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9306053943525868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93060539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4460>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e7b00; to 'JaxprTracer' at 0x7ffa700e4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37aa0570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5002721625363037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50027216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286b10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716ad3100; to 'JaxprTracer' at 0x7ff716ad1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2d36b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-4.832206464285967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-4.83220646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1077df80; to 'JaxprTracer' at 0x7ffb1077f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a11c6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-1.00701067424567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.00701067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065dc60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142dd710; to 'JaxprTracer' at 0x7ff7142deed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96df7870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3317056194056278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33170562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104a20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058afc0; to 'JaxprTracer' at 0x7ff9f058b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e09b610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1403219776352876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14032198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749f20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077d350; to 'JaxprTracer' at 0x7ffa1077fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d7e2200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5269100537366257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52691005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e4f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05394e0; to 'JaxprTracer' at 0x7ffbb0538090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7b672a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-8.603394771602163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-8.60339477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfcbe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecb4ae0; to 'JaxprTracer' at 0x7ff70ecb7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa64e8220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8129662309037629, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81296623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773230>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f65b20; to 'JaxprTracer' at 0x7ff714f64590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fc236d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7187900028056111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d38d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a31a0; to 'JaxprTracer' at 0x7ffcd07a2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x644ea3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-2.454808963080801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.45480896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9820>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05fe840; to 'JaxprTracer' at 0x7ff70eaf1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78ecf490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.22326597392162317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22326597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7300>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90101d50; to 'JaxprTracer' at 0x7ffb901011c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b3a4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-1.2459385498109004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.24593855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125050>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10405440; to 'JaxprTracer' at 0x7ffb10405940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x569832a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8809789982616048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.880979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268a50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0276890; to 'JaxprTracer' at 0x7ffa10750c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a594da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07679329321771229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07679329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473dd40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07eabb0; to 'JaxprTracer' at 0x7ff9f07eb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce51580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2776773190540214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27767732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b81d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a1ad0; to 'JaxprTracer' at 0x7ffc582a1760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83334460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8607034145462542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86070341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240630>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bff3d0; to 'JaxprTracer' at 0x7ff715bff150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977b7cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.38844814814437895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38844815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5a70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5868a2f0; to 'JaxprTracer' at 0x7ffc58689990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc71310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.564518088356277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56451809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773490>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02edf30; to 'JaxprTracer' at 0x7ffbb02ee9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82d95370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1848770902716131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18487709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3f30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f09a0; to 'JaxprTracer' at 0x7ffa902f3fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77363270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2996585827793322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29965858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027acd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703543b0; to 'JaxprTracer' at 0x7ffb703548b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c7f3ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3494784586831648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34947846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d34d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04ab880; to 'JaxprTracer' at 0x7ffbf04ab6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ae58350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 29.514200467957856
17, epoch_train_loss=29.514200467957856
Epoch 18
Epoch 18 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9352806410719103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93528064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2aa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71455d6c0; to 'JaxprTracer' at 0x7ff71455f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5caca6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.09802143688756693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09802144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e4a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021d760; to 'JaxprTracer' at 0x7ffb5021ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fba9a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04173476670957354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04173477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149e30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900dc1d0; to 'JaxprTracer' at 0x7ffa900de520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fb30ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0584628370013816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05846284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473feb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102625c0; to 'JaxprTracer' at 0x7ffc102635b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd7fec70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.12060766614648283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12060767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902683f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30512070; to 'JaxprTracer' at 0x7ffc30510130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7605c460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.553000104995931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5530001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748280>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0378e50; to 'JaxprTracer' at 0x7ffbb0379d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69111a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.2874042707791872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28740427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5830>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34560c20; to 'JaxprTracer' at 0x7ffa1077f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b629160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.46053021540235706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46053022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e884a0; to 'JaxprTracer' at 0x7ff7a2e8b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5acfa2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.08075044349599837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08075044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0960>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7163e4c70; to 'JaxprTracer' at 0x7ffb00744860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b1373e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.11529747623278867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11529748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9039c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1077c7c0; to 'JaxprTracer' at 0x7ffb1077e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x524a3780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11284819436564737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11284819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1cd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902cd670; to 'JaxprTracer' at 0x7ffc10090d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fec0990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10362873752934039, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10362874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032db20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd071c590; to 'JaxprTracer' at 0x7ffbd071e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35605850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.22737303404991208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22737303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b7a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f8540; to 'JaxprTracer' at 0x7ffc302fb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd79640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.5551651221234887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55516512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021fe60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e7650; to 'JaxprTracer' at 0x7ffb382e55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f150dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.16190135974704908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16190136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902698c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3873b510; to 'JaxprTracer' at 0x7ffb3873a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x320d6e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.13402481923869525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13402482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0076700; to 'JaxprTracer' at 0x7ff70b2f2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fe1a590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09452055472825584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09452055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193980>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100a9e90; to 'JaxprTracer' at 0x7ffc100a8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be1ee10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11511223325848911, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11511223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fcdc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e0ef70; to 'JaxprTracer' at 0x7ff7a2e0e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x841eddd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.4180670675517866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41806707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236af0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501729d0; to 'JaxprTracer' at 0x7ffa50170400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68e491e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07204579885595544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0720458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a43e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900743b0; to 'JaxprTracer' at 0x7ffa90076930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81b0dc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2120381130187859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21203811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd720>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716adab10; to 'JaxprTracer' at 0x7ffc58448220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82428660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.48979548474734785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48979548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba970>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0065440; to 'JaxprTracer' at 0x7ff9f0064090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x421d0dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.23741671465656136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23741671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0dc00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08625990; to 'JaxprTracer' at 0x7ffb107618a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9401d400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.34061491707740654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34061492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021daa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70690c70; to 'JaxprTracer' at 0x7ffb70693970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fecb150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09540190219543962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0954019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d1f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9073a570; to 'JaxprTracer' at 0x7ffb90739850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x579f47a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09236862780429443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09236863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659070>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04974c0; to 'JaxprTracer' at 0x7ffcd0496f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cfddc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1923117384908117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19231174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286610>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d84f0; to 'JaxprTracer' at 0x7ffb704d8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd9f1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 2.996713378255634
18, epoch_train_loss=2.996713378255634
Epoch 19
Epoch 19 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.27313129840961897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2731313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02783f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90253970; to 'JaxprTracer' at 0x7ffc90253bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314152f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08846455554460501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08846456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0db0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385c5d50; to 'JaxprTracer' at 0x7ffb385c76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x353edc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.042943843776529225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04294384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021cb20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea56d40; to 'JaxprTracer' at 0x7ff70ea55990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fa115c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05896563441794525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05896563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4d90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58231620; to 'JaxprTracer' at 0x7ffc58232ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3427ebe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10527152824858932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10527153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652360>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58468770; to 'JaxprTracer' at 0x7ffc5846b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x787887a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.38059332376775523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38059332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c86f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01fb830; to 'JaxprTracer' at 0x7ff9d01fb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76f18180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.21162482752491563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21162483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284c70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07acef0; to 'JaxprTracer' at 0x7ff9f07ae200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57daa930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.31816898795768717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31816899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902ce2a0; to 'JaxprTracer' at 0x7ffb902cef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6965d1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0835981800088111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08359818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8a20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10111800; to 'JaxprTracer' at 0x7ff7a29e7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x789d6de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10616507162577171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10616507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125040>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0047cc70; to 'JaxprTracer' at 0x7ffb0047ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77d0d270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10123800185514767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.101238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279210>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0865d530; to 'JaxprTracer' at 0x7ffb0865e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c0dd430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09861189860933113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0986119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3e50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107bfb50; to 'JaxprTracer' at 0x7ffb5046eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79f275b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11298206057006767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11298206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f580>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012da80; to 'JaxprTracer' at 0x7ff9f012ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x507adff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.38450269324226427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38450269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772f20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0151530; to 'JaxprTracer' at 0x7ffbf0152ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x471d4140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13906179674125438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1390618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653a20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0693970; to 'JaxprTracer' at 0x7ff714eaf240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60399670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11886182421359749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11886182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3a50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34726d40; to 'JaxprTracer' at 0x7ffa347249f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x652eb040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09247585837954546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09247586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f68e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504483b0; to 'JaxprTracer' at 0x7ffa5044bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35db5430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1053624459072215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10536245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f030>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10796840; to 'JaxprTracer' at 0x7ffc304d93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b5f400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2970206004226794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2970206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb490>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021e840; to 'JaxprTracer' at 0x7ffb5021fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x858d69d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0735190860820335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07351909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f5e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0557420; to 'JaxprTracer' at 0x7ffab05577e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43fc4760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.16472723900674477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16472724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242710>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341f80e0; to 'JaxprTracer' at 0x7ffa341f9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3019ea70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.3434824628741344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34348246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588dc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100aaa70; to 'JaxprTracer' at 0x7ffc100a92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9244c100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.18461925530000167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18461926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b99f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034d990; to 'JaxprTracer' at 0x7ff9d064f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b49e9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.24726503645291198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24726504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1c70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34236610; to 'JaxprTracer' at 0x7ffa34235bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x482ff070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09571969255314136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09571969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f59d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08624f90; to 'JaxprTracer' at 0x7ffb08627d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a6be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0912833506630469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09128335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc0a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5019c900; to 'JaxprTracer' at 0x7ffbd00a4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f286d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15636342992401822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15636343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e2a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02c9940; to 'JaxprTracer' at 0x7ffbf02ca2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aae6150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.408078240642669
19, epoch_train_loss=3.408078240642669
Epoch 20
Epoch 20 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.178523878274623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17852388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506585b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0110450; to 'JaxprTracer' at 0x7ffbb01133d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c2ca80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08129484990115003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08129485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013fa60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90164bd0; to 'JaxprTracer' at 0x7ffb90167f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3e2d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04431009949561702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0443101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4810>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f06128e0; to 'JaxprTracer' at 0x7ff9f0612ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36682b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05979694546334463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05979695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771610>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300acae0; to 'JaxprTracer' at 0x7ffc300ad3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f8d4720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.09362365213333546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09362365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a3b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10262570; to 'JaxprTracer' at 0x7ffc102636f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9eade510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.2380610752179521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23806108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268fc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387a0450; to 'JaxprTracer' at 0x7ffb387a1f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45855a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.14915834930877336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14915835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02867c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10680540; to 'JaxprTracer' at 0x7ffc10682ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd37e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2033478467305323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20334785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00835b0; to 'JaxprTracer' at 0x7ffbf00815d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dbf4cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0863700587689941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08637006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c83b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70401080; to 'JaxprTracer' at 0x7ffa70401ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f5fb910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.09976282056902912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09976282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903740>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0820f920; to 'JaxprTracer' at 0x7ffb0820fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x660d3ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09280997842331842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09280998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065ac10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902cc0e0; to 'JaxprTracer' at 0x7ffb902cf8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b35300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09542671087717977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09542671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d7f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011c130; to 'JaxprTracer' at 0x7ffbf011f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56869410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10441889284243176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10441889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5170>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00441120; to 'JaxprTracer' at 0x7ffb00443330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35e7c9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.24345404320612285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24345404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d790>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7025c4f0; to 'JaxprTracer' at 0x7ffc7025d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e8eac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.12129059754505826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1212906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149c80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828f470; to 'JaxprTracer' at 0x7ffb3828c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666a0320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10746488270491801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10746488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb560>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2f0d60; to 'JaxprTracer' at 0x7ff70b2f3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50aa81e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09159424822826218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09159425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748540>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0451df0; to 'JaxprTracer' at 0x7ffcf0451530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65d6d660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0982748840800778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09827488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6680>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078b2e0; to 'JaxprTracer' at 0x7ff9f0788180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66bd8fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.19707405887367327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19707406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2ef0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e45e0; to 'JaxprTracer' at 0x7ffb1060f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602b41d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07524087660902178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07524088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653560>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50193290; to 'JaxprTracer' at 0x7ffa501929d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d0c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.12596523853752584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12596524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a72c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a0860; to 'JaxprTracer' at 0x7ffc582a34c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c91d990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.22267107908676784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22267108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848da80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700de4d0; to 'JaxprTracer' at 0x7ffa700de020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x785dcea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.14141372070552774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14141372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2060>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021d580; to 'JaxprTracer' at 0x7ffcb062a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ddedc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17040604839736512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17040605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba8f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0705bc0; to 'JaxprTracer' at 0x7ff9f0704540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3603d520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09666636139764703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09666636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057a30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034d210; to 'JaxprTracer' at 0x7ffa7034f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884a21a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0911854583415918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09118546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279150>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105227a0; to 'JaxprTracer' at 0x7ffa10523c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b49a9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12709652661360066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12709653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0cb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8338d0; to 'JaxprTracer' at 0x7ff70e833740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x615ec4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.666854217295701
20, epoch_train_loss=3.666854217295701
Epoch 21
Epoch 21 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.018885218176025755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01888522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906857b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02abe20; to 'JaxprTracer' at 0x7ffc100a9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80d59650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(0.6893390857696958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.68933909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8c90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902518a0; to 'JaxprTracer' at 0x7ffc90250a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x272a5210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.016475443014233704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01647544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e8c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904155d0; to 'JaxprTracer' at 0x7ffc90417880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46ee23c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(18.13692573726377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(18.13692574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502377c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0812f6a0; to 'JaxprTracer' at 0x7ffb0812d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ef24840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(1.9294690363307911, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.92946904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c83b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50484270; to 'JaxprTracer' at 0x7ffa504868e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dac9d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01778552630079161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01778553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca960>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c8bd0; to 'JaxprTracer' at 0x7ff9d01cb7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x800ad4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.009898813113557503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00989881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014aab0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016e980; to 'JaxprTracer' at 0x7ffc1016d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40fb7ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.3949417847619773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.39494178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b290>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716ad0ea0; to 'JaxprTracer' at 0x7ff716ad1800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4678b450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(0.5722347052038329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.57223471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032eb70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7044fe70; to 'JaxprTracer' at 0x7ffc7044c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56517cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.04912300102531972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.049123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ea80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e5e200; to 'JaxprTracer' at 0x7ffc907a1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73adbd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.07511885047717906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07511885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906852a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00a6980; to 'JaxprTracer' at 0x7ffbd00a4e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b967b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.1843173423550888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.18431734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156badb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107be110; to 'JaxprTracer' at 0x7ff7153ee750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x276b98e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(0.2798694750633235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.27986948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848c3d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0692c00; to 'JaxprTracer' at 0x7ffbb06931f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c684ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.10027304182046398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10027304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fe1a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706b1440; to 'JaxprTracer' at 0x7ffc706b3330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b79fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.2806816277381981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.28068163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8830>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02ae610; to 'JaxprTracer' at 0x7ffcd02ae750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c2ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(1.547575043071078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.54757504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02879d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0610720; to 'JaxprTracer' at 0x7ff9f0610220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bce8270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.004742990068369353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00474299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfed50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a50040; to 'JaxprTracer' at 0x7ff714a52c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c7edf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(0.48382267661179823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.48382268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770f20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009c810; to 'JaxprTracer' at 0x7ffcf009d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2e243e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.09537497949908424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.09537498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6c80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7016d990; to 'JaxprTracer' at 0x7ffa7016d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c377820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07591244155846162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07591244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252450>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e0fc90; to 'JaxprTracer' at 0x7ff7a2e0dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fa1efd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.088211401738929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0882114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c8a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059b600; to 'JaxprTracer' at 0x7ffb1059bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x455fdb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.005727998272383635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.005728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7038a930; to 'JaxprTracer' at 0x7ffa70389df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5523cff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.046108417679085266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04610842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086521c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5068e5c0; to 'JaxprTracer' at 0x7ffa5068e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c8b7a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.037805272773628135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03780527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288ba0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05365c0; to 'JaxprTracer' at 0x7ffab0534b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89d1bd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0327102876554533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03271029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102409d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0434400; to 'JaxprTracer' at 0x7ff9d0436ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a2fd7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.05673041465021184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.05673041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc660>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd071a390; to 'JaxprTracer' at 0x7ffbd071a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93363e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02494810471788186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3420>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed00db0; to 'JaxprTracer' at 0x7ff70ed00ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74b69a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 19.450775559796263
21, epoch_train_loss=19.450775559796263
Epoch 22
Epoch 22 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0844963845722232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08449638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb074a430; to 'JaxprTracer' at 0x7ffcb074bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c105100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07453814685233846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07453815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286d00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168befc0; to 'JaxprTracer' at 0x7ff7168bc270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x137f1a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04671678991009839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04671679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a060>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90477bf0; to 'JaxprTracer' at 0x7ffc904758f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771e0290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06192126843363907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06192127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659bd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902976a0; to 'JaxprTracer' at 0x7ffc90294d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x419727b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.08285828023289794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08285828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02505e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa103140e0; to 'JaxprTracer' at 0x7ffa10317ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d9fd220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.09775664403958867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09775664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e120>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e325c0; to 'JaxprTracer' at 0x7ffc585d2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aea4480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.08684394496634958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08684394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8c20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10739b70; to 'JaxprTracer' at 0x7ffc1073b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2df58b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0899967335641731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08999673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9310>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00a4400; to 'JaxprTracer' at 0x7ffbd00a7920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7726a1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09113530801416689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09113531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca5e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004712b0; to 'JaxprTracer' at 0x7ffb00473c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x521d0780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0951880816245827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09518808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903ee0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab022cea0; to 'JaxprTracer' at 0x7ffab022c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf06e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.08603369607933938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0860337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749da0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902ce5c0; to 'JaxprTracer' at 0x7ffb902ce250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ed3450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09437947062773853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09437947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284590>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e11c0; to 'JaxprTracer' at 0x7ff9f07e0b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41afb170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.09729202827041748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09729203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028be40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ca98f0; to 'JaxprTracer' at 0x7ff7a2ca9ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51458e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.10446581446968338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10446581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687540>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f6d40; to 'JaxprTracer' at 0x7ffb382e5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95bf3ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.10471663301371452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10471663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251820>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078e6b0; to 'JaxprTracer' at 0x7ffa1078ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47189590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.09723301151104101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09723301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032fd70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f076a7f0; to 'JaxprTracer' at 0x7ff9f0769d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x986ea490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09302211788043677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09302212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268d00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072dbc0; to 'JaxprTracer' at 0x7ffa9072c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b05020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09283381567108036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09283382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285fb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148622f0; to 'JaxprTracer' at 0x7ff714861530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ed928e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.09917710758214938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09917711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235d60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a4b30; to 'JaxprTracer' at 0x7ffa907a60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62522e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07885275109756389, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07885275, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653dd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715899710; to 'JaxprTracer' at 0x7ff715898180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35217210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.08693751191268943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08693751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848c1f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071a890; to 'JaxprTracer' at 0x7ffcf0451fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f6c5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.10363052986860474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10363053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f8a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed7b00; to 'JaxprTracer' at 0x7ff7a2ed5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b071dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0999257050632717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09992571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190050>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70734f40; to 'JaxprTracer' at 0x7ffb70736480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64596080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.0943878085729832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09438781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050b830>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059bb00; to 'JaxprTracer' at 0x7ffb105998f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x746d9e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0997500886344939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09975009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd240>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855f1f0; to 'JaxprTracer' at 0x7ffb3855dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x925b69a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09321881347785184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09321881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e59c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71455d490; to 'JaxprTracer' at 0x7ff71455eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99f5fb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.09939234922516703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09939235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a460>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cadb70; to 'JaxprTracer' at 0x7ff7a2cadfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a8e0a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.9278992293404063
22, epoch_train_loss=3.9278992293404063
Epoch 23
Epoch 23 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(6.419031706254252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(6.41903171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfcec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b1620; to 'JaxprTracer' at 0x7ffbd00b0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf7affe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(2.001729072687653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(2.00172907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8c60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703413f0; to 'JaxprTracer' at 0x7ffb703421b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c39f1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.032100618612314925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03210062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b85e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715118720; to 'JaxprTracer' at 0x7ff715119440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23283370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(49.41473766180265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(49.41473766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745760>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed40bd0; to 'JaxprTracer' at 0x7ff70ed43ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f4a8230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(5.6233965103765815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(5.62339651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236c70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71591c1d0; to 'JaxprTracer' at 0x7ff71591f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15f70a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.6810902823477266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.68109028, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279600>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344e22f0; to 'JaxprTracer' at 0x7ffa344e1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa17f4f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.23626962330289142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.23626962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032fdf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f9f30; to 'JaxprTracer' at 0x7ffc302fbbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d1a4530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(5.307972656418649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(5.30797266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032ea90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035e7f0; to 'JaxprTracer' at 0x7ff9f035fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4665a620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(1.6931033664410393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.69310337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491300>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904af830; to 'JaxprTracer' at 0x7ffb904ac310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ba78f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.29987000981023026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.29987001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770840>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10760db0; to 'JaxprTracer' at 0x7ffb10760cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f7114b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(0.040578984354409174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.04057898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff950>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34560180; to 'JaxprTracer' at 0x7ffa34562e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b61ec50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.6805952626479811, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.68059526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb910>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b53a0; to 'JaxprTracer' at 0x7ffbd02b73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bdefdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(6.310572388060885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(6.31057239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8e00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142ad800; to 'JaxprTracer' at 0x7ff7142adbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70261f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.1893525722124061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.18935257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057d10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00cef0; to 'JaxprTracer' at 0x7ff70f00fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x888c5170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.9325578584816775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.93255786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237ac0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346ceac0; to 'JaxprTracer' at 0x7ffa346cf510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3539e940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(4.336138188050472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(4.33613819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edab50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7790; to 'JaxprTracer' at 0x7ffc902b7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78591040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.14725895084887047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.14725895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b7e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70354720; to 'JaxprTracer' at 0x7ffb703558f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b180d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(1.6664274425722987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.66642744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02528c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703cfbf0; to 'JaxprTracer' at 0x7ffa703ccc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0829e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.7155207171763147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.71552072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd2e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10139850; to 'JaxprTracer' at 0x7ffc1013a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73aecf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06254090699874063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06254091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301928d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105238d0; to 'JaxprTracer' at 0x7ffa10522fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39423dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.021689750628401037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02168975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028be40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a78d60; to 'JaxprTracer' at 0x7ff714a78720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85f29da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.4482520865689899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.44825209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748a60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30325350; to 'JaxprTracer' at 0x7ffc30325260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37accaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.12735155375868648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.12735155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086528e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570fec0; to 'JaxprTracer' at 0x7ff71570ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5791f8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.21714089263106143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.21714089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0540a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071a520; to 'JaxprTracer' at 0x7ffc107199e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66435ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.06755292777239431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.06755293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105450>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10598db0; to 'JaxprTracer' at 0x7ffa105994e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6924f460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.29806168953837453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.29806169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242df0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9011a430; to 'JaxprTracer' at 0x7ffa9011ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93b30090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.15491877353399366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.15491877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c90c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385839c0; to 'JaxprTracer' at 0x7ffb38583830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x446a9960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 52.33664338879169
23, epoch_train_loss=52.33664338879169
Epoch 24
Epoch 24 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.08751938051644859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08751938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026ae80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0771210; to 'JaxprTracer' at 0x7ffbd0114590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48306c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07676117675874486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07676118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f38a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90290fe0; to 'JaxprTracer' at 0x7ffb90291f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dd4a250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04832217325948526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04832217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287c10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb031fb50; to 'JaxprTracer' at 0x7ff714838270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa559d610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06341697686180302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06341698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193750>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b5580; to 'JaxprTracer' at 0x7ffcf04501d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bba0a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0868855805367877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08688558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659790>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b307510; to 'JaxprTracer' at 0x7ff70b307e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bcdd7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10140744094473045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10140744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e530>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb053aca0; to 'JaxprTracer' at 0x7ffbb0539440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a9054f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.08989885139716089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08989885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbfa0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb103509a0; to 'JaxprTracer' at 0x7ffb10351f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de48e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09331329959491223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0933133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9320>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0064630; to 'JaxprTracer' at 0x7ff9f0064680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cbec5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09365226626854685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09365227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745e20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70130220; to 'JaxprTracer' at 0x7ffa70132de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ed7b3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.09947972532126284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09947973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9033f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1056d990; to 'JaxprTracer' at 0x7ffa1056cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x623e7720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.08915678524083337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08915679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b3e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50656ca0; to 'JaxprTracer' at 0x7ffa50654d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa117fd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09788368574796366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09788369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f34c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900477e0; to 'JaxprTracer' at 0x7ffa90047420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ce8a290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10128895612670628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10128896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286c00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71594cb30; to 'JaxprTracer' at 0x7ff71594c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e1c7c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.10809780409965777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1080978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d4f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50742f20; to 'JaxprTracer' at 0x7ffb50741670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0d8c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.10934937218399812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10934937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659360>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7156992b0; to 'JaxprTracer' at 0x7ff71591cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73474c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10190160442400079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1019016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02508d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ea8220; to 'JaxprTracer' at 0x7ff7a2eabd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20afdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09606132671845712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09606133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027ab80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7024b100; to 'JaxprTracer' at 0x7ffc7024ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d98af10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09643158737363546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09643159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2d20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701088b0; to 'JaxprTracer' at 0x7ffb70109e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b4f8030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1024537752002806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10245378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9410>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012e570; to 'JaxprTracer' at 0x7ff715661cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b46c1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08094398957023662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08094399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508750>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea9ad90; to 'JaxprTracer' at 0x7ff70ea99bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ed0cd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09042014557367037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09042015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687f90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a1fd0; to 'JaxprTracer' at 0x7ffcd07a3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78ea4c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1073212682264096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10732127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bab80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50150fe0; to 'JaxprTracer' at 0x7ffa50150cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61cff380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10318967768682545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10318968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4770>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715485850; to 'JaxprTracer' at 0x7ff715486070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f2915b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.09765351224116882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09765351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cca0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03e5850; to 'JaxprTracer' at 0x7ffcb03e60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67b452b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10252027467899733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10252027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0573d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71589b5b0; to 'JaxprTracer' at 0x7ff715899b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x379681d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09599020268675564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0959902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e820>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071a3e0; to 'JaxprTracer' at 0x7ffc10719760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82810ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10252345612603107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10252346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652af0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306fcdb0; to 'JaxprTracer' at 0x7ffc306fd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23616da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.911683380942252
24, epoch_train_loss=3.911683380942252
Epoch 25
Epoch 25 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.08897486897471506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08897487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901481d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703cce00; to 'JaxprTracer' at 0x7ffa703cda80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ca655c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07795706992289951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07795707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287680>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034ec00; to 'JaxprTracer' at 0x7ffb504a3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c12d1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04893951013165067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04893951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3510>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304dbc90; to 'JaxprTracer' at 0x7ffc304da610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88718c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06415333132895702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06415333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd4f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a7e5c0; to 'JaxprTracer' at 0x7ff7a2a7e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57502670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.08881876629818695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08881877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c0f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05fbba0; to 'JaxprTracer' at 0x7ff9d05fb510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9526c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10276075633228787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10276076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502341b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716627ce0; to 'JaxprTracer' at 0x7ff716625620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88d0f600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09129495983137016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09129496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cac80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04bf290; to 'JaxprTracer' at 0x7ffcb07a55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bacc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09476381608266761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09476382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c98c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019f5b0; to 'JaxprTracer' at 0x7ffcf019e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a42e0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09469604493597705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09469604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492ed0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc0180; to 'JaxprTracer' at 0x7ff70efc39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3160f8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10186835195724642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10186835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cbe70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584489a0; to 'JaxprTracer' at 0x7ffb004d6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fb4570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09035884455007591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09035884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901498f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042d5d0; to 'JaxprTracer' at 0x7ffc7042e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f76c110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09977772375976218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09977772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287f60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0378f40; to 'JaxprTracer' at 0x7ffbb037a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x272dad00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10325129315848448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10325129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c28d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58657560; to 'JaxprTracer' at 0x7ff71610ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2b8c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.10952304285389303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10952304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f410>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0758a90; to 'JaxprTracer' at 0x7ff9f075ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4bf0450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11124766013211075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11124766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d7e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71634a750; to 'JaxprTracer' at 0x7ff71634ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ecea10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10414334414601238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10414334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745e60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504490d0; to 'JaxprTracer' at 0x7ffa5044ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58202030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09760641385466305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09760641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8910>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bfc7c0; to 'JaxprTracer' at 0x7ff715bfc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x889e9a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09831341145285621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09831341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251f60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0112ca0; to 'JaxprTracer' at 0x7ffbb0111940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fd64270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10373211412693928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10373211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd650>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b4540; to 'JaxprTracer' at 0x7ffc584b52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c143690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08187481898815319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08187482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192600>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016c450; to 'JaxprTracer' at 0x7ffc1016dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1b1a7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09200823996243944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09200824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a76d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71519e390; to 'JaxprTracer' at 0x7ff71519ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3942f480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.10878599163461887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10878599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285cb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026e5c0; to 'JaxprTracer' at 0x7ffcb026d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x322c3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10458173346323063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10458173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b86d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0276fc0; to 'JaxprTracer' at 0x7ffcd02761b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55f538d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.09905314174771601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09905314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e950>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34560900; to 'JaxprTracer' at 0x7ffa34562930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0affb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1037365283435094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10373653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d38b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059a200; to 'JaxprTracer' at 0x7ffb10599ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x151ac890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09727767749346808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09727768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dedd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb101117b0; to 'JaxprTracer' at 0x7ffb10110f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e507cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1038387578926102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10383876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268560>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ea3e0; to 'JaxprTracer' at 0x7ffbb02ea250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66964390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.9044458955825214
25, epoch_train_loss=3.9044458955825214
Epoch 26
Epoch 26 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09088936623423213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09088937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7910>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715c286d0; to 'JaxprTracer' at 0x7ffc585d3290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x775b2770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07999342414467873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07999342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124c00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009d4e0; to 'JaxprTracer' at 0x7ffcf007a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc0e9920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04967266506394706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04967267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287830>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714c67b50; to 'JaxprTracer' at 0x7ff714c65ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x257a93b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06508699098187967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06508699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fea60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300acc20; to 'JaxprTracer' at 0x7ffc300ac6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405ba6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.09151032346293672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09151032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251f90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00c86d0; to 'JaxprTracer' at 0x7ff9f00c8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x530776e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10501076141080087, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10501076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6c70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05f6c50; to 'JaxprTracer' at 0x7ff9f05f4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43fa1160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0931826664035046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09318267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021cb80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eaf3330; to 'JaxprTracer' at 0x7ff70eaf2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ec67580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09711629893717252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0971163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021db40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900771a0; to 'JaxprTracer' at 0x7ffa90077bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c911630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09614545871580409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09614546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473de90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582d5e40; to 'JaxprTracer' at 0x7ffb004d68e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x333bc680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10489887249450218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10489887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9037f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704c4180; to 'JaxprTracer' at 0x7ffc704c4400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x428df500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09192074688318322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09192075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4370>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a787c0; to 'JaxprTracer' at 0x7ff714a7a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d756fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10235890259696857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1023589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126340>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e66b8d0; to 'JaxprTracer' at 0x7ff70e669cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc06160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10574217708119786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10574218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287b90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a6a5c0; to 'JaxprTracer' at 0x7ff7a2a6a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c94dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11186137084157852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11186137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240c50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01844a0; to 'JaxprTracer' at 0x7ff9d0185e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67f50c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11356692180542653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11356692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904900f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053d940; to 'JaxprTracer' at 0x7ff9d05fa610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1f0d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10677411517646951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10677412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4790>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074d850; to 'JaxprTracer' at 0x7ffbd074dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a5c7730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09991843132328673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09991843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb660>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7071b970; to 'JaxprTracer' at 0x7ffb70719210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa404d740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10090882957457234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10090883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfe8d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700abab0; to 'JaxprTracer' at 0x7ffb700ab060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bae3d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10579484537436501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10579485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3600>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01dbc90; to 'JaxprTracer' at 0x7ffa342a4d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa03a2730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08313258484782034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08313258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8140>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584e6b10; to 'JaxprTracer' at 0x7ffc584e44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fcde5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09401111327003606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09401111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056d10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab054a2a0; to 'JaxprTracer' at 0x7ffab054b9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe908a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11110863933035772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11110864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588360>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a1b20; to 'JaxprTracer' at 0x7ffc582a10d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67cc09f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10653763090919922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10653763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192830>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1adc60; to 'JaxprTracer' at 0x7ff70c1ad580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ae66f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10132288855410565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10132289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f60c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08463470; to 'JaxprTracer' at 0x7ffb08463330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d323cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10552523235014649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10552523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01073e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01cb6a0; to 'JaxprTracer' at 0x7ffcd0274c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1c9130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09924550666781663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09924551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02853c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0347d80; to 'JaxprTracer' at 0x7ffbb0344950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73dae310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10572016335776774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10572016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5390>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f02c540; to 'JaxprTracer' at 0x7ff70f02c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ebf1610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.894090905189677
26, epoch_train_loss=3.894090905189677
Epoch 27
Epoch 27 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09302348367778426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09302348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653af0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8a8c70; to 'JaxprTracer' at 0x7ff70e8ab150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16f01990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08245598839319968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08245599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d36d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504a2c50; to 'JaxprTracer' at 0x7ffb504a0f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d936d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05049832390594353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05049832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1780>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10753420; to 'JaxprTracer' at 0x7ffa10753880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17935710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06605778753476967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06605779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f52f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10168bd0; to 'JaxprTracer' at 0x7ffc10168c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x397e04a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0946345081177104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09463451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a2b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382d8bd0; to 'JaxprTracer' at 0x7ffb382d90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e424840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10763244130107229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10763244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1170>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e47c0; to 'JaxprTracer' at 0x7ffa700e44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30580330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0953555375523455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09535554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a360>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019c9f0; to 'JaxprTracer' at 0x7ffcf019f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fff88b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09991812915671316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09991813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07dfe70; to 'JaxprTracer' at 0x7ffcb07dce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99f24e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09786860714166663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09786861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235290>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e5c6d0; to 'JaxprTracer' at 0x7ff7a2e5ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59d3dfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10818708405755502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10818708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b550>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d1a80; to 'JaxprTracer' at 0x7ffbb00d2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x348a9680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09366707460107938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09366707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653270>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08176930; to 'JaxprTracer' at 0x7ffb08176b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93bbde30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10522866522724142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10522867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1d80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f7880; to 'JaxprTracer' at 0x7ffc306f7330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1b80f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1085745524660963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10857455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1dc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00fce0; to 'JaxprTracer' at 0x7ff70f00f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bb81c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11456486157076999, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11456486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193470>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dc680; to 'JaxprTracer' at 0x7ffb506decf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba06610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11616060995319545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11616061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b1f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064e610; to 'JaxprTracer' at 0x7ffcb064cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab65a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10947000048804975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9640>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ae840; to 'JaxprTracer' at 0x7ffc300af4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44491700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1026244689796363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10262447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f0b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716ada160; to 'JaxprTracer' at 0x7ff716adb060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e206b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10387765819918375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10387766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e820>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0788720; to 'JaxprTracer' at 0x7ff7158bd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x513b3ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10817499255908174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10817499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4d70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009e2f0; to 'JaxprTracer' at 0x7ffb9009ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa312ed70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08455814226287121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08455814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca840>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0202070; to 'JaxprTracer' at 0x7ffcd0201120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x699f6ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0962344572966795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09623446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491f60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03e4360; to 'JaxprTracer' at 0x7ff9f03e5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86b5f390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11383460450744398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1138346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fc8b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704baed0; to 'JaxprTracer' at 0x7ffb704bb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86b91240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10881277780592469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10881278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107130>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342a67a0; to 'JaxprTracer' at 0x7ffa342a7d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674d5da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10402121581639634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10402122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191880>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067fec0; to 'JaxprTracer' at 0x7ff9d067e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3554aff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10771987515182659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10771988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0070bc40; to 'JaxprTracer' at 0x7ffb007088b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9230b340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.10164723923288033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10164724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d51d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3587c0; to 'JaxprTracer' at 0x7ff70b35b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f6c7cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10794007215400106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10794007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101259e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50278fe0; to 'JaxprTracer' at 0x7ffb50278e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x780cd770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8822148538270493
27, epoch_train_loss=3.8822148538270493
Epoch 28
Epoch 28 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09541261096950478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09541261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253710>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0410e50; to 'JaxprTracer' at 0x7ffcd04118a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43fd2900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08524165044076348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08524165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d0c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570c770; to 'JaxprTracer' at 0x7ff71570cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1849760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.051368400596002145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0513684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd9c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0331210; to 'JaxprTracer' at 0x7ffbf0330a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23400e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0672745726307347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06727457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5fd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a1a30; to 'JaxprTracer' at 0x7ffcf03a17b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7427a820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.09807777222399183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09807777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d2b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70673830; to 'JaxprTracer' at 0x7ffa70671620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f727f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11040925063011499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11040925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9640>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b307a10; to 'JaxprTracer' at 0x7ff70b304180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41e7fc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09778515277837442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09778515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055830>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02106d0; to 'JaxprTracer' at 0x7ffab0210bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f67fea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10280657882466077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10280658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d4c70; to 'JaxprTracer' at 0x7ffb704d4cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b172570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0998254060837072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09982541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5b50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90077510; to 'JaxprTracer' at 0x7ffa900743b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87e6baa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1114495764174741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11144958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903da0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0628400; to 'JaxprTracer' at 0x7ffcb0629bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34bcc4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09571157174647868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09571157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251f00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07de2a0; to 'JaxprTracer' at 0x7ffcb07dd4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x656b7000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10828901714953666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10828902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fa20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a798f0; to 'JaxprTracer' at 0x7ffcf03322a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x985322a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1116326544956735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11163265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd180>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347630b0; to 'JaxprTracer' at 0x7ffa34762e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x962d9430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11744735177637669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11744735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cb560>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107efe70; to 'JaxprTracer' at 0x7ffa107ef010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73541ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11876723667462753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11876724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502377b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061db70; to 'JaxprTracer' at 0x7ffc7061ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x836b560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11223443689598538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11223444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb9e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70098f40; to 'JaxprTracer' at 0x7ffab0277510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35bdb880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.10552489812544506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1055249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8580>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0434810; to 'JaxprTracer' at 0x7ffcd0437380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84f20240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10713079878767434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1071308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243160>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38738c70; to 'JaxprTracer' at 0x7ffb38738630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59458430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11073020543865109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11073021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01058c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700acea0; to 'JaxprTracer' at 0x7ffa700ae840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c63d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08625940158220856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0862594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0670>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea9b060; to 'JaxprTracer' at 0x7ff70ea9bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64ac3a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09862913029903932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09862913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d1a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148152b0; to 'JaxprTracer' at 0x7ff714816660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa68200d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11674082866029226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11674083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652790>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dc090; to 'JaxprTracer' at 0x7ffb506de1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x334461d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.111345017951542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11134502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca5b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7010b7e0; to 'JaxprTracer' at 0x7ffc906431f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1ba0000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10685499238647558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10685499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cb590>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715c2a430; to 'JaxprTracer' at 0x7ff715c29b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6548df00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11014865114805376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11014865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032dc30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58230270; to 'JaxprTracer' at 0x7ffc58230b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ea938f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.10433588742607415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10433589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d01c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd5490; to 'JaxprTracer' at 0x7ffb08462b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7736db70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11036968198071787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11036968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658100>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90742d90; to 'JaxprTracer' at 0x7ffb90742ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e759860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8694564564353016
28, epoch_train_loss=3.8694564564353016
Epoch 29
Epoch 29 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09797541374818976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09797541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7e70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34792430; to 'JaxprTracer' at 0x7ffa34791030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfc5a6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08842682743459238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08842683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191240>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160e0ea0; to 'JaxprTracer' at 0x7ff7160e1580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40393940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05225811049317667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05225811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2660>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b4720; to 'JaxprTracer' at 0x7ffc906b7790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fd0e230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06862484746141433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06862485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f35e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107c33d0; to 'JaxprTracer' at 0x7ffa107c1120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d999440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1013879694872368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10138797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5a90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34506980; to 'JaxprTracer' at 0x7ffc90702160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28cbdea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1133257223707306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11332572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287830>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00441440; to 'JaxprTracer' at 0x7ffb00443c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fbb5130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10022742346980378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10022742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9930>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e880090; to 'JaxprTracer' at 0x7ff70e8818a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f618f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10572788460502903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10572788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9b90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a7830; to 'JaxprTracer' at 0x7ffcb07a6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x319b2a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10185787007090796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10185787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251170>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904afce0; to 'JaxprTracer' at 0x7ffb904af8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x683c4080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1146630260470761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11466303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a5a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906d1f80; to 'JaxprTracer' at 0x7ffc906d2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa40595a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09780928144996051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09780928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6a30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0276e80; to 'JaxprTracer' at 0x7ffcd0275c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4993e9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11137030483142678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1113703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192800>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecb5fd0; to 'JaxprTracer' at 0x7ff9f05f6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d0a0950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11468278856374599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11468279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1b50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f66890; to 'JaxprTracer' at 0x7ff714f65210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99092560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12050745280696719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12050745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848ef20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda2160; to 'JaxprTracer' at 0x7ff70eda31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33c60e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.12146242802033702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12146243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686f30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50449440; to 'JaxprTracer' at 0x7ffa5044a6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37e7b6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11506860849579319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11506861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588270>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34701710; to 'JaxprTracer' at 0x7ffa347009f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0fa29c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.10836109717200504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1083611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1fb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704c5f30; to 'JaxprTracer' at 0x7ffb704c7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf91ddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11040076295390211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11040076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c5a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1060e660; to 'JaxprTracer' at 0x7ffb1060e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5509ae70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11346991532728531, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11346992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237e90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02ab8d0; to 'JaxprTracer' at 0x7ffbd02abab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674501f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08804313314195544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08804313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e63b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb077fe70; to 'JaxprTracer' at 0x7ffcb077cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x321a3770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10094924702961153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10094925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff150>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de840; to 'JaxprTracer' at 0x7ffab0534180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fee2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11978213779608357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11978214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166cb150; to 'JaxprTracer' at 0x7ff7166caf70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa3c010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1140171867201211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11401719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07476d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea9b100; to 'JaxprTracer' at 0x7ff7166c8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x593074c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10999573264732189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10999573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149da0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506ddfd0; to 'JaxprTracer' at 0x7ffb506dd3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f567840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11263839661494925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1126384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107701f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142733d0; to 'JaxprTracer' at 0x7ffbb02edb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x757fe660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.107072172139486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10707217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6e10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715ecfce0; to 'JaxprTracer' at 0x7ff715ecec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a52b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11296430594924924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11296431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c90d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0768630; to 'JaxprTracer' at 0x7ffcb067dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7bc3380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8562563729221186
29, epoch_train_loss=3.8562563729221186
Epoch 30
Epoch 30 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10042325008799641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10042325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda4e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb104062f0; to 'JaxprTracer' at 0x7ffb104058a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1071c1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.09169616853233126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09169617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d8c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0410f90; to 'JaxprTracer' at 0x7ffcd0411580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55af49a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05312308423698618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05312308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f940>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706b3ba0; to 'JaxprTracer' at 0x7ffc706b0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x325d8650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06991375863041092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06991376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8140>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907c9850; to 'JaxprTracer' at 0x7ffa907c9670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770852f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10455598726439248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10455599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502351e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90474e50; to 'JaxprTracer' at 0x7ffc90477880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87af2fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11629159897399213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1162916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050afa0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f56c0; to 'JaxprTracer' at 0x7ffc306f53a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e16940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10287587896021068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10287588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285740>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a1620; to 'JaxprTracer' at 0x7ffcd07a1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x409d6270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10880356844614344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10880357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02860b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1074e520; to 'JaxprTracer' at 0x7ffb1074efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61953ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10392415663737267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10392416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105f80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d2070; to 'JaxprTracer' at 0x7ffbb00d2890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88d46cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.11764094341121621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11764094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9035f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064e4d0; to 'JaxprTracer' at 0x7ffcb064e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84431dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09988898947031938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09988899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edba20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021cc20; to 'JaxprTracer' at 0x7ffb5021c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f78c1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11427637554379147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11427638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f630>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06142c0; to 'JaxprTracer' at 0x7ffc902dc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c79300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11754135575107542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11754136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e070>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a62a0; to 'JaxprTracer' at 0x7ffab02a4cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf386520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12347612517526374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12347613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301900e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9028b100; to 'JaxprTracer' at 0x7ffa9028a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45838240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.12415066544977688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12415067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236ee0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf002e9d0; to 'JaxprTracer' at 0x7ffcf002ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85cb6af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11782492085886351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11782492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252570>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034cc70; to 'JaxprTracer' at 0x7ffa7034c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d926480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11112351707959123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11112352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056da0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0865d6c0; to 'JaxprTracer' at 0x7ffb0865c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aeb0f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11340045765580518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11340046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4180>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715662430; to 'JaxprTracer' at 0x7ffc3062fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78541720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11617216717840181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11617217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0e30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715450b30; to 'JaxprTracer' at 0x7ff715450040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x577bac60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08977894555254019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08977895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652c90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b7ce0; to 'JaxprTracer' at 0x7ffbd02b5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185a7d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10329842694929453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10329843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d14c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70506840; to 'JaxprTracer' at 0x7ffc70507d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x437ccde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12286008502654422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12286009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df9b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03304a0; to 'JaxprTracer' at 0x7ffc30741800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d1384f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11659909439664373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11659909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284610>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34761a80; to 'JaxprTracer' at 0x7ffa34760a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95a286e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.11349451617199412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11349452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301918e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab054b6f0; to 'JaxprTracer' at 0x7ffab054ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d29810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11514105332055816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11514105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4200>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9046a2f0; to 'JaxprTracer' at 0x7ffa506be070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2ce56f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.10976904065193488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10976904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745ae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707dd440; to 'JaxprTracer' at 0x7ffc707dcea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x867630e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11560197825120423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11560198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c890>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00bd940; to 'JaxprTracer' at 0x7ffbd00bdbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x994196c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8431033417180247
30, epoch_train_loss=3.8431033417180247
Epoch 31
Epoch 31 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1031049361076491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10310494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1cd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166ca9d0; to 'JaxprTracer' at 0x7ff7166cbdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51f37200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0949460953883597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0949461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c590>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715741cb0; to 'JaxprTracer' at 0x7ff715740770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x746a4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05396313235890402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05396313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dfa90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451e250; to 'JaxprTracer' at 0x7ffa3451cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c057c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07135446825472769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07135447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0aa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e836b10; to 'JaxprTracer' at 0x7ffb703436f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c9b21b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10754500242351413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.107545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6eb0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072efc0; to 'JaxprTracer' at 0x7ffa5072fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c797a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11914802522109308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11914803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286a10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02468e0; to 'JaxprTracer' at 0x7ffb004408b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ad0b670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10581823523291228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10581824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba720>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3061a660; to 'JaxprTracer' at 0x7ffc3061aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fe197a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11167551444016029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11167551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8120>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50718f40; to 'JaxprTracer' at 0x7ffb5071af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x261a47c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10598948047513826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10598948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748b10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecdc450; to 'JaxprTracer' at 0x7ff70ecdf060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cc85f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.12041567612916426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12041568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bf60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d4090; to 'JaxprTracer' at 0x7ffb704d52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf8667d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10213767483962632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10213767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c31a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0564090; to 'JaxprTracer' at 0x7ff9f0566890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a340a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11693815879735343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11693816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473ce80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00f9f80; to 'JaxprTracer' at 0x7ffbd00fa160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52d6fb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12018481123230113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12018481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de4d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5d1c0; to 'JaxprTracer' at 0x7ff716a5f150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5718cd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12644015524320898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12644016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9d50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34266e80; to 'JaxprTracer' at 0x7ffa342658a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f5eb200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1267488360605289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12674884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106a60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb086272e0; to 'JaxprTracer' at 0x7ffb08627830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e763300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12047214863568612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12047215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d0790>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb086c02c0; to 'JaxprTracer' at 0x7ffb086c3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c9e8120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11372540793308127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11372541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bd80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ca8040; to 'JaxprTracer' at 0x7ff7a2ca9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77226b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11618357537689765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11618358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4580>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700ab1f0; to 'JaxprTracer' at 0x7ffb700aade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e96340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11884285519255118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11884286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fe00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9031de40; to 'JaxprTracer' at 0x7ffa9031f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f76210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09161123157786598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09161123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772200>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ece2430; to 'JaxprTracer' at 0x7ff70ece1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fef2c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10585155001035668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10585155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e050>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714816ed0; to 'JaxprTracer' at 0x7ff714815490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x367d0ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12599365463677428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12599365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126040>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed4d10; to 'JaxprTracer' at 0x7ff7a2ed6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e41ce30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11916330367136574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1191633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650220>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d035b150; to 'JaxprTracer' at 0x7ff9d035b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d031830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.11686035250237795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11686035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8720>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70504950; to 'JaxprTracer' at 0x7ffc70504720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dab8c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11754032820311537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11754033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8730>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f6700; to 'JaxprTracer' at 0x7ffbd06f5bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aa10ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11235400204741884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.112354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c870>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bc0e0; to 'JaxprTracer' at 0x7ffa344b3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cd589b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11812735074440105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11812735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cffef0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046ed40; to 'JaxprTracer' at 0x7ffc3046ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6129bf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.830117192023026
31, epoch_train_loss=3.830117192023026
Epoch 32
Epoch 32 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10566077238112204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10566077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055f40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ac5e0; to 'JaxprTracer' at 0x7ffc300afe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d058c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.09808631787264725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09808632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0c90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1013a020; to 'JaxprTracer' at 0x7ffc10138c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92b08cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05476926578884402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05476927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8c70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00fbd30; to 'JaxprTracer' at 0x7ff71570f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b42ded0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0731212608952162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07312126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149530>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2caad90; to 'JaxprTracer' at 0x7ff7a2ca9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30fd6ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11028476750076789, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11028477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284130>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906a0810; to 'JaxprTracer' at 0x7ffb906a2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38946bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12228357757112393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12228358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502354a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0488450; to 'JaxprTracer' at 0x7ffbd0489080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d21f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10865690782248343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10865691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285c20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10317ab0; to 'JaxprTracer' at 0x7ffa103163e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73833df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11451512549135771, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11451513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286c90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083b3420; to 'JaxprTracer' at 0x7ffb083b2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2080ea30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10797637949429979, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10797638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104b90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02d3560; to 'JaxprTracer' at 0x7ffbf02d2700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78793870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.12326542103950303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12326542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903dc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecdcc20; to 'JaxprTracer' at 0x7ff70ecde7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x158583b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10463916757199063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10463917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056350>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71660d1c0; to 'JaxprTracer' at 0x7ff71660e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4867cb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1195305220369017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11953052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d31c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10150630; to 'JaxprTracer' at 0x7ffb101501d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x984d18f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12275739780052185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1227574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8ab0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10112d40; to 'JaxprTracer' at 0x7ffb101103b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d426f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12963310177032264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1296331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473ee20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01855d0; to 'JaxprTracer' at 0x7ff9d0186d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b6200e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1295559867183714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12955599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287510>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072ebb0; to 'JaxprTracer' at 0x7ffa344e0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da8b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1231696219512425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12316962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749770>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03ce7f0; to 'JaxprTracer' at 0x7ffc90251b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x926c8780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11628023986146065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11628024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156baae0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b4cc0; to 'JaxprTracer' at 0x7ffc906b5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9f7e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1188675447728453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11886754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9056ae30; to 'JaxprTracer' at 0x7ffa90569da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6043ccd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.12166479556143431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1216648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288300>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706cc590; to 'JaxprTracer' at 0x7ffb706ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x727b3db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09367778728029567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09367779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652ed0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705d1e90; to 'JaxprTracer' at 0x7ffa705d3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ad4300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10833496917620188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10833497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193f00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71483ad40; to 'JaxprTracer' at 0x7ffc10681ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cbe3e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12926693533559977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12926694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5180>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705684f0; to 'JaxprTracer' at 0x7ffb7056a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d6494e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12165867751050644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12165868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126790>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042f420; to 'JaxprTracer' at 0x7ffbb031df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x809e9640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12026166912484282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12026167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fb20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035e6b0; to 'JaxprTracer' at 0x7ff9f035f150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87f75dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11985531841761345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11985532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241e10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009e430; to 'JaxprTracer' at 0x7ffb9009e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x847970f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11481061126077195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11481061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7e20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bcc20; to 'JaxprTracer' at 0x7ff7168bc400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81bf92f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12054793289622476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12054793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032dfe0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00ec590; to 'JaxprTracer' at 0x7ffbf00ec6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x511222a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8169952126835325
32, epoch_train_loss=3.8169952126835325
Epoch 33
Epoch 33 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1082073740239847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10820737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f3c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7044fe70; to 'JaxprTracer' at 0x7ffc7044fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23033490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1007815189384115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10078152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6680>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166ca2f0; to 'JaxprTracer' at 0x7ff7166ca160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cc2cfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05561938366492122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05561938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c340>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf073bec0; to 'JaxprTracer' at 0x7ffbf073a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b4708c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07498891557947056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07498892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652850>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b4090; to 'JaxprTracer' at 0x7ff7a2d0e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bc2620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11321730004993398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1132173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289d00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90672a20; to 'JaxprTracer' at 0x7ffc90671170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61356bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12549950954385783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12549951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0746930>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078dfd0; to 'JaxprTracer' at 0x7ffa1078f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4990d370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11161545023436059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11161545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234830>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5071a250; to 'JaxprTracer' at 0x7ffb5071a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c1388c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11740820471393537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1174082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234be0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f1b70; to 'JaxprTracer' at 0x7ff9d05f3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c12cc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10993517758204635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10993518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287ad0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecde070; to 'JaxprTracer' at 0x7ff70ecde1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84417d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1260986807989632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12609868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5920>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58629300; to 'JaxprTracer' at 0x7ffc5862af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x381afb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10725090395876342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1072509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0fe00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02ba7a0; to 'JaxprTracer' at 0x7ffbf02b9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9efd7a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1222185982118715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1222186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f41a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f66ac0; to 'JaxprTracer' at 0x7ffa700ddfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35fbf910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12553930455121756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1255393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e7a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0488c70; to 'JaxprTracer' at 0x7ffbd0489ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f9c650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.13293052648717946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13293053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8ba0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f4630; to 'JaxprTracer' at 0x7ffb00439cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5e3fa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13255131093605096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13255131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289af0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b76f0; to 'JaxprTracer' at 0x7ffb08627bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ca3d690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1259221915274474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12592219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2e10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1032af20; to 'JaxprTracer' at 0x7ffb10328450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ff156c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11892636344564837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11892636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbbf0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50192430; to 'JaxprTracer' at 0x7ffa501916c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ae59800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.12171760653160378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12171761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748330>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570d3f0; to 'JaxprTracer' at 0x7ff71570d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6176e300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.12455011322035914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12455011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904930a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083f0720; to 'JaxprTracer' at 0x7ffa9011a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ef9f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09586639498245363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09586639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101267f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045d8a0; to 'JaxprTracer' at 0x7ffcd045c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e2932e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11108378795050602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11108379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb2e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506e9850; to 'JaxprTracer' at 0x7ffa506e8e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ef4a2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.13266393992066278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13266394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca1e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715451c60; to 'JaxprTracer' at 0x7ff715451e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403dba50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12417960271662266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1241796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5d10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707dfe20; to 'JaxprTracer' at 0x7ffa9031ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61f9ed40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12360180479923111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1236018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e490>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06eae80; to 'JaxprTracer' at 0x7ffbd06e84a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f94320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12221236569335041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12221237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0549b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906418a0; to 'JaxprTracer' at 0x7ffc90641bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7678a4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11730435513171403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11730436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a8d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00a7470; to 'JaxprTracer' at 0x7ffbd00a5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92820c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12291156319848832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12291156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252dd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c215a80; to 'JaxprTracer' at 0x7ff70c2158f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1d70e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.8035591211709585
33, epoch_train_loss=3.8035591211709585
Epoch 34
Epoch 34 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1108080538651688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11080805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bbb90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5040f9c0; to 'JaxprTracer' at 0x7ffa5040fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31709f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10325934049023229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10325934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dfd60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5046e9d0; to 'JaxprTracer' at 0x7ffb5046f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c32410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05652034978848699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05652035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2fe0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714ca3650; to 'JaxprTracer' at 0x7ff714ca02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7abe0ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07695063029167525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07695063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101263d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f9170; to 'JaxprTracer' at 0x7ffc302f8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cc8ffb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11621840796205866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11621841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904931d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cab8d0; to 'JaxprTracer' at 0x7ff7a2caa480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7432a520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12884551307743766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12884551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502376d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001aecf0; to 'JaxprTracer' at 0x7ffb001ae2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9246bec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1144622956220385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1144623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105130>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea98d10; to 'JaxprTracer' at 0x7ff70ea9ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x110b1980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12046970399005118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1204697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107230>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074e660; to 'JaxprTracer' at 0x7ffbd074c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42c55880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11184148260239317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11184148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3470>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704d58f0; to 'JaxprTracer' at 0x7ffb704d4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2149fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.12881106870628742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12881107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903de0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00d7b0; to 'JaxprTracer' at 0x7ff70f00f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87e62040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11004976319247939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11004976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9090>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a0590; to 'JaxprTracer' at 0x7ffc582a22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f2ce9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.12494192639159807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12494193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc490>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168f9800; to 'JaxprTracer' at 0x7ffc10708540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2f27f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12839851965958451, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12839852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0680>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385376a0; to 'JaxprTracer' at 0x7ffb38537f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x694b22a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.13631496411939809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13631496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71591d7b0; to 'JaxprTracer' at 0x7ff71591d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c1092c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13545890596829932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13545891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490930>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de840; to 'JaxprTracer' at 0x7ff9f05dcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977c5240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12854339778455504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1285434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848ce50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638c360; to 'JaxprTracer' at 0x7ffb90103060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf43800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12153416845495933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12153417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747320>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0696840; to 'JaxprTracer' at 0x7ffbf0697010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6793f3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.12463226598525004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12463227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b730>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2eaad90; to 'JaxprTracer' at 0x7ff7a2eaa930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a8966e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.12754851190447067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12754851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1230>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100902c0; to 'JaxprTracer' at 0x7ffc10093d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33f01690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09806380634439366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09806381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7780>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0211940; to 'JaxprTracer' at 0x7ffab0211f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48ceda20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11399144432222588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11399144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473ca00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304d8d60; to 'JaxprTracer' at 0x7ffc304d95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77194ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.13609942083963347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13609942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241be0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06f7b00; to 'JaxprTracer' at 0x7ffbb06f7010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a62c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12671659752046532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1267166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8cb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90297970; to 'JaxprTracer' at 0x7ffab0210220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9638e400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12675151920514005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12675152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a4f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715450f40; to 'JaxprTracer' at 0x7ff715450e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x691ce660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12453976466637161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12453976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f210>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042efc0; to 'JaxprTracer' at 0x7ffc7042fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84792dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11980501847007748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11980502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a61a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a71a0; to 'JaxprTracer' at 0x7ffab02a63e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f1b6fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.125299057855457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12529906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021fb60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00eeb10; to 'JaxprTracer' at 0x7ffbf00ef1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856afde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7900252425948144
34, epoch_train_loss=3.7900252425948144
Epoch 35
Epoch 35 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11366936214546773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11366936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906879b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5028ede0; to 'JaxprTracer' at 0x7ffb5028c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8f3c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10588815445371436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10588815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7ec0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714272a70; to 'JaxprTracer' at 0x7ff7142730b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43503c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.057440147564006255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05744015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0eb30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704ed2b0; to 'JaxprTracer' at 0x7ffb704ef920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1b44f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07862864115708373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07862864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5470>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b4090; to 'JaxprTracer' at 0x7ffc906b7790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3743e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11934148303563628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11934148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1dc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b4ef0; to 'JaxprTracer' at 0x7ff9f05b4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38525dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.13210870610090872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13210871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f79d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078fc90; to 'JaxprTracer' at 0x7ffa1078c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8739c0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11774373055678691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11774373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235cc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90251440; to 'JaxprTracer' at 0x7ffc90253010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x644732f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12359589406820205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12359589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236cf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a2b10; to 'JaxprTracer' at 0x7ffc582a1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bce66f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11366448388303031, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11366448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772000>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30688f40; to 'JaxprTracer' at 0x7ffc30689990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e362d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1314807743214961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13148077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a2e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05f4e50; to 'JaxprTracer' at 0x7ff9f05f7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e865d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11278203989043065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11278204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbe40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7163e7b50; to 'JaxprTracer' at 0x7ff7163e4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66338da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.12757173999620605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12757174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6b20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342662a0; to 'JaxprTracer' at 0x7ffa342658a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7ba7b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13124796879027412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13124797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c970>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90101260; to 'JaxprTracer' at 0x7ffc9045a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d1f98a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.139616694363981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13961669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fee50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd077cc70; to 'JaxprTracer' at 0x7ffcd077f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d6d5350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13856843749472098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13856844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652fa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e3e70; to 'JaxprTracer' at 0x7ffb001d7510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa64ca380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.13134394072840933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13134394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6770>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0772f20; to 'JaxprTracer' at 0x7ffab0772ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32e95fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12409027378921199, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12409027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287310>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e74c0; to 'JaxprTracer' at 0x7ffb382e48b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x535fee60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.12750427411605716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12750427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490160>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f2f20; to 'JaxprTracer' at 0x7ffb900f2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602e2c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1304212690262848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13042127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c96f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021f740; to 'JaxprTracer' at 0x7ffb5021f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x889c7560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10002249064905877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10002249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a040>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90568ae0; to 'JaxprTracer' at 0x7ffa90569c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9e15b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11730092803516808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11730093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8d30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10719800; to 'JaxprTracer' at 0x7ffc10718b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bbc4bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.13946201241165923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13946201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03ddae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58629990; to 'JaxprTracer' at 0x7ffc5862afc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87f10fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1292634124319855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12926341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065da00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a1d00; to 'JaxprTracer' at 0x7ffcd07a2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x944d6610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1299851258882568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12998513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9c40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714856840; to 'JaxprTracer' at 0x7ff7148569d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638b4da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1267756331325283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12677563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278e10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08423d80; to 'JaxprTracer' at 0x7ffb08420680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98440940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.12225066609393805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12225067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed94a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044d120; to 'JaxprTracer' at 0x7ffbb044d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x948e28d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12776017946126395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12776018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588aa0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8161b0; to 'JaxprTracer' at 0x7ff70e816e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ba6b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7762511978372415
35, epoch_train_loss=3.7762511978372415
Epoch 36
Epoch 36 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.16416828277752318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.16416828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02539c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70734bd0; to 'JaxprTracer' at 0x7ffb70735170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85d52f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.079531820861221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07953182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bafd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715487a10; to 'JaxprTracer' at 0x7ffb706cc950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f7e6d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05835355003173844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05835355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dca90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5019f9c0; to 'JaxprTracer' at 0x7ffa5019f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x745a740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07952428637948934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07952429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124b80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01d8f40; to 'JaxprTracer' at 0x7ffab01dab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x590554a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.07901798135602907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07901798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107702c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70349030; to 'JaxprTracer' at 0x7ffa7034a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53a450b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.28602949230048996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.28602949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502369e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00439210; to 'JaxprTracer' at 0x7ffb00438540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e60600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.06740451067953263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.06740451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0df0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904a95d0; to 'JaxprTracer' at 0x7ffc904abf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x998fb430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.2139530819064554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.21395308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f33f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc1210; to 'JaxprTracer' at 0x7ff70efc3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x859ba3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11545011155703386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11545011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6060>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504c2a20; to 'JaxprTracer' at 0x7ffa504c1120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0fc4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1051003098673447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10510031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9038e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0554130; to 'JaxprTracer' at 0x7ffab05541d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b3a4eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.083794345659299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08379435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252370>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01b98a0; to 'JaxprTracer' at 0x7ffcf01b9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x732fb010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11132955107498194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11132955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8ec0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714539da0; to 'JaxprTracer' at 0x7ff71453bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e91c660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.09944066288782914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09944066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de380>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078f1f0; to 'JaxprTracer' at 0x7ffa1078e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d500340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.2748898046317295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.2748898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906854b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10543d30; to 'JaxprTracer' at 0x7ffb105405e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa4a940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07953720349324854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0795372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107713c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50202840; to 'JaxprTracer' at 0x7ffa50203970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a306790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.09091029970494507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0909103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8940>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb24bd0; to 'JaxprTracer' at 0x7ff70eb25e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77c4a4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1150231525177432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11502315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7000>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7010bfb0; to 'JaxprTracer' at 0x7ffc70782f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e12ed40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10026079898730296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1002608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650730>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00708900; to 'JaxprTracer' at 0x7ffb0070b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49edb3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.16487413516502125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.16487414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c440>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009ed40; to 'JaxprTracer' at 0x7ffcf009d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f1920a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10144773163430232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10144773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f180>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f075a110; to 'JaxprTracer' at 0x7ff9f0759710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5692e8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.0003781726210983074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00037817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050ad60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1013a610; to 'JaxprTracer' at 0x7ffc10139260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a08b360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.2165043897018562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.21650439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d0db0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101382c0; to 'JaxprTracer' at 0x7ffcb07a49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68735f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.002296719810294952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00229672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1730>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34790720; to 'JaxprTracer' at 0x7ffcb0716070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f1b1490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.0979885373658301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.09798854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032f3e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58629760; to 'JaxprTracer' at 0x7ffc58628040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2a78c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12270238262808443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12270238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056850>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0295350; to 'JaxprTracer' at 0x7ffcb0295da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a947920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11555509624776153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1155551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e1c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700dc810; to 'JaxprTracer' at 0x7ffa700def70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723b1600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.03646920624003563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03646921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7c30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ef71670; to 'JaxprTracer' at 0x7ff70ef71b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e1a1570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.618891611537853
36, epoch_train_loss=4.618891611537853
Epoch 37
Epoch 37 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1199007103097033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11990071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284890>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021e200; to 'JaxprTracer' at 0x7ffb5021e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x380d7b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11067292252045348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11067292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702890a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38739080; to 'JaxprTracer' at 0x7ffb38738130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x392d06d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.059167910595085714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05916791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057790>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2d0dc10; to 'JaxprTracer' at 0x7ff7a2d0d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c6ed3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08225231298957046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08225231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190260>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008ce00; to 'JaxprTracer' at 0x7ff9f008d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4191bef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.123875376832329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12387538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102427e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151882c0; to 'JaxprTracer' at 0x7ff71518a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52025200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.13829673604202378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13829674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653a20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b49f0; to 'JaxprTracer' at 0x7ffc584b4220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x930e7250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.12353558911486377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12353559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105520>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf048b3d0; to 'JaxprTracer' at 0x7ffbf048a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78fcaf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12936577892842213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12936578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105410>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704c55d0; to 'JaxprTracer' at 0x7ffc704c57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88fef600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11707350758728792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11707351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8490>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a105e0; to 'JaxprTracer' at 0x7ff7a2a111c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d02df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13599718546690306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13599719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490bc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7016ed40; to 'JaxprTracer' at 0x7ffa7016f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18ab1200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11715459319214482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11715459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed96e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0537d80; to 'JaxprTracer' at 0x7ffab05351c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ee0ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.13211321190943637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13211321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702895e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04bb1a0; to 'JaxprTracer' at 0x7ffbd04ba660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c2db50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13587471115194563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13587471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0550c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0203470; to 'JaxprTracer' at 0x7ffcf02026b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9af95860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.14570648302503036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14570648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfffd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707c3150; to 'JaxprTracer' at 0x7ffc707c3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e4d23d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.14318947478647207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14318947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f9a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714ede0c0; to 'JaxprTracer' at 0x7ff714edcfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5036c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1357344865280107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13573449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651840>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0572ca0; to 'JaxprTracer' at 0x7ffbf0571170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29f790a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12859719650648255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1285972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07458a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107615d0; to 'JaxprTracer' at 0x7ffb10760810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a57740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.13234287480301443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13234287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284d30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902018a0; to 'JaxprTracer' at 0x7ffc90203880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca1ea20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.13571975459792876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13571975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb840>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307cd210; to 'JaxprTracer' at 0x7ffc307ce840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59a05bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10404417026020162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10404417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127310>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03eb6f0; to 'JaxprTracer' at 0x7ffcd03eb1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5628f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.12246899667217971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.122469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8c30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efd43b0; to 'JaxprTracer' at 0x7ff70efd58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97d5d740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.14532157139721882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14532157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de040>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01faa20; to 'JaxprTracer' at 0x7ff9d01faf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61295840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.13396712094244034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13396712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687e10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9028bfb0; to 'JaxprTracer' at 0x7ffa9028b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4af1e5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.13569779595087386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1356978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc9a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166247c0; to 'JaxprTracer' at 0x7ff716626b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f309190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13086489949291652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1308649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cb60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3047dfd0; to 'JaxprTracer' at 0x7ffc3047f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39cef9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1267338836363071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12673388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253950>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0105da0; to 'JaxprTracer' at 0x7ffc586283b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x457f28d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.13226966337028503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13226966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5350>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0682cf0; to 'JaxprTracer' at 0x7ffbd0683ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d00be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.751906408815679
37, epoch_train_loss=3.751906408815679
Epoch 38
Epoch 38 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12274201051750655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12274201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7360>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638cef0; to 'JaxprTracer' at 0x7ff71638fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d97400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11291223413122749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11291223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026afb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387cfe20; to 'JaxprTracer' at 0x7ffb387cd940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x754dcf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06003268417875728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06003268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfdac0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714eac0e0; to 'JaxprTracer' at 0x7ff714ead760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ea8a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0840042947829826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08400429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d08b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e6160; to 'JaxprTracer' at 0x7ffa700e69d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d112a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.12593026143607744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12593026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770aa0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7052b330; to 'JaxprTracer' at 0x7ffb7052a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36106860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.14089654572591864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14089655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502365d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0201bc0; to 'JaxprTracer' at 0x7ffcf0203f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cf95740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.12628674615930394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12628675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0740>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34266610; to 'JaxprTracer' at 0x7ffa34264860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c58ed40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13216094698466993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13216095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1370>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0535c60; to 'JaxprTracer' at 0x7ffab05351c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bcae520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11881996082970475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11881996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241660>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea99350; to 'JaxprTracer' at 0x7ff70ea9bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab4cf40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13814784180452055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13814784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903af0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062b8d0; to 'JaxprTracer' at 0x7ffcb062b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fdd38a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1192506469124402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11925065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f56c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f01035b0; to 'JaxprTracer' at 0x7ff9f0102d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c472d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1341257994539594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1341258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269df0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5844a160; to 'JaxprTracer' at 0x7ffc58449e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc6bc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13799830854746822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13799831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfeeb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702de2a0; to 'JaxprTracer' at 0x7ffb702dc590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f1ed6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1483035768880333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14830358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f7f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0244f40; to 'JaxprTracer' at 0x7ffcb0244360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x940fde60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1455404617920017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14554046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773a60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107c0ea0; to 'JaxprTracer' at 0x7ff9f03cef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ce7d700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.13790442777210993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13790443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba7f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30708630; to 'JaxprTracer' at 0x7ffc3070b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439dfe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.13049154018035422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13049154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107230>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148394e0; to 'JaxprTracer' at 0x7ff71483ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x717f7d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.13444079575887222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1344408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4660>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a67a0; to 'JaxprTracer' at 0x7ffa907a58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602c7130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1380587596708397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13805876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342a7d80; to 'JaxprTracer' at 0x7ffa342a6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3aa360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10600256752730286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10600257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191b10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00473600; to 'JaxprTracer' at 0x7ffb00470ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3232c280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.12505939303810634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12505939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032cd70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0330c70; to 'JaxprTracer' at 0x7ffbf0330130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fd1c950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.14793813001384123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14793813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684b10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08625760; to 'JaxprTracer' at 0x7ffb08625350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68e6ae80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.13635005823604238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13635006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df0f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ada30; to 'JaxprTracer' at 0x7ff70c1af600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa03e3f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.13869121438325233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13869121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bb90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a28e0; to 'JaxprTracer' at 0x7ffb700a1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x760720d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13277410997774128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13277411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289d10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e881440; to 'JaxprTracer' at 0x7ff70e881940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x261d0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.12867256838337165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12867257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b8e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71568ea20; to 'JaxprTracer' at 0x7ff71568e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8049bb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1346222050380304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13462221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d6d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716364590; to 'JaxprTracer' at 0x7ff716364a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cda6650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.740564875133257
38, epoch_train_loss=3.740564875133257
Epoch 39
Epoch 39 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09834558639796155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09834559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02530f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0611d50; to 'JaxprTracer' at 0x7ff9f0613920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a9aa790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11405657513106768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11405658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287f40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0705ad0; to 'JaxprTracer' at 0x7ffc704e44a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x416c190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.060957347534091946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06095735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057050>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb002196c0; to 'JaxprTracer' at 0x7ffb0021af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x411499a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08555671271130444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08555671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fae0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902ccc70; to 'JaxprTracer' at 0x7ffb902ce9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f6583b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.12560101874725615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12560102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5520>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05dede0; to 'JaxprTracer' at 0x7ffab0775030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30058dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10187236450259984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10187236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0d10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716693a60; to 'JaxprTracer' at 0x7ff7166934c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x599a62f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11116903171144546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11116903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8af0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10152480; to 'JaxprTracer' at 0x7ffb10151d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11eddb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10160266779512611, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10160267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c96b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0100bd0; to 'JaxprTracer' at 0x7ff9f01038d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d479260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12069240743573181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12069241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125e50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30688130; to 'JaxprTracer' at 0x7ffc3068a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e951f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13939734276804236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13939734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a53f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90726d40; to 'JaxprTracer' at 0x7ffc907255d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3a279b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11906620430250629, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1190662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252a20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0534180; to 'JaxprTracer' at 0x7ffa7038ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a846e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.13577297047709475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13577297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285280>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071a930; to 'JaxprTracer' at 0x7ff9f0719f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58206a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13856328241743415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13856328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057d70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10452ca0; to 'JaxprTracer' at 0x7ff9f0705da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eeb2ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1097400395626425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10974004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bbd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb074a750; to 'JaxprTracer' at 0x7ffcb0749080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0c2cc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.14352277949572181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14352278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241690>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b1990; to 'JaxprTracer' at 0x7ffbd00b2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f3a4c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.13774725502577007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13774726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2950>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5046c590; to 'JaxprTracer' at 0x7ffb5046dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e7d1370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1324049085282301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13240491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502351f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570dfd0; to 'JaxprTracer' at 0x7ff71570f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa273db90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.13531712343960364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13531712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107710b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0770f90; to 'JaxprTracer' at 0x7ff9f07716c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e27f720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11107632320547924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11107632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff720>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00d8bd0; to 'JaxprTracer' at 0x7ffbd00da8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54142600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10787758962318823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10787759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de5f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701096c0; to 'JaxprTracer' at 0x7ffb70109fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b14a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11705506679707196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11705507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149800>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382dbe70; to 'JaxprTracer' at 0x7ffb382dbba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c567340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11540154897137535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11540155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba860>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90164270; to 'JaxprTracer' at 0x7ffb90165300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61200120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12580681112821585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12580681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301911e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00dee0; to 'JaxprTracer' at 0x7ff70f00e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a395e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.11955534430328547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11955534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858aef0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071b100; to 'JaxprTracer' at 0x7ffc1071afc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c3f8570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13476136247258116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13476136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5ac0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1adc60; to 'JaxprTracer' at 0x7ff70c1ac770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5ea1e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13059928467639106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13059928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9580>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044e1b0; to 'JaxprTracer' at 0x7ffbb044e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76fdc130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12810553606658748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12810554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05098c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01e9c10; to 'JaxprTracer' at 0x7ffab01ea110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77002cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.807932344414901
39, epoch_train_loss=3.807932344414901
Epoch 40
Epoch 40 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12827128037172394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12827128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106b00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0200b80; to 'JaxprTracer' at 0x7ffcf0200770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17718130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11745540372941904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1174554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e660>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f075ac00; to 'JaxprTracer' at 0x7ff9f0759b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26202a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06187760052407565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0618776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5bb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0812ebb0; to 'JaxprTracer' at 0x7ffb0865e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c3f410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08694705978659684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08694706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026baf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90328cc0; to 'JaxprTracer' at 0x7ffb90329a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55e0cee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.13022310088021052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1302231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901494f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2f0180; to 'JaxprTracer' at 0x7ff70b2f0950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c17910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.14589727367380487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14589727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1490>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90622e80; to 'JaxprTracer' at 0x7ffc90620cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5781f2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1314268525722076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13142685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253300>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90640f90; to 'JaxprTracer' at 0x7ffc90641940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6957eef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13764839915474825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1376484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02521b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0711b20; to 'JaxprTracer' at 0x7ffbf0712c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b90580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12255471231506482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12255471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234bd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0080d10; to 'JaxprTracer' at 0x7ffbf0081bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84d1bec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.14277821368018417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14277821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9036d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5840be20; to 'JaxprTracer' at 0x7ffc58408a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89559e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1232819157984008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12328192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105cd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70670950; to 'JaxprTracer' at 0x7ffa70670220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99486390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1385008583003748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13850086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032eb10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70506e30; to 'JaxprTracer' at 0x7ffc705049f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1391f0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.14256150095987127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1425615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4dc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e668860; to 'JaxprTracer' at 0x7ff70e66a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x738383b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.15346261572624467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15346262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906867b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71613c4a0; to 'JaxprTracer' at 0x7ff71613f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73826480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.15038898108588258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15038898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a390>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50654770; to 'JaxprTracer' at 0x7ffa50654d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x313594f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.14249541776088018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14249542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd4a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b77d30; to 'JaxprTracer' at 0x7ff715b74270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33b6afc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.13468288293455213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13468288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b86d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0452890; to 'JaxprTracer' at 0x7ffcf04537e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b8e7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1388920604481079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13889206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb3d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302bad90; to 'JaxprTracer' at 0x7ff715743100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67b75e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.14274303512900086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14274304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e1a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107969d0; to 'JaxprTracer' at 0x7ffa10797880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba129f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10963059510632792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1096306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4980>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078a980; to 'JaxprTracer' at 0x7ff7158d00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1938200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1300926599981621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13009266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d690>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03ea610; to 'JaxprTracer' at 0x7ffcd03e9490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f260db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1532044242886127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15320442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c520>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7024bbf0; to 'JaxprTracer' at 0x7ffb70070540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c8b61d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.14120305735132438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14120306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385893f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e9a80; to 'JaxprTracer' at 0x7ff9f07e9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x755dd7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1444852456041124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14448525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301907d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901672e0; to 'JaxprTracer' at 0x7ffb901645e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d38b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13693293606444354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13693294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056810>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154516c0; to 'JaxprTracer' at 0x7ff715453510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa39f08d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13279824434545784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13279824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ae340; to 'JaxprTracer' at 0x7ff70c1ac400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c84d1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.13947200435232737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.139472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c00b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716aae250; to 'JaxprTracer' at 0x7ff716aacd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69f248a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7178231637227963
40, epoch_train_loss=3.7178231637227963
Epoch 41
Epoch 41 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13101233770109047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13101234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650500>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04971a0; to 'JaxprTracer' at 0x7ffcd0497b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x947c48c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12013070331175646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1201307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c1a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716b3c9a0; to 'JaxprTracer' at 0x7ff716b3f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1372e2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06288338431703837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06288338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e3f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda35b0; to 'JaxprTracer' at 0x7ff70eda22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e24820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08862233693226557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08862234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1290>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019d580; to 'JaxprTracer' at 0x7ffcf019c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62a43600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1325452899068862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13254529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074ae90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de7a0; to 'JaxprTracer' at 0x7ffb50246840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ea4c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1485150649371939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14851506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126c10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71453b9c0; to 'JaxprTracer' at 0x7ff714539e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7512df30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.13401436879513337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13401437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a6d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0697740; to 'JaxprTracer' at 0x7ffbf0697880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2becf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14047014262767107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14047014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b64d0; to 'JaxprTracer' at 0x7ffc902b7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2318a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.124575908341234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12457591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7c90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed23ec0; to 'JaxprTracer' at 0x7ff70ed20770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x484b93d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.14527120335083146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1452712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c4e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707344a0; to 'JaxprTracer' at 0x7ffc70736b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e31f090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.12550357258156425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12550357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650390>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f65940; to 'JaxprTracer' at 0x7ff714f67f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a216ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.14088624020597265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14088624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013de10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102967f0; to 'JaxprTracer' at 0x7ffc102973d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44d52bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.14504637182863733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14504637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e380>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50193060; to 'JaxprTracer' at 0x7ffa50190630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a3e9350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.156185136847095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15618514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02795b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f007f2e0; to 'JaxprTracer' at 0x7ff9f007d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dba8030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1530608732239269, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15306087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edad50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423e7f0; to 'JaxprTracer' at 0x7ffa3423ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c484d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.14498546779269172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14498547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125540>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10681df0; to 'JaxprTracer' at 0x7ffc10680630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c2fc630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.13697037794894987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13697038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dfa20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347240e0; to 'JaxprTracer' at 0x7ffbd0718a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b20e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14131999354601432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14131999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269bf0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387cdc10; to 'JaxprTracer' at 0x7ffb387cfab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5236a070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1452193823097095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14521938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6680>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b52b0; to 'JaxprTracer' at 0x7ffc702c9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57272ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11157729059104837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11157729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3e20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0715cb0; to 'JaxprTracer' at 0x7ffcb0717ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60788400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13268830485071118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1326883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cba50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906a21b0; to 'JaxprTracer' at 0x7ffb906a1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a0eb200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1559981713778867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15599817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032f020>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a5850; to 'JaxprTracer' at 0x7ffa907a5a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d4d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.14377471968112437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14377472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d840>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bce00; to 'JaxprTracer' at 0x7ff7168bfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6118e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.14742645129558649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14742645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027bcb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03eb880; to 'JaxprTracer' at 0x7ff7a2e20680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c2cd7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13919899303974217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13919899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0fad0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e6660; to 'JaxprTracer' at 0x7ffbf00e4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af5f030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13503628027082554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13503628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff400>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5d0d0; to 'JaxprTracer' at 0x7ff716a5c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b7b0900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14206457082039783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14206457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288130>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102ed7b0; to 'JaxprTracer' at 0x7ffc102ed8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82333ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7057853342674876
41, epoch_train_loss=3.7057853342674876
Epoch 42
Epoch 42 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13405418925364485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13405419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0704cc0; to 'JaxprTracer' at 0x7ffab0705990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24f9c120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12307907571410501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12307908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055fc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10406fc0; to 'JaxprTracer' at 0x7ffb104043b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39644670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06399853473415394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06399853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0de30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0112340; to 'JaxprTracer' at 0x7ffbb0112520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3965a610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09071240560354188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09071241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285240>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7025c680; to 'JaxprTracer' at 0x7ffc7025d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b9ee850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1349772158713593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13497722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107100>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2f19e0; to 'JaxprTracer' at 0x7ff70b2f0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x107957e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.15124784283147302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15124784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589c20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a3240; to 'JaxprTracer' at 0x7ffcf03a3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61216a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1367919878713828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13679199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0340>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004409a0; to 'JaxprTracer' at 0x7ffb00441300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d347150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14343504701843166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14343505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d24b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0496020; to 'JaxprTracer' at 0x7ffcb0495440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e08ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12679057140901104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12679057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252d40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504c0040; to 'JaxprTracer' at 0x7ffa504c2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5814ae10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.14787991628925673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14787992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903630>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900ac9f0; to 'JaxprTracer' at 0x7ff70ed22200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46024a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.12794737668105863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12794738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284300>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151dc7c0; to 'JaxprTracer' at 0x7ff7151dd8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15b403f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.14341893925106333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14341894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054560>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07e69d0; to 'JaxprTracer' at 0x7ff715bfcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8258c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.14767047315871235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14767047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c810>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10541c60; to 'JaxprTracer' at 0x7ffb10542750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6286c250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1590387880780822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15903879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c930>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702dd210; to 'JaxprTracer' at 0x7ffb702de1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37b07900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.155876344765892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15587634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105af0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145bde40; to 'JaxprTracer' at 0x7ff7145bddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69a10e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1476090869595425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14760909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5790>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90044e00; to 'JaxprTracer' at 0x7ffa90044db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e3c4f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1394132664501251, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13941327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014bc10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0435760; to 'JaxprTracer' at 0x7ff715ecd4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32e9c050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14388003528321505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14388004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124070>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf002f560; to 'JaxprTracer' at 0x7ffcf002c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5327d7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.14785883957524787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14785884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236f60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8595d0; to 'JaxprTracer' at 0x7ffa104f2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88732390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1138187999562413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1138188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed96d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044db20; to 'JaxprTracer' at 0x7ffbb044da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71f79f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13530663708484333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13530664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2a40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0200860; to 'JaxprTracer' at 0x7ffcd0203290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37eb0e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.15892091295851823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15892091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d490>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715742f70; to 'JaxprTracer' at 0x7ffa7037b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3233acd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1465245638906128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14652456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02782a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf073be20; to 'JaxprTracer' at 0x7ffbf0739bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5427cc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.15062195213719834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15062195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192ab0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34763470; to 'JaxprTracer' at 0x7ff70ea57a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ecefb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.14165499393361825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14165499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651240>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0612610; to 'JaxprTracer' at 0x7ff9f0613880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6abb6f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13744006587295235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13744007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f680>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035ce50; to 'JaxprTracer' at 0x7ff9f035d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e8950a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14479468130228965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14479468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7f40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0615990; to 'JaxprTracer' at 0x7ff9d0616b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92cfe6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.692969378459657
42, epoch_train_loss=3.692969378459657
Epoch 43
Epoch 43 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13713946256195997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13713946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff540>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0716610; to 'JaxprTracer' at 0x7ffcb07140e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b8f820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12602396811049632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12602397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658580>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0352ed0; to 'JaxprTracer' at 0x7ffc3062ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x798cb2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06523142874353068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06523143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ca30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a6b100; to 'JaxprTracer' at 0x7ff7a2a68ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64423100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09297387889726615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09297388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235970>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019d030; to 'JaxprTracer' at 0x7ffcf019ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1a2f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.13754638982785225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13754639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02508b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05dfdd0; to 'JaxprTracer' at 0x7ffcb03e7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c792c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.15415285045082494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15415285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904926b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907c8270; to 'JaxprTracer' at 0x7ffa907c8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x874f22d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.13969995640228763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13969996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589bc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715484c20; to 'JaxprTracer' at 0x7ff715487e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2554a810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1466599227188848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14665992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efd4c70; to 'JaxprTracer' at 0x7ff70efd4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fbd1ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12920667052881002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12920667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032ce00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecdd0d0; to 'JaxprTracer' at 0x7ff70ecdf0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314c89c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1506536796309551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15065368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b040>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068b510; to 'JaxprTracer' at 0x7ffc30689440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b580b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.13054018047005053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13054018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd220>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385c5530; to 'JaxprTracer' at 0x7ffb385c56c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x700c2a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.146128678113024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14612868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a3d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3053ea70; to 'JaxprTracer' at 0x7ffc3053f100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x235aea90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.15046190511454005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15046191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f2d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5846bba0; to 'JaxprTracer' at 0x7ffcb0427ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b94c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1620771725633308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16207717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a730>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc586553f0; to 'JaxprTracer' at 0x7ffc58655620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x545b0070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.15883433507448377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15883434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250d80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7066b510; to 'JaxprTracer' at 0x7ffcb01d8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50ae2c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.15039567428499775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15039567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492060>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e4220; to 'JaxprTracer' at 0x7ffb382e6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x343d5290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.14204071999778983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14204072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7a20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d30b0; to 'JaxprTracer' at 0x7ffb900d3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x936ddf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14660315724080808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14660316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01065a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703cc9f0; to 'JaxprTracer' at 0x7ffa703cd6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x181c56a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.15069686267559132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15069686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e390>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451f560; to 'JaxprTracer' at 0x7ff7151194e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79027080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11617992770861557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11617993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b200>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71481b5b0; to 'JaxprTracer' at 0x7ff71481a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa38d5f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13804611078778609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13804611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0fdc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10351ad0; to 'JaxprTracer' at 0x7ff716895bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c365800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.16202120743759074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16202121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241b40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038ca40; to 'JaxprTracer' at 0x7ffb1038ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d25000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.14937348799789577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14937349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9960>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1077f330; to 'JaxprTracer' at 0x7ffb1077f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42806d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.15404567766243096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15404568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509fd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714d040e0; to 'JaxprTracer' at 0x7ff714d05e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b71fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.14432140553602643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14432141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9970>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004d5530; to 'JaxprTracer' at 0x7ffbf073b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5829e650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.14003396899873943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14003397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca9b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08145fd0; to 'JaxprTracer' at 0x7ffb081441d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64760df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14767061389954952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14767061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771850>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7153c8130; to 'JaxprTracer' at 0x7ff7153c80e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa700d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.679414138557086
43, epoch_train_loss=3.679414138557086
Epoch 44
Epoch 44 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14001580876170508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14001581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b2e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7144f6890; to 'JaxprTracer' at 0x7ff7144f5b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf3ba0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12906901909367025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12906902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6520>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04f13f0; to 'JaxprTracer' at 0x7ffab04f11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62759d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06655519266079378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06655519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508340>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1056e1b0; to 'JaxprTracer' at 0x7ffa1056c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c75c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09543352900692283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09543353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fff00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d36a0; to 'JaxprTracer' at 0x7ffb900d11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8132b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.14023102782869545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14023103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f160>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8aad90; to 'JaxprTracer' at 0x7ff70e8ab1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e1224a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.15717566199359506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15717566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d20b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06e3ba0; to 'JaxprTracer' at 0x7ffbb06e3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfde1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.14301217447058484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14301217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904901c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f2f70; to 'JaxprTracer' at 0x7ffb900f30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36be200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1498853942014094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14988539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491280>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70070630; to 'JaxprTracer' at 0x7ffb70072890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8708e9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1317744038300413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1317744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253600>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90102f70; to 'JaxprTracer' at 0x7ffb90100130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66143960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.15356955926205185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15356956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903f60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90296cf0; to 'JaxprTracer' at 0x7ffc90295ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cc34a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.13324599703187015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.133246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149220>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300cf740; to 'JaxprTracer' at 0x7ffc300cfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f18090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.14898065684109396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14898066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4fa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300cd260; to 'JaxprTracer' at 0x7ffbd04bab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ba8e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.15339145742581684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15339146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508cf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00facf0; to 'JaxprTracer' at 0x7ffbd00fbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32396b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1652407697210388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16524077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506586c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b759e0; to 'JaxprTracer' at 0x7ff715b77790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe18a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.16192129737745092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1619213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473dfa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700ad8a0; to 'JaxprTracer' at 0x7ffa700ac1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa38b0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.15331880963587394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15331881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e0f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10168ae0; to 'JaxprTracer' at 0x7ffc10168180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x812623d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.14481597043936612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14481597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1cd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70310900; to 'JaxprTracer' at 0x7ffb70312c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96850990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14946273715132508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14946274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127790>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ece3880; to 'JaxprTracer' at 0x7ff70ece2110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x774aa400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1536791522828069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15367915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bf290; to 'JaxprTracer' at 0x7ffbb06bfe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4907c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11867166149337094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11867166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e550>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b359b20; to 'JaxprTracer' at 0x7ff70b35af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47195c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1408651231290996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14086512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edbc10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5040d210; to 'JaxprTracer' at 0x7ffa5040d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99de1dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1652526799335905, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16525268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906879a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154535b0; to 'JaxprTracer' at 0x7ff715453d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a64d1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.15232887417833132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15232887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102404d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9032b240; to 'JaxprTracer' at 0x7ffa9032ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ab644e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1576556609780391, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15765566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659080>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b305c60; to 'JaxprTracer' at 0x7ff70b306610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0b9d1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.14715008989747957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14715009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9050>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10691cb0; to 'JaxprTracer' at 0x7ffa107c3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fbd5010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1427781313441452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14277813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3c00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05f6070; to 'JaxprTracer' at 0x7ff9f05f5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92dd9d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15072811432392874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15072811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745290>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0785300; to 'JaxprTracer' at 0x7ff9f0785170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ab7d290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.6653029810912314
44, epoch_train_loss=3.6653029810912314
Epoch 45
Epoch 45 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14293562538808222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14293563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dfc80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06289a0; to 'JaxprTracer' at 0x7ffcb0628f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x365f780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13209026518719608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13209027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfca50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71519fa10; to 'JaxprTracer' at 0x7ff71519d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50129d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06794747505337394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06794748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684630>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd031a660; to 'JaxprTracer' at 0x7ffb10329e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768f4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09802061616294655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09802062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237bc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0608cc0; to 'JaxprTracer' at 0x7ff9d060a5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25597e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1430198512408058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14301985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127da0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ec860; to 'JaxprTracer' at 0x7ffbb02efe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37427e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16030231254852073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16030231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904938c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714eac4a0; to 'JaxprTracer' at 0x7ff714eadda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35db2c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1462770387325836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14627704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285f40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b298810; to 'JaxprTracer' at 0x7ff70b2981d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x658c7aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1530812462478251, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15308125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7150; to 'JaxprTracer' at 0x7ffc902b6930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26285f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1344739467181035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13447395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd5c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02743b0; to 'JaxprTracer' at 0x7ffcd0274bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ee921b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.15661450928572557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15661451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104ff0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686ce00; to 'JaxprTracer' at 0x7ffcd0276160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56baba50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1361225364780863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13612254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7b30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100dae80; to 'JaxprTracer' at 0x7ffc100d8ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c0cfa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1519581480333821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15195815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfcfc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3858c6d0; to 'JaxprTracer' at 0x7ffb3858ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f79620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.15644459624084384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1564446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685ba0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423e9d0; to 'JaxprTracer' at 0x7ffa3423d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dcbb9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.16851154723444411, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16851155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1b90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a0860; to 'JaxprTracer' at 0x7ffb004a0900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f50b250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.16513194780117155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16513195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250460>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06c1350; to 'JaxprTracer' at 0x7ffb702dc4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6946720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.15636675709670092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15636676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491ee0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d13a0; to 'JaxprTracer' at 0x7ffb900d2610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf3c6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.147717634153492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14771763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2420>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb007767a0; to 'JaxprTracer' at 0x7ffb00775c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989a8cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15244400274811717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.152444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02792f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638d5d0; to 'JaxprTracer' at 0x7ff716adbe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ffb5f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.15677676443012142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15677676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102410f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1011cd60; to 'JaxprTracer' at 0x7ffb90164540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b80520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12126352655651106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12126353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05081c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701318a0; to 'JaxprTracer' at 0x7ffa701314e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f5cc620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.14391047191562975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14391047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703caf70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00daac0; to 'JaxprTracer' at 0x7ffbd00d84a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59759200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.16859476784610752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16859477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7330>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7144f4fe0; to 'JaxprTracer' at 0x7ff7144f5170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a6a090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.15542661897452625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15542662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f3a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bcc70; to 'JaxprTracer' at 0x7ff70ece2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674b4bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.161382319051895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16138232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0510>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053c2c0; to 'JaxprTracer' at 0x7ffb9053d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2714ba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15011742200864983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15011742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a70d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b306bb0; to 'JaxprTracer' at 0x7ff70b3065c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65545540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1456531645718738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14565316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7510>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906a10d0; to 'JaxprTracer' at 0x7ffb906a0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a63c3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15381325441834023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15381325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca060>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3050ac00; to 'JaxprTracer' at 0x7ffc3050ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5539a280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.6507530595610596
45, epoch_train_loss=3.6507530595610596
Epoch 46
Epoch 46 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14812261653833658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14812262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0a10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e81d0; to 'JaxprTracer' at 0x7ffbd06ebab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69f94f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13538832342838555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13538832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba150>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081ce1b0; to 'JaxprTracer' at 0x7ffb081ccea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c3eae70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06941306857435946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06941307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7640>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90044db0; to 'JaxprTracer' at 0x7ffa90046700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41553350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10063391955068947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10063392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b5c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004735b0; to 'JaxprTracer' at 0x7ffb004736f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c24bbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.14593891604243064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14593892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbe00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855fc40; to 'JaxprTracer' at 0x7ffb3855c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12e97a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16358330283549288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1635833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055dd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1da6b0; to 'JaxprTracer' at 0x7ffc9021de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa72ae830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.14938624208400714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14938624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6090>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70528ae0; to 'JaxprTracer' at 0x7ffb7052ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44944130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1596727505565938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15967275, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5400>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90622ac0; to 'JaxprTracer' at 0x7ffc90620450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30493290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13734377679073417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13734378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90493a20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704e7560; to 'JaxprTracer' at 0x7ffc704e7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79b01630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.15982000368148144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903a20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70754ae0; to 'JaxprTracer' at 0x7ffcb0495bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59723a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1391542265165013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13915423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0820>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58688ef0; to 'JaxprTracer' at 0x7ffc5868ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b761620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1550906171098369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15509062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9f10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030b7e0; to 'JaxprTracer' at 0x7ffbb0308f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x253f7650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.15965065893879282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15965066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6fd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04b80e0; to 'JaxprTracer' at 0x7ffbd04baca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7848b950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17193468124719274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17193468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065ae20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168f8810; to 'JaxprTracer' at 0x7ff7168f84a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79517d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.16849937404616225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16849937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bac70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011d940; to 'JaxprTracer' at 0x7ff9d011d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7723dd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1595695781218876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15956958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242300>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71613ce50; to 'JaxprTracer' at 0x7ff71613dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69524270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15077529074714638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15077529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d040>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70294b80; to 'JaxprTracer' at 0x7ffc702949f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x628f4af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15822932461987924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15822932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385880b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387c08b0; to 'JaxprTracer' at 0x7ffb387c2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9efbd8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16002625021423417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16002625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a0b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01e6660; to 'JaxprTracer' at 0x7ffcf01e4450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572e0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12404873122103233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12404873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253d10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d2340; to 'JaxprTracer' at 0x7ffbb00d1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93232a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1472081381544637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14720814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502373b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb24270; to 'JaxprTracer' at 0x7ff70eb24db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ecf88a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.17207970996944688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17207971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fad0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70671670; to 'JaxprTracer' at 0x7ffa70672d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d747fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.15869512060188676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15869512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1910>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423d3f0; to 'JaxprTracer' at 0x7ffa3423fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b04980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.16518477297637124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16518477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506586b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed71990; to 'JaxprTracer' at 0x7ff70ed71080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa268b930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1532577174071897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15325772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd810>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bfc90; to 'JaxprTracer' at 0x7ffb90165df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fbc7b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.14869173708826333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14869174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653ba0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0613d30; to 'JaxprTracer' at 0x7ff9f06130b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ae2b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15706108504530378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15706109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03deca0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078e610; to 'JaxprTracer' at 0x7ffab078fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94cadce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.6336132249735953
46, epoch_train_loss=3.6336132249735953
Epoch 47
Epoch 47 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16085763435000158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16085763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d26b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00fbf0; to 'JaxprTracer' at 0x7ff70f00c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18c01d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13840294563417427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13840295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8b80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715119760; to 'JaxprTracer' at 0x7ff715119b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c0217c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07098939014692895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07098939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fc70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3079dfd0; to 'JaxprTracer' at 0x7ffc3079e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa24000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1049748972035486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1049749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749f40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04cb420; to 'JaxprTracer' at 0x7ff714a53c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e3091e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1490554439643941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14905544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a070>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0043af20; to 'JaxprTracer' at 0x7ff715e7d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a92c9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1671273524933481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16712735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6200>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906d2660; to 'JaxprTracer' at 0x7ffc906d21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a32e640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.15279837140109623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15279837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0576c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072e2a0; to 'JaxprTracer' at 0x7ffa9072e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f731f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17384505277442444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17384505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0569e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147e5170; to 'JaxprTracer' at 0x7ff7147e5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a8f5f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14047558772622568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14047559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b333b50; to 'JaxprTracer' at 0x7ff70b3320c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf7e200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1632538712819448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16325387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b880>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158bd350; to 'JaxprTracer' at 0x7ff7158bfdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aa28200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.17042625890328159, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17042626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2970>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707557b0; to 'JaxprTracer' at 0x7ffc707547c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab5a480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1584495475762955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15844955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb230>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067e660; to 'JaxprTracer' at 0x7ffb1059ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4193d0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1630847054475105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16308471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848eb50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0746980; to 'JaxprTracer' at 0x7ffbb0745760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f911c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17558025922290407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17558026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771c70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10520bd0; to 'JaxprTracer' at 0x7ffa10521080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e3d9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17209226900565938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17209227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490b60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342a4ef0; to 'JaxprTracer' at 0x7ffa342a5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e4eecb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16299275875386335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16299276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284c20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd021fa10; to 'JaxprTracer' at 0x7ffcd021fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x438ea5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15405928213707526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15405928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fc690>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107970b0; to 'JaxprTracer' at 0x7ff9f00f8b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dd5fbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.19157392312008872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19157392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9be0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8587c0; to 'JaxprTracer' at 0x7ff70e85b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84f79000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16355173331828418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16355173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901493f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7044d4e0; to 'JaxprTracer' at 0x7ffc7044fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8766c8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12850319909476568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1285032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7c60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008db70; to 'JaxprTracer' at 0x7ff9f008c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d64e860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.15357081760551586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15357082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6500>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f6160; to 'JaxprTracer' at 0x7ffbd06f7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d639440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18046307806762546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18046308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9cd0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05cf2e0; to 'JaxprTracer' at 0x7ff9d05cc450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56bb3c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.16222778254402262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16222778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250500>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70295710; to 'JaxprTracer' at 0x7ffc70295fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bf2e9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1692859562202304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16928596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3fa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700afd30; to 'JaxprTracer' at 0x7ffa700ae160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c70f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15664754766612696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15664755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e850>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102968e0; to 'JaxprTracer' at 0x7ff71634bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87642720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15197247497224295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15197247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9ef0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062f830; to 'JaxprTracer' at 0x7ffc3062f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x565e4650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16056389103474902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16056389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684980>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104e1670; to 'JaxprTracer' at 0x7ffc104e17b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x670820d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.601264036169733
47, epoch_train_loss=3.601264036169733
Epoch 48
Epoch 48 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.2627954671350587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.26279547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d3790; to 'JaxprTracer' at 0x7ffbb00d3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17084570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14209603458967857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14209603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d25c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b35a250; to 'JaxprTracer' at 0x7ff70b35a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e99a1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07272821079303071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07272821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6b30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7156635b0; to 'JaxprTracer' at 0x7ff715663420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68775100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.12409323775031077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12409324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b2b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900dd210; to 'JaxprTracer' at 0x7ffa900dca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2287b290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15246094117373202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15246094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05099c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10680e50; to 'JaxprTracer' at 0x7ffc10681620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645765d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17249086929456625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17249087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285830>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50719800; to 'JaxprTracer' at 0x7ffb50718680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf42860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16018033271151555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16018033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c890>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70088180; to 'JaxprTracer' at 0x7ffb7008b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e110b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3152554753195626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31525548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013db20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07104a0; to 'JaxprTracer' at 0x7ff9f0710630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62e450f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14397117908622167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14397118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fd20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a5940; to 'JaxprTracer' at 0x7ffab02a67a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42210140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1669997138184283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16699971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903ca0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900af790; to 'JaxprTracer' at 0x7ffa900aecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e6201e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.46042659377286516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46042659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f820>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00443010; to 'JaxprTracer' at 0x7ffb004403b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x209b91f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16213402162149404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16213402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2940>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037da30; to 'JaxprTracer' at 0x7ff70eccab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d606880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16685422783318848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16685423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7b70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ec130; to 'JaxprTracer' at 0x7ffa107ee3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39588970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17956777457607817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17956777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124b30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ec4f0; to 'JaxprTracer' at 0x7ffbb02ef330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2bed80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17602307073130233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17602307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a390>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06e3240; to 'JaxprTracer' at 0x7ffa90759cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60876a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16672501126761355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16672501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6340>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142ad760; to 'JaxprTracer' at 0x7ff7142acc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968d4e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1576774800829016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15767748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589f50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2d0f920; to 'JaxprTracer' at 0x7ffb10761d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa30791b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.24150730648977536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24150731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bbf0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb104040e0; to 'JaxprTracer' at 0x7ffb10405b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bd8eeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1682311102446957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16823111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d7b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904764d0; to 'JaxprTracer' at 0x7ffb382da8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79013650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1438436917025795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14384369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191f90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901658f0; to 'JaxprTracer' at 0x7ffc307cfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c7ce220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3926380700256184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39263807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bfd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044f510; to 'JaxprTracer' at 0x7ff70e835940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6243e690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2023755554738047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20237556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9870>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8a84a0; to 'JaxprTracer' at 0x7ff70e8a8310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3476ea60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.17543883437817925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17543883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289a40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e85bb50; to 'JaxprTracer' at 0x7ff70e859350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8869fe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17346035029845075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17346035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101247f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107c1440; to 'JaxprTracer' at 0x7ffa107c1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a7c960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16041115322940896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16041115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107709b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100a9f30; to 'JaxprTracer' at 0x7ffc100a9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef41b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15560596552852468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15560597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032f0f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423fe20; to 'JaxprTracer' at 0x7ffa3423c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2df470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16444352323944195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16444352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70102840; to 'JaxprTracer' at 0x7ffa70102980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x670691b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.3137493373076685
48, epoch_train_loss=3.3137493373076685
Epoch 49
Epoch 49 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-3.791407847399646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.79140785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c89e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011f2e0; to 'JaxprTracer' at 0x7ff9d011e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1513ac90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1466846952666841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1466847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff9b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3041d0; to 'JaxprTracer' at 0x7ff70b307ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3008c6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07478874867367503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07478875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7e90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7169413f0; to 'JaxprTracer' at 0x7ff716943470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9955c890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1564455941952266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15644559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca8d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0210d60; to 'JaxprTracer' at 0x7ffab02110d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x409af10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15645065840463876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15645066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065aed0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00218090; to 'JaxprTracer' at 0x7ffb0021b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48df170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.18957884845705766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18957885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251e60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907ca390; to 'JaxprTracer' at 0x7ffa907c9490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xba78930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.17351269782358336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1735127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086513a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0143240; to 'JaxprTracer' at 0x7ffbb0140b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6a1bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.4546907272181089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.45469073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086535b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5ef20; to 'JaxprTracer' at 0x7ff716a5f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a6147a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14816333729786468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14816334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286620>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd1760; to 'JaxprTracer' at 0x7ff7a2cd19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x842c5c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.17133143832386238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17133144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9670>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed5d00; to 'JaxprTracer' at 0x7ff7a2ed4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79253070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.9503020650767197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95030207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9020>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160b0db0; to 'JaxprTracer' at 0x7ff7160b2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89ad65d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16646470693286444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16646471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfeb70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059a8e0; to 'JaxprTracer' at 0x7ffa50449530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc8dbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-1.521185802822327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.5211858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6be0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90328db0; to 'JaxprTracer' at 0x7ffb50719e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x964be910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.18419670615846392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18419671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7e10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069e6b0; to 'JaxprTracer' at 0x7ffb5069ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0c2ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.18065255308609846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18065255, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065b740>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05def70; to 'JaxprTracer' at 0x7ff70ea98130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98dabf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17106131573989375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17106132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e390>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70479850; to 'JaxprTracer' at 0x7ffc7047b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35930750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1619544464727245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16195445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904912f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03ccae0; to 'JaxprTracer' at 0x7ff9f03cf6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95f2f850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.31255655738745963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31255656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0c20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a2430; to 'JaxprTracer' at 0x7ffb004a3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32eaac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1773664698891711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17736647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a5440; to 'JaxprTracer' at 0x7ffc30324220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50de13c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1668156733857363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16681567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509b50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a10680; to 'JaxprTracer' at 0x7ff7a2a136a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d50c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8240449802211325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82404498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6a30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0187ba0; to 'JaxprTracer' at 0x7ff9d01845e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf850ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.23373520059802694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2337352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f16d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30508950; to 'JaxprTracer' at 0x7ffc30509710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3606f760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1998422072929133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19984221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e8b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e88fce0; to 'JaxprTracer' at 0x7ffb10328590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27132180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17802085892926015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17802086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6c30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a29e7b00; to 'JaxprTracer' at 0x7ff7a29e60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a72cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16489033029798145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16489033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda8d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05319e0; to 'JaxprTracer' at 0x7ffbf0532ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99ecf5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15993519239829862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15993519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2ba0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423d260; to 'JaxprTracer' at 0x7ffa3423fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b798bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16901274020236584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16901274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbbf0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501a8360; to 'JaxprTracer' at 0x7ffb501a83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723b1dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.103496100937632
49, epoch_train_loss=4.103496100937632
Epoch 50
Epoch 50 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1726980477100595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17269805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588230>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90297150; to 'JaxprTracer' at 0x7ffc90297240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66cda7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14285092667034063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14285093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473ee80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10150360; to 'JaxprTracer' at 0x7ffb10153bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38055f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07157119020962821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07157119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a47d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012c540; to 'JaxprTracer' at 0x7ff9f012ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2a16490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11562039476742475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11562039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149750>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902031f0; to 'JaxprTracer' at 0x7ffc902003b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e53f8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1524592116581544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15245921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056a50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905158f0; to 'JaxprTracer' at 0x7ffb90517ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88faaf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1723896017240141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1723896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e100>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ba7a0; to 'JaxprTracer' at 0x7ffc100bbf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b552c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16377660178925052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1637766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252910>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160b28e0; to 'JaxprTracer' at 0x7ff7160b0e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d0de900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.20046865007381162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20046865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f0d10; to 'JaxprTracer' at 0x7ffb900f0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41c321d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14178265953658073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14178266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659310>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a5440; to 'JaxprTracer' at 0x7ffab02a6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989ea9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16670299966645988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.166703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903f20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f2610; to 'JaxprTracer' at 0x7ffa902f0900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41cc5280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.49553435772804044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49553436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858abe0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf007bc40; to 'JaxprTracer' at 0x7ffcf0078540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87508b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16142502510654771, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16142503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473da10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0696110; to 'JaxprTracer' at 0x7ffbf0695620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6743dbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16657422164312313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16657422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a52c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00438950; to 'JaxprTracer' at 0x7ffa90758f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f4619f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1799089093011392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17990891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107705e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb031c2c0; to 'JaxprTracer' at 0x7ffbb031dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35668770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1758568346812176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17585683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056640>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08624db0; to 'JaxprTracer' at 0x7ffb08624fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d321280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16655164697567773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16655165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286fe0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7066b3d0; to 'JaxprTracer' at 0x7ffc70668c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x695ba8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15670374494785316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15670374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c610>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151188b0; to 'JaxprTracer' at 0x7ff71511ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8456fd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.19294742636193885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19294743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191af0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714818950; to 'JaxprTracer' at 0x7ffb0865dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405c3a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16746163341968454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16746163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700dcef0; to 'JaxprTracer' at 0x7ffa70130db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85cde6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.14291704787544401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14291705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126cb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0202f20; to 'JaxprTracer' at 0x7ffcd0203fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69fa9560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.456487696752363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4564877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0fb20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714591850; to 'JaxprTracer' at 0x7ff714591940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58fd9530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.20035753996921654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20035754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502340e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7047ba10; to 'JaxprTracer' at 0x7ffc7047abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da797a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.17923647213897298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17923647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0640>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05ce250; to 'JaxprTracer' at 0x7ff9d05ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dd9ca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17328589410606327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17328589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb6d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704c4c20; to 'JaxprTracer' at 0x7ffb704c4f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602c2800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15875611278647414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15875611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff9f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5040d8a0; to 'JaxprTracer' at 0x7ffa5040ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8afcf100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15438804580727666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15438805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd490>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf036e980; to 'JaxprTracer' at 0x7ffcf036f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b4a240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16298930399525466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1629893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f3b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1016db70; to 'JaxprTracer' at 0x7ffb1016d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55369800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.4841701159161813
50, epoch_train_loss=3.4841701159161813
Epoch 51
Epoch 51 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15292518187782794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15292518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0560>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd048b1a0; to 'JaxprTracer' at 0x7ffa10599ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd771a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13973227920699213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13973228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd5d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb105997b0; to 'JaxprTracer' at 0x7ffb1059ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92523920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06914795078489805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06914795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772030>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021d3f0; to 'JaxprTracer' at 0x7ffc9021e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32c60280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10202725662156177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10202726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127600>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eaf1300; to 'JaxprTracer' at 0x7ff70eaf1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65444c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1497515830497427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14975158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659df0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f007c6d0; to 'JaxprTracer' at 0x7ff9f007c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5446a7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16872756585828697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16872757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032d2b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a1710; to 'JaxprTracer' at 0x7ffb700a2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48a95980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1551590076893899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15515901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013ce70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01fa430; to 'JaxprTracer' at 0x7ff9d01f9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9412d7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16136057554612498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16136058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58231030; to 'JaxprTracer' at 0x7ffc58231760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95f05560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13704827215640783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13704827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508e40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7010be20; to 'JaxprTracer' at 0x7ffbf02fbf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57612ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1634474267939446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16344743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3030>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02e53a0; to 'JaxprTracer' at 0x7ffbd02e49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3a38dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1528208685909287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15282087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0910>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06abc90; to 'JaxprTracer' at 0x7ffbd06abf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a52b9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.15784965843009202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15784966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc570>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906a09a0; to 'JaxprTracer' at 0x7ff7160b1580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f9241a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16329856720118036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16329857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387a2cf0; to 'JaxprTracer' at 0x7ffb387a3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x481341b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17706553068925848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17706553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b940>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90317060; to 'JaxprTracer' at 0x7ffb90316fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73d90fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17251852028201017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17251852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3650>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04376a0; to 'JaxprTracer' at 0x7ffc10680a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dfae9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16339299998495904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.163393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032feb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0705c60; to 'JaxprTracer' at 0x7ffab0705760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30df9a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15293668427480442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15293668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652640>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081cd7b0; to 'JaxprTracer' at 0x7ffb081cfd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ec63940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15911200457276128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.159112, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057270>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704c4180; to 'JaxprTracer' at 0x7ffc704c7150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x887ee3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16356587289193286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16356587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a0f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107be480; to 'JaxprTracer' at 0x7ffb107bd670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a375be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12595835723280635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12595836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2cb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704b3510; to 'JaxprTracer' at 0x7ffc704b2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31680560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.16696454759682292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16696455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a72f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011f880; to 'JaxprTracer' at 0x7ffbf011fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7689b170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.17750080230806614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1775008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba8d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f01d0; to 'JaxprTracer' at 0x7ffbd04f0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf6816a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.16125891998886643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16125892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6b50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582a20c0; to 'JaxprTracer' at 0x7ffc582a0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ea3d390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1698822338795602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16988223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a650>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7016da30; to 'JaxprTracer' at 0x7ffa7016c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8430d250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15424857457639532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15424857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f61d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de110; to 'JaxprTracer' at 0x7ffa107a3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ad7bb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15038611896621404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15038612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a010>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f4400; to 'JaxprTracer' at 0x7ffc306f6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53565e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15856986589546856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15856987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686140>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501bb470; to 'JaxprTracer' at 0x7ffa501bb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55514f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.6115262775848826
51, epoch_train_loss=3.6115262775848826
Epoch 52
Epoch 52 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1448602200893724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14486022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fc810>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7047a3e0; to 'JaxprTracer' at 0x7ffa900ad620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c54d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13747763589213693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13747764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142ac810; to 'JaxprTracer' at 0x7ff7142ae2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ce4570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06766798590399568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06766799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f53e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1060da80; to 'JaxprTracer' at 0x7ffb1060d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x476d2c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09355726619869105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09355727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d7c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00fa390; to 'JaxprTracer' at 0x7ff9f00f88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x525771a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1484384787628221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14843848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07448b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707343b0; to 'JaxprTracer' at 0x7ffb70735300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fb0aa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16760703531891663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16760704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a350>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347033d0; to 'JaxprTracer' at 0x7ffa34703d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b0a6cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1490448350794784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14904484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0070>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3047c810; to 'JaxprTracer' at 0x7ffc3047d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6188ced0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15986481287852827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15986481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06abce0; to 'JaxprTracer' at 0x7ffbd06abd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b6b2ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13419838520752575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13419839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e4b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0203ab0; to 'JaxprTracer' at 0x7ffcb0203380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11e4d9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16177701962555624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16177702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903370>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102cb420; to 'JaxprTracer' at 0x7ffa102c91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa044fc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(0.08430357194494899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.08430357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd030>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a29e7fb0; to 'JaxprTracer' at 0x7ff7a29e7830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x893273d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.15591982427513448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15591982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285940>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50742890; to 'JaxprTracer' at 0x7ffb50740c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24e71620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16161382894175508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16161383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7510>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7d080; to 'JaxprTracer' at 0x7ff715e7ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551ed2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17579506087848176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17579506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772870>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714839e90; to 'JaxprTracer' at 0x7ff71483bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3d340d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17081513033002865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17081513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07464b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0556660; to 'JaxprTracer' at 0x7ffab0555440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e8b1640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16177787880953384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16177788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901498e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc0450; to 'JaxprTracer' at 0x7ff70efc3970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a8f400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1508382389042005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15083824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f75f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b307470; to 'JaxprTracer' at 0x7ff70b306610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b2296b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15748016029721598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15748016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252190>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702d9260; to 'JaxprTracer' at 0x7ffc9021e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61faecd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16186075724638735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16186076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506586a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04bf420; to 'JaxprTracer' at 0x7ffbf04bd4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f717150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11525632012643845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11525632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06caeb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a3510; to 'JaxprTracer' at 0x7ffb004a23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f41cef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.039899483712309836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03989948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d12f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342653a0; to 'JaxprTracer' at 0x7ffa34264360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b2d6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1637296780976658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16372968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502363e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714c35800; to 'JaxprTracer' at 0x7ff714c35c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88c9d510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1487660666298628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14876607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858ab70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb24f40; to 'JaxprTracer' at 0x7ff70eb246d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x333ca230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.16768808218728506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16768808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770cb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702940e0; to 'JaxprTracer' at 0x7ffc70296d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d1cb1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15160622118448983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15160622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8390>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02004f0; to 'JaxprTracer' at 0x7ffcd0203330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55c06d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.14811646517847538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14811647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748870>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00d9fd0; to 'JaxprTracer' at 0x7ffbd00da7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33a4ade0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15601202475026993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15601202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904918a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061e2a0; to 'JaxprTracer' at 0x7ffbd02e68e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa47be190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.716711281227999
52, epoch_train_loss=3.716711281227999
Epoch 53
Epoch 53 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14666289913587444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1466629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902681f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90727ba0; to 'JaxprTracer' at 0x7ffc90726660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66259a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13737915673431214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13737916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241600>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a139c0; to 'JaxprTracer' at 0x7ff7a2a11c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33115590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06719974406733537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06719974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6380>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707df880; to 'JaxprTracer' at 0x7ffc707df2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64600870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09083276834670645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09083277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8ed0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70671d50; to 'JaxprTracer' at 0x7ffa706715d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x891c2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.14858771517248343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14858772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301913e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038ede0; to 'JaxprTracer' at 0x7ffb1038d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f272760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16801187339918358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16801187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02784f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902cec00; to 'JaxprTracer' at 0x7ffb902cc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c939a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.14774698771611725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14774699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014bbb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38535530; to 'JaxprTracer' at 0x7ffb38535440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80064b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16013674593416102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16013675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014bce0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07dd4e0; to 'JaxprTracer' at 0x7ffcb07dfdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6216c5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13334965857595404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13334966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07479d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083f0e50; to 'JaxprTracer' at 0x7ffb083f0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x156db6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16178648872963367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16178649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057920>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e5dfd0; to 'JaxprTracer' at 0x7ff715e5e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1392f510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(0.13106876499972295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.13106876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268450>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01071a0; to 'JaxprTracer' at 0x7ffbb0107f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f6e2750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1557326074597446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15573261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243e90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064e7f0; to 'JaxprTracer' at 0x7ff9d064c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83162280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16160808389423625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16160808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7490>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70682f20; to 'JaxprTracer' at 0x7ffcd0437240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x745385c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17615592879053008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17615593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e9f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71568c310; to 'JaxprTracer' at 0x7ff71568f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ad0bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17084187764067355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17084188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190170>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34562d40; to 'JaxprTracer' at 0x7ffa34560e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x877423a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.161804943180344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16180494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d7a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153fb0; to 'JaxprTracer' at 0x7ffa34563420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44768410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15051882546129483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15051883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509c00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714814400; to 'JaxprTracer' at 0x7ff714817c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cfd8f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15749248250508027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15749248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2e60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71613f650; to 'JaxprTracer' at 0x7ff71613fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9482d3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16186218766815694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16186219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307cc450; to 'JaxprTracer' at 0x7ffb10543c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1398b060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11437226475156353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11437226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105a10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed716c0; to 'JaxprTracer' at 0x7ff70ed71350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956c6e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.07688338620635388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.07688339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b7d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0747a60; to 'JaxprTracer' at 0x7ffbb0746f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3264db30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.16353220957673908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16353221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfdf80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582d6110; to 'JaxprTracer' at 0x7ffc582d4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cbb38d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.145427383840229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14542738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101245c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702fdc10; to 'JaxprTracer' at 0x7ff716b3e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcf6d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.16754743060063634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16754743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065eec0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34267f60; to 'JaxprTracer' at 0x7ffa342653f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356ebdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1509627429803564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15096274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8250>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7163e76a0; to 'JaxprTracer' at 0x7ff7163e7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ca08d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1476860480146227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14768605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fe10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107385e0; to 'JaxprTracer' at 0x7ffb700a9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa26cb070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15545426899985182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15545427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a69d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00261440; to 'JaxprTracer' at 0x7ffb002618f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa26a8730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.7366250427618737
53, epoch_train_loss=3.7366250427618737
Epoch 54
Epoch 54 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15073958674298576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15073959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f78a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00b6980; to 'JaxprTracer' at 0x7ffcf00b6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ee83c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1386962451467519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13869625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3e60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0612390; to 'JaxprTracer' at 0x7ff9f06124d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75a71d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0675216813236804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06752168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ef20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d1120; to 'JaxprTracer' at 0x7ffbb00d3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x175baa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09295582538639906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09295583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4660>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a7d030; to 'JaxprTracer' at 0x7ff7a2a7e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa39b8420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.149872951048164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14987295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d610>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714edc900; to 'JaxprTracer' at 0x7ffa50171940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x617b8980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16959793561581474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16959794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0200>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0413a60; to 'JaxprTracer' at 0x7ffcf0410db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4262a4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.15046748499056367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15046748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278e70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387a2110; to 'JaxprTracer' at 0x7ffb387a1350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5416820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.161704788201542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16170479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278220>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90293a10; to 'JaxprTracer' at 0x7ffb90291800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1319ef40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13405845455841298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13405845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193050>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90641670; to 'JaxprTracer' at 0x7ffc90643a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ebfb480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1631026876279475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16310269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903610>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062c680; to 'JaxprTracer' at 0x7ffc3062eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76578540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015945094216271116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01594509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f78f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077ea70; to 'JaxprTracer' at 0x7ffa1077ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x494ba9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.15689962985932265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15689963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d34f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06c1760; to 'JaxprTracer' at 0x7ffbb06c0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ff82a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1629094833488985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16290948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c0a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902cda80; to 'JaxprTracer' at 0x7ffb902cd080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696167f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.177771192373752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17777119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241ba0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90253ba0; to 'JaxprTracer' at 0x7ffb00439df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f810050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17223049872278892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1722305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c970>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0294540; to 'JaxprTracer' at 0x7ffc100a9440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a71b610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1631117806405728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16311178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d040d530; to 'JaxprTracer' at 0x7ff9d040d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d552b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1515844610150444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15158446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3320>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30510900; to 'JaxprTracer' at 0x7ff7168f8db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58211130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15877644744847225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15877645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013df40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707dcef0; to 'JaxprTracer' at 0x7ffc707dea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10e74420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16318875945243885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16318876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cbca0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e88f600; to 'JaxprTracer' at 0x7ff70e88d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e1106b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1224660116064234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12246601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235e00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa104f20c0; to 'JaxprTracer' at 0x7ffa104f18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28907d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07198921478196406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07198921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71610f9c0; to 'JaxprTracer' at 0x7ff71610c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x882f3df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1754148226529484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17541482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb890>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd077d940; to 'JaxprTracer' at 0x7ffcd077de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92094170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1514335145615583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15143351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd030>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc585d0f90; to 'JaxprTracer' at 0x7ff71686f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60714b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.16902613865555768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16902614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102403c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b40e0; to 'JaxprTracer' at 0x7ffc902b7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x677cfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15188252785737322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15188253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021ecc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04bcef0; to 'JaxprTracer' at 0x7ffbf04beac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e8a96f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.148686701056519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1486867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771270>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344b1350; to 'JaxprTracer' at 0x7ffa344b3fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47fbfa10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15646443610376576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15646444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbe30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387c2610; to 'JaxprTracer' at 0x7ffb387c3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e067a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.659841485224094
54, epoch_train_loss=3.659841485224094
Epoch 55
Epoch 55 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15553342120102198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15553342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d8f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0203a10; to 'JaxprTracer' at 0x7ffcb02032e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22e29af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14067074098058524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14067074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251bf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078afc0; to 'JaxprTracer' at 0x7ff9f0789da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ae4a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0682100769261899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06821008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652060>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907a3970; to 'JaxprTracer' at 0x7ffc907a32e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32e0050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09726388841615331, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09726389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9fd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10762390; to 'JaxprTracer' at 0x7ffb107624d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x111b2470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15167794829919773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15167795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236cf0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05fdfd0; to 'JaxprTracer' at 0x7ffcb05fc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956e3780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17172337742090696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17172338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301924d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f8220; to 'JaxprTracer' at 0x7ffc302f8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x349a5aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1574168164209721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15741682, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279000>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3858eb10; to 'JaxprTracer' at 0x7ffb3858e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ea8dd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16391441687551825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16391442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714590810; to 'JaxprTracer' at 0x7ff714592700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bb07a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13547936068348784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13547936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9e50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a3ab0; to 'JaxprTracer' at 0x7ffcd07a0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20c27c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16502660527604737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16502661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6f00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa103179c0; to 'JaxprTracer' at 0x7ffa10315170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81686750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.13840924750091868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13840925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491ad0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f3d440; to 'JaxprTracer' at 0x7ff9d05f33d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5540ee30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.15869638870506067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15869639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253ab0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50719030; to 'JaxprTracer' at 0x7ffb507195d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a1f1c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1648165416946878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16481654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652280>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034f2e0; to 'JaxprTracer' at 0x7ffa7034db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x444b7170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17995620050294295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1799562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286cb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf002f560; to 'JaxprTracer' at 0x7ffbf02e2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b5d8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17426099481324575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17426099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502343c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302bb420; to 'JaxprTracer' at 0x7ffc302ba570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4058a380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16501080039975236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1650108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506585f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151dede0; to 'JaxprTracer' at 0x7ffbf0080720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f34bae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15329200553407854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15329201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b840>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10190f90; to 'JaxprTracer' at 0x7ffb10191940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2557eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1606418846692752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16064188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f11c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30327970; to 'JaxprTracer' at 0x7ffc90623740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64ac7d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16513610474909451, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1651361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cb50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900aea70; to 'JaxprTracer' at 0x7ffa900acea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3493dec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12639373788649086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12639374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01044c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b305bc0; to 'JaxprTracer' at 0x7ff70b305620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ee1af00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.17084281003389234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17084281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0cbe0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0200e00; to 'JaxprTracer' at 0x7ffcd0202930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680c0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.17971196179226082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17971196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc0c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5019ca40; to 'JaxprTracer' at 0x7ffb5019e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65eada60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.16100055938504892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16100056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a2c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06dc680; to 'JaxprTracer' at 0x7ffbb06dce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99edabe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17127704773345234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17127705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285010>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b9bdd0; to 'JaxprTracer' at 0x7ff715b99940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602f45c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15352868074127218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15352868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f66b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00fa7a0; to 'JaxprTracer' at 0x7ff9f00f9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47146bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.150350340187151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15035034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3910>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0424ea0; to 'JaxprTracer' at 0x7ffcb04271a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f29910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15819611350650556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15819611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8320>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714b10680; to 'JaxprTracer' at 0x7ff714b107c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa04db8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.605949588981379
55, epoch_train_loss=3.605949588981379
Epoch 56
Epoch 56 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15906355841839195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15906356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2300>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a2e30; to 'JaxprTracer' at 0x7ffb700a3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x742fd3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14346195880637097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14346196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687ac0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7044f650; to 'JaxprTracer' at 0x7ffc7044e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f77ce50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06906704879425046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06906705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ea40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707c2c50; to 'JaxprTracer' at 0x7ffc707c18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x926803e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10186038756066511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10186039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01054d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012c810; to 'JaxprTracer' at 0x7ff9f012c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a279800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15372034640745094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15372035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d1a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302b9cb0; to 'JaxprTracer' at 0x7ffc302b9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f43cd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17409915748586077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17409916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904914d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034e700; to 'JaxprTracer' at 0x7ffa7034fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17655a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16097607859341853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16097608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190b80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90291030; to 'JaxprTracer' at 0x7ffb902911c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c794670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1662356341627721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16623563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301917a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7008aca0; to 'JaxprTracer' at 0x7ffb70088130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37108f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13721889017334785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13721889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234f40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0494590; to 'JaxprTracer' at 0x7ffcb0494e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98aa1610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16722778067831792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16722778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903680>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10263ba0; to 'JaxprTracer' at 0x7ffc10260270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ca74190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.14517310379917986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1451731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1980>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026e110; to 'JaxprTracer' at 0x7ffcb026f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa27dc4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16078959980021174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1607896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684650>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855e700; to 'JaxprTracer' at 0x7ffb3855ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f52210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1670198062455047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16701981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e5a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f9b20; to 'JaxprTracer' at 0x7ffc302f8b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15500d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.18240916795965564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18240917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021fd30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb007808b0; to 'JaxprTracer' at 0x7ffb00782020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc44ee10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17660496013117888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17660496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cf70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306fc180; to 'JaxprTracer' at 0x7ffc300cdfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x353ad290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16719589408134525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16719589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014aba0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9075b7e0; to 'JaxprTracer' at 0x7ffc9075ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84cf23e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15530296663108642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15530297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032fdf0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504edb20; to 'JaxprTracer' at 0x7ffb504ee890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ae299b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.16278468640092122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16278469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bb40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30708400; to 'JaxprTracer' at 0x7ffc30708130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86513d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1673810688249858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16738107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8a40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423c1d0; to 'JaxprTracer' at 0x7ffa3423de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d818d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12859754336776147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12859754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240800>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05731a0; to 'JaxprTracer' at 0x7ffa90047600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1bc5240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1773895341159422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17738953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902690b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715743290; to 'JaxprTracer' at 0x7ff7157420c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc525380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18250583776619478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18250584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589aa0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702ff5b0; to 'JaxprTracer' at 0x7ffb10542b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6749660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1631885321686303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16318853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4040>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00a70b0; to 'JaxprTracer' at 0x7ffbd00a5ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88918680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1738315717727676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17383157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bfe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d02c0; to 'JaxprTracer' at 0x7ffb900d0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76524710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1555140961173872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1555141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848c710>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06dce00; to 'JaxprTracer' at 0x7ffbb06de930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f1150e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15232077046651765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15232077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fdd00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70131e40; to 'JaxprTracer' at 0x7ffa70133150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80bc2410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16031437607111026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16031438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10471f30; to 'JaxprTracer' at 0x7ffb703436a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x670837f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.592780377461166
56, epoch_train_loss=3.592780377461166
Epoch 57
Epoch 57 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1615095299075554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16150953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d19b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011e2f0; to 'JaxprTracer' at 0x7ff9d011cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a2065f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14673321824080962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14673322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f880>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd031a340; to 'JaxprTracer' at 0x7ffbd031b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32dfb020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07007302557345772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07007303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702899c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1db600; to 'JaxprTracer' at 0x7ff70c1d8ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10a2f8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10493686433093455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10493686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589af0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067d080; to 'JaxprTracer' at 0x7ffcb067c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8277e570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1559914314235074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15599143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca5d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306fe930; to 'JaxprTracer' at 0x7ffc306ff3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x317f6730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17669984943238065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17669985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502377e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71616a980; to 'JaxprTracer' at 0x7ff7161682c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a09de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16333564086927732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16333564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193460>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715410400; to 'JaxprTracer' at 0x7ff7154137e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x236dfee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16874772897356935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16874773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192240>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704e71a0; to 'JaxprTracer' at 0x7ffc704e5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x312238d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1392472409470349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13924724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490360>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02aecf0; to 'JaxprTracer' at 0x7ffcd02acea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6300ee90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16967486495125791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16967486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed81b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06eb150; to 'JaxprTracer' at 0x7ffbd06e91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5066b710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.14831156176060972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14831156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cbdc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2f2fc0; to 'JaxprTracer' at 0x7ff70b2f37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4363dba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1631541578914466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16315416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d4e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10407b50; to 'JaxprTracer' at 0x7ffb10406750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28efc880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16950526389063006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16950526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b3e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e6700; to 'JaxprTracer' at 0x7ffb382e7f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x106877b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.18511215054859895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18511215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286f90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1011d4e0; to 'JaxprTracer' at 0x7ffc1011c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c82f440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17923584435359755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17923584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243f50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71569b4c0; to 'JaxprTracer' at 0x7ff71569a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4682d8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16965351653491378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16965352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6c80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06f7010; to 'JaxprTracer' at 0x7ffbb06f7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e97d890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1575858218216265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15758582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771fa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078fec0; to 'JaxprTracer' at 0x7ffbb044eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1b4dbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1651898394324578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16518984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e440>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0718ef0; to 'JaxprTracer' at 0x7ffbd071b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55cc3830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16988963477295052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16988963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014aaf0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072ed90; to 'JaxprTracer' at 0x7ff71453b420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88715be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1310071319399054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13100713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f340>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30513a60; to 'JaxprTracer' at 0x7ffc305101d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df1b8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.18454134603115802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18454135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01041a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0186700; to 'JaxprTracer' at 0x7ff9d0187bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e1f0ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18566122172630548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18566122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc8e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702d8d10; to 'JaxprTracer' at 0x7ffc702d9da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c8ab3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1656301124996379, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16563011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c220>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423fab0; to 'JaxprTracer' at 0x7ffa104f3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cbe86e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17663244200457287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17663244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284080>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70403e20; to 'JaxprTracer' at 0x7ffa704031f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88b00e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15779896616253458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15779897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906873a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a11300; to 'JaxprTracer' at 0x7ff7a2a11ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f592ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15456172451160674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15456172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4a20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b9afc0; to 'JaxprTracer' at 0x7ff9f00f9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc361f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16289828730457848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16289829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0bd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900fb510; to 'JaxprTracer' at 0x7ffb900fb380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b4a960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.579663423188023
57, epoch_train_loss=3.579663423188023
Epoch 58
Epoch 58 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16397988339545938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16397988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb6e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0770fe0; to 'JaxprTracer' at 0x7ff9f07715d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30cb0840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1489703112705653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14897031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0bc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05649a0; to 'JaxprTracer' at 0x7ff9f0566c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539c7670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07121279266969072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07121279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02873f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd021fc90; to 'JaxprTracer' at 0x7ffcd021fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1261b7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10865644354837273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10865644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0746eb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045d120; to 'JaxprTracer' at 0x7ffcd045fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c71dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15847693444826816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15847693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8280>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9011b880; to 'JaxprTracer' at 0x7ffa9011ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2eb50280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17950509854833027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1795051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c89c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e62a0; to 'JaxprTracer' at 0x7ffb382e7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448ef930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16605383874279303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16605384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235600>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b35bc90; to 'JaxprTracer' at 0x7ff70b358090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a573e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17141042253702474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17141042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236ca0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346ce700; to 'JaxprTracer' at 0x7ffa346cd1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d00d760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14153524850077548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14153525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268720>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5846a110; to 'JaxprTracer' at 0x7ffc584696c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47515140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.17237930492293135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1723793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903790>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7016e750; to 'JaxprTracer' at 0x7ffa7016e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59f599e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.15126643223493566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15126643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bad60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a45e0; to 'JaxprTracer' at 0x7ffcb062a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66db5c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16578706286152317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16578706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3c10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f8270; to 'JaxprTracer' at 0x7ff71594e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ce7d4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.17225384868954352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17225385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02846e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f007f5b0; to 'JaxprTracer' at 0x7ff9f007f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bfe3370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.18806233494742708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18806233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013dbc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd57b0; to 'JaxprTracer' at 0x7ff7a2cd5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e21e450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.18212661032630453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18212661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba3b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b77f60; to 'JaxprTracer' at 0x7ff715b77d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a0cd720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17237024462212067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17237024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a220>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f65670; to 'JaxprTracer' at 0x7ff714f65030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccc4ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.16011084740760173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16011085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cba90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ee2f0; to 'JaxprTracer' at 0x7ffb504ef0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b2cf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1678486732288528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16784867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb420>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0412e80; to 'JaxprTracer' at 0x7ffcd0413830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb46b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.17263502812517642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17263503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385883c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb27dd0; to 'JaxprTracer' at 0x7ff70eb25ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c2f4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.13395504754155338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13395505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d3f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07ebd80; to 'JaxprTracer' at 0x7ff9f07e95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d0a3300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.19369021225918112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19369021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021fb20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90100090; to 'JaxprTracer' at 0x7ffb901030b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x108b6b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18923788908295613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18923789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03debb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0865f2e0; to 'JaxprTracer' at 0x7ff716b3fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e862b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.16839097623014201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16839098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff920>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5f740; to 'JaxprTracer' at 0x7ff9f0704810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57dbbf40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17949532978501406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17949533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c060>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073a5c0; to 'JaxprTracer' at 0x7ffc1073a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c0dd070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1603617133602012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16036171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3620>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10541cb0; to 'JaxprTracer' at 0x7ffb10542750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf84b0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1570507366767759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15705074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1c30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06dca90; to 'JaxprTracer' at 0x7ffbb06ddb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2713d220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16585290772622274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16585291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7220>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34505030; to 'JaxprTracer' at 0x7ffa34504ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723ac700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.5652906472908623
58, epoch_train_loss=3.5652906472908623
Epoch 59
Epoch 59 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1669123892743811, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16691239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6ed0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2d0f830; to 'JaxprTracer' at 0x7ff7a2d0fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e149790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.15140504503203378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15140505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086528d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e5a0cc0; to 'JaxprTracer' at 0x7ff70e5a1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8311a8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07246794671421723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07246795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02514a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344b2ed0; to 'JaxprTracer' at 0x7ffa344b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67fb8f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11073451615574512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11073452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d8e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5844aa70; to 'JaxprTracer' at 0x7ffc5844a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ec6b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.16115724471568352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16115724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242490>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154707c0; to 'JaxprTracer' at 0x7ff7154715d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30fcebd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.18246807530670336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18246808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff7e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06e20c0; to 'JaxprTracer' at 0x7ffbb06e2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67d22d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1698397951214744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1698398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cba10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70340630; to 'JaxprTracer' at 0x7ffb70340db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c38cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17417326305140032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17417326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8b60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686e110; to 'JaxprTracer' at 0x7ff71686eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa01e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14404199407313584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14404199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b82a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102619e0; to 'JaxprTracer' at 0x7ffcf0142b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90391a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.17534287173746532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17534287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032fd40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c1b20; to 'JaxprTracer' at 0x7ffbb04c3e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3285d430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.15442921209932717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15442921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7ad0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714c37920; to 'JaxprTracer' at 0x7ff714c34b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9640f990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16871375212681125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16871375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650ce0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0403470; to 'JaxprTracer' at 0x7ffcb04034c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5dc14b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.17533069223184722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17533069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02507f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e4d60; to 'JaxprTracer' at 0x7ffb382e6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6f87d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1912224316567388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19122243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0110>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10682660; to 'JaxprTracer' at 0x7ffc10680630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d437ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.185260765256913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18526077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241cb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451e7a0; to 'JaxprTracer' at 0x7ffa3451ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35002ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17527397780530007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17527398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7a00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10190cc0; to 'JaxprTracer' at 0x7ffb10190bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x517d88f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.16301708501535128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16301709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193e90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700af4c0; to 'JaxprTracer' at 0x7ffa700ad170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f38cbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.17081364196153823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17081364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490920>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b5710; to 'JaxprTracer' at 0x7ffbd02b6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61d52900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.17540170449738812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1754017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ce90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168be520; to 'JaxprTracer' at 0x7ff7168bcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2bfd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.13796642951397184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13796643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc740>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715661620; to 'JaxprTracer' at 0x7ff7156635b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73320d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2067420896773823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20674209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287190>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0771a80; to 'JaxprTracer' at 0x7ff9f0770270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39d24c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1936715318891867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19367153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284a80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019f0b0; to 'JaxprTracer' at 0x7ffcf019d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x763e2ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.171651177663951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17165118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028aaa0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03e89a0; to 'JaxprTracer' at 0x7ffcd03e9fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288a0440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.18361076322486777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18361076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e440>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03785e0; to 'JaxprTracer' at 0x7ffbb0379710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1929750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16321246501579523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16321247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056170>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00e49f0; to 'JaxprTracer' at 0x7ffbd00e44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c91e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15978865377794563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15978865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745070>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10407600; to 'JaxprTracer' at 0x7ffb10404f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54c0db30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1692820452060689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16928205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106a80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70332610; to 'JaxprTracer' at 0x7ffa70332480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33f86620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.5484525990760005
59, epoch_train_loss=3.5484525990760005
Epoch 60
Epoch 60 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17795910080660374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1779591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca5b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011eb10; to 'JaxprTracer' at 0x7ff9d011e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7569860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.15584209954006176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1558421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7740>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158d20c0; to 'JaxprTracer' at 0x7ff7158d21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2c3ef20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07381343145444136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07381343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0def0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638e4d0; to 'JaxprTracer' at 0x7ff71638d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e9db380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11274058488127903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11274058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684050>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03cc770; to 'JaxprTracer' at 0x7ffc3061a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x559199d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.16427333045199446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16427333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e560>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02028e0; to 'JaxprTracer' at 0x7ffcf0201580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3585b060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.18070875394720193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18070875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8560>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10521a80; to 'JaxprTracer' at 0x7ffa105205e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c8f940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.17987168549242527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17987169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902686a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2aa4360; to 'JaxprTracer' at 0x7ff7a2aa66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50df49b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17575245328275363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17575245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026ad90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e85a250; to 'JaxprTracer' at 0x7ff70e858c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x699c4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14671494729226758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14671495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385881c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70108ae0; to 'JaxprTracer' at 0x7ffb7010b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e13360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.17949736687896745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17949737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9037c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90288f90; to 'JaxprTracer' at 0x7ff714a7a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31befa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.15792102380635212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15792102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca790>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a8a90; to 'JaxprTracer' at 0x7ffb700aa250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4faeac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.17290995095540757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17290995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f57f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9075b0b0; to 'JaxprTracer' at 0x7ffa9075aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e7cc460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.17962390936151063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17962391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f6a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038f560; to 'JaxprTracer' at 0x7ffb1038c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5033b2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.196391956057348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19639196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5690>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30100220; to 'JaxprTracer' at 0x7ffc30102890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42bbd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1885697098400364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18856971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c3b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50192ac0; to 'JaxprTracer' at 0x7ffa901189f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22918cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17902709296951907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17902709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca150>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715898a40; to 'JaxprTracer' at 0x7ff71589bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6771ec90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.16716376861024834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16716377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd620>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107bf4c0; to 'JaxprTracer' at 0x7ffb107bcef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56a0a400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.174946189766504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17494619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240b20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b29aa20; to 'JaxprTracer' at 0x7ff70b29ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9482e980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1784433811817096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17844338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd310>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02acc20; to 'JaxprTracer' at 0x7ffcd02acea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f5da880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.14512903365741794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14512903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289a80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037ed40; to 'JaxprTracer' at 0x7ff9d037dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ab54e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.22722923594981928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22722924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02533a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3304a0; to 'JaxprTracer' at 0x7ff70b333560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98463540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.20134926751720797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20134927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013edf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451cc70; to 'JaxprTracer' at 0x7ff70b333b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51a4b150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.17585750652643461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17585751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286dd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344e0220; to 'JaxprTracer' at 0x7ffa344e36f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21474fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1904635146907063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19046351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086509e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7163e49f0; to 'JaxprTracer' at 0x7ff7163e5d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a512370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16696720748525465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16696721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101240f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716349170; to 'JaxprTracer' at 0x7ff716349490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9323f960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.16337502233441373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16337502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9a60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706cf880; to 'JaxprTracer' at 0x7ffb706cf5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a98940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.17389101583142696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17389102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050ba40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00bb6f0; to 'JaxprTracer' at 0x7ffbb00bb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c42e840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.5236295303100635
60, epoch_train_loss=3.5236295303100635
Epoch 61
Epoch 61 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.20869666099807055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20869666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6a70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ebfb0; to 'JaxprTracer' at 0x7ffbd06ebe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9233cca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.17572235835815356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17572236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca950>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907a0c70; to 'JaxprTracer' at 0x7ffc907a1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdb30a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0752192359704126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07521924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650fc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58655fd0; to 'JaxprTracer' at 0x7ffc58656a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40625bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1157868847012705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11578688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252990>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501ce700; to 'JaxprTracer' at 0x7ff9f078a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x921727b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1686661246671763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16866612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df190>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71610f5b0; to 'JaxprTracer' at 0x7ff71610ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3034b500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1884398867992017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18843989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e62f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902513a0; to 'JaxprTracer' at 0x7ffc90252e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x110fce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.22295415402528845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22295415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902681a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05de520; to 'JaxprTracer' at 0x7ffa701306d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b849ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.18128277317565952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18128277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b6d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053c680; to 'JaxprTracer' at 0x7ffb9053c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52833d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14950872930887185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14950873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca930>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f0cc0; to 'JaxprTracer' at 0x7ffa902f3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ac9db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1884169971909007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.188417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107da0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009dcb0; to 'JaxprTracer' at 0x7ffcf009c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x847d7cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1646453620735217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16464536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4470>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026e8e0; to 'JaxprTracer' at 0x7ffcb026eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8456f500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.18134980290256197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1813498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8da0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072f650; to 'JaxprTracer' at 0x7ffa9072d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ebb060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.18698910124573337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1869891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650eb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714856de0; to 'JaxprTracer' at 0x7ff7148576a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22f94aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.20861301504723687, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20861302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0cd20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584e63e0; to 'JaxprTracer' at 0x7ffc584e6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa784cfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.19359121155669465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19359121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df140>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00473600; to 'JaxprTracer' at 0x7ffb0812f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28acfb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1848339452416248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18483395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385888b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1060ddf0; to 'JaxprTracer' at 0x7ffb1060ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d25c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.17516201309352158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17516201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2a40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714539530; to 'JaxprTracer' at 0x7ff71453a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c42fd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.18251931903066185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18251932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ffc00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03473d0; to 'JaxprTracer' at 0x7ffbb0345f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc8de60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.18787001193915323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18787001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d1f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10543420; to 'JaxprTracer' at 0x7ffb10543bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76605380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1605672132286897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16056721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c410>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58233ce0; to 'JaxprTracer' at 0x7ffc58233600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d3004f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2727501254619306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27275013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685200>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10296160; to 'JaxprTracer' at 0x7ffc10297420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e393b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.21769580840202443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21769581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2e20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011ce50; to 'JaxprTracer' at 0x7ff9d011e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41e82860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.18336060616833727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18336061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013c2d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042f010; to 'JaxprTracer' at 0x7ffc7042d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53257520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.20356472346607882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20356472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d630>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1032a890; to 'JaxprTracer' at 0x7ff9f058a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5071a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.17355244248123325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17355244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b96c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c5c6d0; to 'JaxprTracer' at 0x7ff7a2c5d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e41380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.17017622847013647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17017623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4dc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0696b60; to 'JaxprTracer' at 0x7ffbf06961b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d48d300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.18129893238980235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18129893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d1e30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344dc6d0; to 'JaxprTracer' at 0x7ffa344dcbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99745f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.459833199031094
61, epoch_train_loss=3.459833199031094
Epoch 62
Epoch 62 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3474560622865149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34745606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059b9c0; to 'JaxprTracer' at 0x7ffb704c5800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69b3ba00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.2500801566242834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25008016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4770>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5011bdd0; to 'JaxprTracer' at 0x7ffa50118db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x346a2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07666168946571823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07666169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e980>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705e9c60; to 'JaxprTracer' at 0x7ffa705e8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d73990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.12204341192191612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12204341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc6b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea55c10; to 'JaxprTracer' at 0x7ff70ea57c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cb6e750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.18292783867245166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18292784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90493c30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0745c60; to 'JaxprTracer' at 0x7ffbb0744ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f17f870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.2207591880791611, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22075919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502343b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703cf560; to 'JaxprTracer' at 0x7ffa703ce890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dd40b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.42485595907535967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42485596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7f50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f1fd0; to 'JaxprTracer' at 0x7ff9d05f0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12122660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2067934987220273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2067935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4b90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e85b060; to 'JaxprTracer' at 0x7ff70e8580e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459e1c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.15252132040423133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15252132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df250>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504c2200; to 'JaxprTracer' at 0x7ffa504c28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35026830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.21072476220066882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21072476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903a60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686f5b0; to 'JaxprTracer' at 0x7ff71686d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa65ce500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1779937890101461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17799379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658070>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb017a2a0; to 'JaxprTracer' at 0x7ffbb017b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b66370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.20233000322362157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a74c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06d7100; to 'JaxprTracer' at 0x7ffcb06d5440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x528015a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.20568453349240567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20568453, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d1e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00ecc70; to 'JaxprTracer' at 0x7ff9f00efc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fcbf4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.23452684431752463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23452684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192b20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b76160; to 'JaxprTracer' at 0x7ff715b76de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42c7b210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.2064241654238756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20642417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904910f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a1e40; to 'JaxprTracer' at 0x7ffb700a2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ea13260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1993874895139306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19938749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8180>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90294540; to 'JaxprTracer' at 0x7ffc90297f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d2ccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.19487423993432526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19487424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c88d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904add50; to 'JaxprTracer' at 0x7ffb904ad2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9eb34720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.20391290887048813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20391291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bd50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10599ee0; to 'JaxprTracer' at 0x7ffa1059b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f41bc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.20829157626189218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20829158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6eb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90670fe0; to 'JaxprTracer' at 0x7ff7168945e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x160dd400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.22215800223735668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.222158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d520>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90468810; to 'JaxprTracer' at 0x7ffb90468db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d217760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.44684379763112564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4468438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086510c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02aed40; to 'JaxprTracer' at 0x7ffbf02af600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77a85750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2527111219820718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25271112, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7ca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a13a60; to 'JaxprTracer' at 0x7ffb901645e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696d2f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.20497359820025676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2049736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d19c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10719e90; to 'JaxprTracer' at 0x7ffc10719490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e4a4a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.24222959783214615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2422296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0746010>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714eaca40; to 'JaxprTracer' at 0x7ff714eac540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x765e6c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1849019584529912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18490196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02508f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb086c2980; to 'JaxprTracer' at 0x7ffb086c2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fe81be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.18595457548975775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18595458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772fd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04c9c10; to 'JaxprTracer' at 0x7ffbf04c8bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93c39ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.20356667055089683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20356667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0554b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eca89a0; to 'JaxprTracer' at 0x7ff70ecaa840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc2b110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 3.248381958416247
62, epoch_train_loss=3.248381958416247
Epoch 63
Epoch 63 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6021605696597702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60216057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016c6d0; to 'JaxprTracer' at 0x7ffc1016cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75534500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.3517909076650898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35179091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240770>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061cf90; to 'JaxprTracer' at 0x7ffc7061f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15af53b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07811916679256026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07811917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148400>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855d030; to 'JaxprTracer' at 0x7ffb3855e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c48a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2158211424027011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21582114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7530>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc585d0a90; to 'JaxprTracer' at 0x7ffc585d0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80a8d560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.22586051554302114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22586052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7d20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b6f20; to 'JaxprTracer' at 0x7ffc3050bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45c5db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.27712695268669574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27712695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03decd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064f650; to 'JaxprTracer' at 0x7ff9d064d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d1b03f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9128104689858975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91281047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6e70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902cef20; to 'JaxprTracer' at 0x7ffb902cf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12015e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3180285060085799, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31802851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e52d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0296e30; to 'JaxprTracer' at 0x7ffcf0294d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1200d560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1598282445633465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15982824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8fd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd1490; to 'JaxprTracer' at 0x7ff7a2cd02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153d0160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.2623685336692845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26236853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d19e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e89170; to 'JaxprTracer' at 0x7ff7a2cd0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x521332d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.29453666024212666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29453666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509740>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90703bf0; to 'JaxprTracer' at 0x7ffc907034c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eff2040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.2479757311683238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24797573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240780>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01b8770; to 'JaxprTracer' at 0x7ffcf01ba250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81043980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.2529089631855932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25290896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149720>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1070a430; to 'JaxprTracer' at 0x7ffc10709bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4dec820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2880045030659899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2880045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0540>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02e3ab0; to 'JaxprTracer' at 0x7ffbf02e14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c4aae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.24921012017218194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24921012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e870>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705d3a60; to 'JaxprTracer' at 0x7ffa705d2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fcdda90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.24456221234294248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24456221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd220>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0081fd0; to 'JaxprTracer' at 0x7ffbf0083420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8157e820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.2371318171217709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23713182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156ba2d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70296b60; to 'JaxprTracer' at 0x7ffc70296d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd09880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.2563371517304959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25633715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502348c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58273b00; to 'JaxprTracer' at 0x7ffb9009c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65ea3fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.265294757077044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26529476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492ae0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0410b80; to 'JaxprTracer' at 0x7ffcd0413c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fd34310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6097024276175294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60970243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fad0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ecdb0; to 'JaxprTracer' at 0x7ffa107edee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4081e7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-3.9348466402463456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.93484664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b61b0; to 'JaxprTracer' at 0x7ffbd00b6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ebbb860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4070544564245707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40705446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e040>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1059b600; to 'JaxprTracer' at 0x7ffb1059bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x725afa00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.25781777752653273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25781778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745d20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b4400; to 'JaxprTracer' at 0x7ffcd04b4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73482fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.36643355360250646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36643355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074ab20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02aec50; to 'JaxprTracer' at 0x7ffbf02adf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53590120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.21117342383364618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21117342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506599b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10294db0; to 'JaxprTracer' at 0x7ffc102947c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x183343f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.22223792032720013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22223792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edbe90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021ed40; to 'JaxprTracer' at 0x7ffc9021fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0d0570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.2544033757157447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25440338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd0d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70d51f740; to 'JaxprTracer' at 0x7ffc1030f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64005f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.0988388128890785
63, epoch_train_loss=4.0988388128890785
Epoch 64
Epoch 64 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5114904160901964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51149042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06caff0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3061a750; to 'JaxprTracer' at 0x7ffc306180e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa27735b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.3774246285993977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37742463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d840>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb101109f0; to 'JaxprTracer' at 0x7ffb101114e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9eee7ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.08048187613155873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08048188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1430>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b5030; to 'JaxprTracer' at 0x7ffc906b5800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57d9d140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.18126040875916968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18126041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490030>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10092c50; to 'JaxprTracer' at 0x7ffc10092840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7996f570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3056199220130493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30561992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502364d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34237ce0; to 'JaxprTracer' at 0x7ffa34235120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674b7950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.35444294011583144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35444294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848cbe0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5019d1c0; to 'JaxprTracer' at 0x7ff70e8dabb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a362160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.643343099736825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6433431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125f80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3053d670; to 'JaxprTracer' at 0x7ff9d05f1710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44012390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3866024381144942, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38660244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101271e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c18a0; to 'JaxprTracer' at 0x7ffbb04c0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7409a620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.18235200586987388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18235201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747c70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0075800; to 'JaxprTracer' at 0x7ffcf0076890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d78e9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3381276114395069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33812761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9038c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0450590; to 'JaxprTracer' at 0x7ff7160b02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93196590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.27800175825587825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27800176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8120>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0536890; to 'JaxprTracer' at 0x7ffab05375b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x887aa80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.31690218369120715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31690218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e900>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038eac0; to 'JaxprTracer' at 0x7ffb1038e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3bdf000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3240747832332338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32407478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2eb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306fe660; to 'JaxprTracer' at 0x7ffc90253d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x724b4f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.3617699035101425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3617699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba0e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50152ac0; to 'JaxprTracer' at 0x7ffa50153f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x592e40f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3175616460356711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31756165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9720>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e4270; to 'JaxprTracer' at 0x7ffa700e6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x542ec6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.31291190358979293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3129119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848ca70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70683970; to 'JaxprTracer' at 0x7ffc70680040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d243c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.30119686363844494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30119686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4270>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716894590; to 'JaxprTracer' at 0x7ff7168973d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bd54cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.33423339536232544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3342334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02782f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ce160; to 'JaxprTracer' at 0x7ffc300cd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7381ef20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.3112415687619958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31124157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb430>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045ccc0; to 'JaxprTracer' at 0x7ffcd045cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b1f1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3253284802102565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32532848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906849a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069f8d0; to 'JaxprTracer' at 0x7ffb5069e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e22c910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7165109921660242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71651099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102407d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bcea0; to 'JaxprTracer' at 0x7ffbb06bfec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ee4010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4130343870693226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41303439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7540>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904afdd0; to 'JaxprTracer' at 0x7ffb904af970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e254a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3108928386593191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31089284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fcd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042c590; to 'JaxprTracer' at 0x7ffc7042e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x695a3d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.516340537502837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51634054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251bd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00676a0; to 'JaxprTracer' at 0x7ff9f0065e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5e0afe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2543373719827682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25433737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508d80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90469030; to 'JaxprTracer' at 0x7ff9d0186a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af73040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.27839641556504846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27839642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0fa0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04b9350; to 'JaxprTracer' at 0x7ff70e85a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2729fe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3150718193365639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31507182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d520>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00b93f0; to 'JaxprTracer' at 0x7ff9f00b9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ad2b480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 2.6056068626987727
64, epoch_train_loss=2.6056068626987727
Epoch 65
Epoch 65 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5344629849647455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53446298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda560>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e45e0; to 'JaxprTracer' at 0x7ffbf00e76f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56fabcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.4660318648169284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46603186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652660>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10328310; to 'JaxprTracer' at 0x7ffb10328b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39e3c850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.08853813050702386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08853813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5340>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34726bb0; to 'JaxprTracer' at 0x7ffcf019e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7beaf430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.21574150032837358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2157415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cbe10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716adb420; to 'JaxprTracer' at 0x7ff716ada0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d856470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.4087468827605103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40874688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f4230>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b6700; to 'JaxprTracer' at 0x7ff9f05b79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265dc4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.4463893609871944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44638936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124560>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9075bbf0; to 'JaxprTracer' at 0x7ffa9075b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c15f900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6110461323284146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61104613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e54e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb017b650; to 'JaxprTracer' at 0x7ffbb017b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64dbb180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5146427898976969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51464279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4960>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053c310; to 'JaxprTracer' at 0x7ffb9053eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dc3ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.21521643427902779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21521643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c84b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70130720; to 'JaxprTracer' at 0x7ffa70133f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1db71550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.4378811604064813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43788116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026aa20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7157406d0; to 'JaxprTracer' at 0x7ff715741990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x936f6980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.3625803836537712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36258038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8cd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026e340; to 'JaxprTracer' at 0x7ffcb026fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31eb3960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.40728224773717037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40728225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651a00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072e430; to 'JaxprTracer' at 0x7ffbb046cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77d6bd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.41706919155578764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41706919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f5540>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3079efc0; to 'JaxprTracer' at 0x7ffc3079ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93107170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4591503129283372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45915031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192840>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906a32e0; to 'JaxprTracer' at 0x7ffb906a1620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x542e8930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.4063907497537776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40639075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07453c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c161c60; to 'JaxprTracer' at 0x7ff9f03cc680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54ddc030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.4025227129180303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40252271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124660>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71691dd00; to 'JaxprTracer' at 0x7ff71691d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b78220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.38431248489836023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38431248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848eef0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90044c70; to 'JaxprTracer' at 0x7ffa90047a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4389a160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.43529764188943515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43529764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c790>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa104f20c0; to 'JaxprTracer' at 0x7ffa104f0860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a6e91d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.3898272073310267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38982721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c3d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71591f4c0; to 'JaxprTracer' at 0x7ff71591f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aa4890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.33509615076270516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33509615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e7b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eb241d0; to 'JaxprTracer' at 0x7ff70eb243b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540d9140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6828225031330558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6828225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1750>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706cfb00; to 'JaxprTracer' at 0x7ffb706cfe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e6de2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.5348780084437447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53487801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e310>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0434a40; to 'JaxprTracer' at 0x7ffb1038c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ecfc5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3899491686513913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38994917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684110>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2cebb0; to 'JaxprTracer' at 0x7ff70b2cd260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x769ddf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7121899212478509, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71218992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190fc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8349a0; to 'JaxprTracer' at 0x7ff70e835da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83eb1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3120757675879781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31207577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749230>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02aeac0; to 'JaxprTracer' at 0x7ffcd02af830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f553710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.3516830040685636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.351683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286ac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70617510; to 'JaxprTracer' at 0x7ffc707dc270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4df3fe60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3948431615577072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39484316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bb20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb002224d0; to 'JaxprTracer' at 0x7ffb00222340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5354a510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 2.2253650914091114
65, epoch_train_loss=2.2253650914091114
Epoch 66
Epoch 66 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7944137136830868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79441371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd7d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011d620; to 'JaxprTracer' at 0x7ffbf011d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x931fa4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6929222494572508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69292225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06caa50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb031c720; to 'JaxprTracer' at 0x7ffbb031f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447d31b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.10129246490071975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10129246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e940>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d2520; to 'JaxprTracer' at 0x7ffb900d1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c516230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.27731281828567184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27731282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473c5e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104fe430; to 'JaxprTracer' at 0x7ffc104fcbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4855170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5456761350998336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54567614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dcb00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451e890; to 'JaxprTracer' at 0x7ffa3451e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15fd5c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.5722933474668167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57229335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747ff0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714593ba0; to 'JaxprTracer' at 0x7ff714591d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884ffb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9323908609995958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93239086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0ac0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7052acf0; to 'JaxprTracer' at 0x7ffb70529e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b428c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6904275997469149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6904276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2f00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10709210; to 'JaxprTracer' at 0x7ffc1070a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x211f6800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2632602422048828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26326024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253450>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347035b0; to 'JaxprTracer' at 0x7ffa34703b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ce643f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.5707739177023703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57077392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903640>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1075ee80; to 'JaxprTracer' at 0x7ffc1075d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b4cce00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.4843885142683842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48438851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd040>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08174400; to 'JaxprTracer' at 0x7ffb08176520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7925eb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5296631699937668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52966317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c8740>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01792b0; to 'JaxprTracer' at 0x7ffbb017bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e714a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5430220428324053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54302204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0df20>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00783600; to 'JaxprTracer' at 0x7ffb00780c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2b8ab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.5894473390436183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58944734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241590>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04a0c20; to 'JaxprTracer' at 0x7ffbb04a3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x678df8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.5272666593618729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52726666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de370>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9056a8e0; to 'JaxprTracer' at 0x7ffa90568a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fc1760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5225076639160473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52250766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f50a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa90074ef0; to 'JaxprTracer' at 0x7ffa90077240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e8724e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4978346832155356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49783468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca340>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714271990; to 'JaxprTracer' at 0x7ffc1032c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e8156b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5715809517769106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57158095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f74c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8f6700; to 'JaxprTracer' at 0x7ff70e8f6070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87227e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.4955237518883072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49552375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8ef0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019e7f0; to 'JaxprTracer' at 0x7ffcf019d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc52d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.45793925124415324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45793925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652990>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b29ba10; to 'JaxprTracer' at 0x7ff70b2999e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54528ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9541879676099445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95418797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028bd70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02aa480; to 'JaxprTracer' at 0x7ffbd048bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf31ffa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7021900599604883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70219006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057930>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b5b20; to 'JaxprTracer' at 0x7ff715450090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816d9430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4991189508531438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49911895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c90b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05ff510; to 'JaxprTracer' at 0x7ffa345628e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c67490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.9896516010206495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9896516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102425b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a0270; to 'JaxprTracer' at 0x7ffb004a3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696a4f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3929439956522947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.392944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065b6a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004d7dd0; to 'JaxprTracer' at 0x7ffb004d7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84ed4300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4525271801704036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45252718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2e80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10523290; to 'JaxprTracer' at 0x7ffc3070b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf82a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5070896558146044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50708966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509ae0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90177ce0; to 'JaxprTracer' at 0x7ffb90177fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8593eda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.6012505794772245
66, epoch_train_loss=1.6012505794772245
Epoch 67
Epoch 67 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.3352665139589286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.33526651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e7a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038c040; to 'JaxprTracer' at 0x7ffbb0744540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d1e7df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-1.068091398081159, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0680914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104490>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00f96c0; to 'JaxprTracer' at 0x7ffbd00fa700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be52a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12030605410289212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12030605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241850>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34726bb0; to 'JaxprTracer' at 0x7ffa34725f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42b65220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4111108316529179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41111083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652710>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151883b0; to 'JaxprTracer' at 0x7ff7151898a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x253b3a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7305568959385332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7305569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff930>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02bd710; to 'JaxprTracer' at 0x7ff9f07dacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc37de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7561311469404873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75613115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d6a60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058bbf0; to 'JaxprTracer' at 0x7ff9f058bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18761450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.5850771819952556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.58507718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07451a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0629530; to 'JaxprTracer' at 0x7ffcb062bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34ce3d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9362852981969961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9362853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07452f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686d2b0; to 'JaxprTracer' at 0x7ff71686c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x894cc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3297757315485605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32977573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6460>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715487100; to 'JaxprTracer' at 0x7ff7154867f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884e9410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7485870381864983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74858704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236180>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01bb7e0; to 'JaxprTracer' at 0x7ffcf01bb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e44b430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6553721106508286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65537211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e650>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a6b60; to 'JaxprTracer' at 0x7ffc307a49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40659340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6938608028738744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6938608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106820>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0295df0; to 'JaxprTracer' at 0x7ffcb0295c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3314c230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.71234918654819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71234919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242570>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71515a2a0; to 'JaxprTracer' at 0x7ff71515aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88522ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.764094048307281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76409405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032edd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34762bb0; to 'JaxprTracer' at 0x7ffa34761440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7425d820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6924169501898626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69241695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd580>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705eb330; to 'JaxprTracer' at 0x7ffa705e8ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ceca5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6837572718267744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68375727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f41f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382db880; to 'JaxprTracer' at 0x7ffc907bdf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465b13b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.6503582039923084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6503582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a5e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa906fd2b0; to 'JaxprTracer' at 0x7ffa906fc5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48bd3f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7544838989655598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7544839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de140>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714d05f30; to 'JaxprTracer' at 0x7ff714f3d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ade810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6433648733836748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64336487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cb1f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ef70590; to 'JaxprTracer' at 0x7ffc302ba3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b48a8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6544428543997913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65444285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e0a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716896d40; to 'JaxprTracer' at 0x7ff716897ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44dc9a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.4340159443464153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.43401594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021eed0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7011d4e0; to 'JaxprTracer' at 0x7ffb7011ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x831c45a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9272286804781675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92722868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9c20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9075b010; to 'JaxprTracer' at 0x7ffa90759490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d49f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.6499342314562596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64993423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb9d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716169df0; to 'JaxprTracer' at 0x7ff716168f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c500a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3660764205945493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.36607642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032ea00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10739170; to 'JaxprTracer' at 0x7ffc10738fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e538e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5026613018275653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5026613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1570>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f007c130; to 'JaxprTracer' at 0x7ff9f007c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d067090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5886305195234647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58863052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02875e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2f3510; to 'JaxprTracer' at 0x7ff70b2f2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27295500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6603714452552295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66037145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289a20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50509c60; to 'JaxprTracer' at 0x7ffb50509ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92843bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.3611692753815923
67, epoch_train_loss=1.3611692753815923
Epoch 68
Epoch 68 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.410851176033571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.41085118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c05d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7013e7f0; to 'JaxprTracer' at 0x7ffa7013eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f7ab250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-1.1461634910738587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.14616349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f1e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b4fe0; to 'JaxprTracer' at 0x7ffb5019d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c22f130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13028828265605263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13028828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfe4b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714854770; to 'JaxprTracer' at 0x7ff7148549a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6333b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4498620057370149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44986201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c8f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346cfbf0; to 'JaxprTracer' at 0x7ffa346cd800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a289780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7997672668549279, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79976727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca260>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716625d00; to 'JaxprTracer' at 0x7ff716625f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49a9b4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8292609616438387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82926096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126f80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd021e160; to 'JaxprTracer' at 0x7ffcd021e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x692b0ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.6715930216391182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.67159302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0b00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001d5d50; to 'JaxprTracer' at 0x7ffb001d50d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c32a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0227806076230224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02278061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10452cf0; to 'JaxprTracer' at 0x7ffc10450f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60e95910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3623315042429489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3623315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fdb90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34701940; to 'JaxprTracer' at 0x7ffa34702ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3183a800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8176707414886649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81767074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9035f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704e7dd0; to 'JaxprTracer' at 0x7ffc704e56c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68d005a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7256495010089641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7256495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2e40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ef560; to 'JaxprTracer' at 0x7ffa107ee250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46d5ebc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7584036437283028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75840364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f040>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902898a0; to 'JaxprTracer' at 0x7ffa9028bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf7df7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.779619295339602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7796193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfede0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50201710; to 'JaxprTracer' at 0x7ffa50200b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3475c700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8328261711853994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83282617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4140>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f09da0; to 'JaxprTracer' at 0x7ff714f0a2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20808dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7594223727563031, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75942237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8570>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90516980; to 'JaxprTracer' at 0x7ffb90515fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cdcd9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7486430857017458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74864309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5760>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7027dc10; to 'JaxprTracer' at 0x7ffc7027ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x400e8480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7107064222280147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71070642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0746e60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b305e40; to 'JaxprTracer' at 0x7ff716a5ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x932161c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8244757883572729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82447579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250fd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b4630; to 'JaxprTracer' at 0x7ffc584b5260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a2582d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.70307509242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70307509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653950>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00fb060; to 'JaxprTracer' at 0x7ffbd00fb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x306c9430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.7098330563848665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70983306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054070>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a1f80; to 'JaxprTracer' at 0x7ffcd07a2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80ce4f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.5147961814581572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.51479618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9f50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70343bf0; to 'JaxprTracer' at 0x7ffb70340ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2078ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0072213772615184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.00722138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191d40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3451d940; to 'JaxprTracer' at 0x7ffa3451fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7140350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7107074133588346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71070741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c80b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0502ac0; to 'JaxprTracer' at 0x7ffab05002c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd3c630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.4811951267759567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.48119513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107780>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0113830; to 'JaxprTracer' at 0x7ffbb0111c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x320e8920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5506470007480047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.550647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771e20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71616bba0; to 'JaxprTracer' at 0x7ff71616b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6918dc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6437996821745262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64379968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702863f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f66700; to 'JaxprTracer' at 0x7ffc707dd850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88227c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7205649636057786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72056496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032d0d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1035ed90; to 'JaxprTracer' at 0x7ffb1035ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b0e8420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.418949297436435
68, epoch_train_loss=1.418949297436435
Epoch 69
Epoch 69 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.1013741882728638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.10137419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901488e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c50900; to 'JaxprTracer' at 0x7ff7a2c53b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x813edb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.9500422491819372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95004225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749c40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f2200; to 'JaxprTracer' at 0x7ffbd04f0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6866f9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12767242485402497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12767242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7240>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3423eed0; to 'JaxprTracer' at 0x7ffa3423e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80eed4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3714817464973516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37148175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056000>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716ada110; to 'JaxprTracer' at 0x7ff716ad8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72e8f090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7256028082164874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72560281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fe6e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069df30; to 'JaxprTracer' at 0x7ffb5069fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6d0f350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7599671386249517, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75996714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3c20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b76f20; to 'JaxprTracer' at 0x7ffb5019c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e4c0b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.2716928198590836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.27169282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125ee0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704df6a0; to 'JaxprTracer' at 0x7ffb704dd760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x861cb990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9154236916077939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91542369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101240d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0628e00; to 'JaxprTracer' at 0x7ffcb062bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61af4e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3471488824764745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34714888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d650>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154872e0; to 'JaxprTracer' at 0x7ffbb04c30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa513c680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.747827182403534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74782718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03ddcb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71613c950; to 'JaxprTracer' at 0x7ff71613c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33771030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6645078184695432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66450782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285fd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001d4090; to 'JaxprTracer' at 0x7ffb001d78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1833150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6949881709834463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69498817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b3b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90315940; to 'JaxprTracer' at 0x7ffb90315d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56bfc9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7155148514270185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71551485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4240>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea54a40; to 'JaxprTracer' at 0x7ff70ea56ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x675546f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7628090793230129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76280908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9980>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341f9e90; to 'JaxprTracer' at 0x7ffa341f9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b35f900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7008528941185612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70085289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb4c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0203f60; to 'JaxprTracer' at 0x7ffcb02008b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e35d050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6886016785654976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68860168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2800>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10598680; to 'JaxprTracer' at 0x7ffa10599f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x955fa6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.6522690044945566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.652269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848dbb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b331030; to 'JaxprTracer' at 0x7ffa900ad120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968880f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7515115595595754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75151156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8a30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504c2de0; to 'JaxprTracer' at 0x7ffa504c0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x565f8b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6479130978186036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6479131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb8c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90458a90; to 'JaxprTracer' at 0x7ffc9045b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60008310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6137838641333243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61378386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfef50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700de390; to 'JaxprTracer' at 0x7ffa700df1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95e5d090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.2194830301484574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.21948303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f030>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301004f0; to 'JaxprTracer' at 0x7ffc301007c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x789abc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.908041006129617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90804101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3740>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a78d0; to 'JaxprTracer' at 0x7ffcb07a5170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c31670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.654187866060453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65418787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242d50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0379df0; to 'JaxprTracer' at 0x7ffbb0378770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45d90cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2938451783032505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.29384518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588990>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038ecf0; to 'JaxprTracer' at 0x7ffbd00fbbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb948310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5157172848957373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51571728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3e60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714c353f0; to 'JaxprTracer' at 0x7ff714c37fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2bf8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5940197662165688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59401977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906848a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0111800; to 'JaxprTracer' at 0x7ffbd0681c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61aaa490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6599844449136696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65998444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7e40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e814860; to 'JaxprTracer' at 0x7ffbb0110c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5324d890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.14998627322351
69, epoch_train_loss=1.14998627322351
Epoch 70
Epoch 70 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.922937495437397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9229375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745760>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0497650; to 'JaxprTracer' at 0x7ffcd0496750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x133bc860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8380169750651193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83801698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca650>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7013fe70; to 'JaxprTracer' at 0x7ffa7013ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51f434f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13045550279284288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1304555, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff260>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012d120; to 'JaxprTracer' at 0x7ffbf02ad3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dc72db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.33989103750849714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33989104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cadd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021cc20; to 'JaxprTracer' at 0x7ffc9021cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x362b07f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7163953718266963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71639537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492540>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06f6890; to 'JaxprTracer' at 0x7ffbb06f59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eb3b5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7556987756435368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75569878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0ab0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0200b80; to 'JaxprTracer' at 0x7ffcf0201940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66bc33b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0325477193614219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.03254772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652e80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7016efc0; to 'JaxprTracer' at 0x7ffa7016fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x484df9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8912006520027462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89120065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086509a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10343e20; to 'JaxprTracer' at 0x7ffa10340c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ca8230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.35400518843134127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35400519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191b20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304db560; to 'JaxprTracer' at 0x7ffc304da660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bbd8480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7445302705161413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74453027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5de0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0107ba0; to 'JaxprTracer' at 0x7ffbb04c19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x395ff890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6562788256022912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65627883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07472b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08146520; to 'JaxprTracer' at 0x7ff70f00f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fc0ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6924028562108482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69240286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8570>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0143e70; to 'JaxprTracer' at 0x7ffbb01422f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8168ac40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7144987599763154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71449876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506582b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08423420; to 'JaxprTracer' at 0x7ffb084220c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x406f8530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7581614422116214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75816144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050aca0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a51990; to 'JaxprTracer' at 0x7ff714a50ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3603e520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7028335381337908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70283354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491090>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a42c0; to 'JaxprTracer' at 0x7ff70ecc9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f004e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6886922301669594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68869223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2a20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0241530; to 'JaxprTracer' at 0x7ffcd0240040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e884ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.6501202036088766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6501202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fe4b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90526930; to 'JaxprTracer' at 0x7ffb90525170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8596ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7460136723077333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74601367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057170>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101391c0; to 'JaxprTracer' at 0x7ffc1013a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x594b8720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6463963498954418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64639635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4a40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a30b0; to 'JaxprTracer' at 0x7ffc10262c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9ae110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5731943210170134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57319432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105f10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05fc180; to 'JaxprTracer' at 0x7ffcb05ff510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b94bbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0649448327155413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.06494483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748d90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011e0c0; to 'JaxprTracer' at 0x7ff9d011f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60727510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8870457075487977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88704571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658270>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70073060; to 'JaxprTracer' at 0x7ffb70071e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5abb0ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.6517227687003293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65172277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065faa0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00b5ad0; to 'JaxprTracer' at 0x7ffbd00b6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25737c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2322742640421032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.23227426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7d70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009ddf0; to 'JaxprTracer' at 0x7ffb9009d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31b248a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5209574645286175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52095746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588b50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7e3e0; to 'JaxprTracer' at 0x7ff715e7ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9408db10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5938889012116776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5938889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02529d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f64450; to 'JaxprTracer' at 0x7ff714f64bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31b0c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6552628255304844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65526283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9008d760; to 'JaxprTracer' at 0x7ffa9008d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5167b920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.1105570015050559
70, epoch_train_loss=1.1105570015050559
Epoch 71
Epoch 71 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9337402028982373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9337402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686de0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf036e520; to 'JaxprTracer' at 0x7ffcf036dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x444e0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8553913849011853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85539138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a170>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104fdb20; to 'JaxprTracer' at 0x7ff714d05f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59cbabe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14383341147098827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14383341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148350>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03ff1f0; to 'JaxprTracer' at 0x7ff9f03fdad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a2ffe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.36861336289031077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36861336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102439e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03ebab0; to 'JaxprTracer' at 0x7ffcd03e9da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b97e8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8122603706553718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81226037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193c60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc705069d0; to 'JaxprTracer' at 0x7ffc70504360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152af500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8550879839128229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85508798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650180>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302f89a0; to 'JaxprTracer' at 0x7ffc302fa2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d85d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0291640243098084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02916402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287f20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1075dbc0; to 'JaxprTracer' at 0x7ffc1075d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x554b9bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9995376014461007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9995376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02875e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd1df0; to 'JaxprTracer' at 0x7ff7a2cd3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa23a1b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.40261946407930027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40261946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f090>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10752930; to 'JaxprTracer' at 0x7ffa10752110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3622cfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8492664408923372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84926644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cb900>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71638f060; to 'JaxprTracer' at 0x7ff71638d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5a8dd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.74105663295269, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74105663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687eb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5028e110; to 'JaxprTracer' at 0x7ffb5028d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ed53a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7903307664084478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79033077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027bb00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30181da0; to 'JaxprTracer' at 0x7ffc30182840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc12ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8160527654615246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81605277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148700>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71568f740; to 'JaxprTracer' at 0x7ff7a2a7f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa216eb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8597368864521349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85973689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702899a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71691e1b0; to 'JaxprTracer' at 0x7ff71691f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9412ce30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8032320052602848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80323201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301918b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0185f80; to 'JaxprTracer' at 0x7ff9d0184270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6153b860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7864750618336219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78647506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286ba0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07184f0; to 'JaxprTracer' at 0x7ff9f071b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d7a430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7426286035857799, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7426286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2f10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5044abb0; to 'JaxprTracer' at 0x7ffa504490d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dbcfc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8498912178200231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84989122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904907e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061d800; to 'JaxprTracer' at 0x7ffc7061ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ea7cc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7338092951630053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7338093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9db0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1db650; to 'JaxprTracer' at 0x7ffbf0713ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b1d7f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6169199806999259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61691998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fc80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30326700; to 'JaxprTracer' at 0x7ffc303243b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x848e5f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0880450086837499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.08804501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f150>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714814c70; to 'JaxprTracer' at 0x7ff714814b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56844cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9941252090278995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99412521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0ca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a50360; to 'JaxprTracer' at 0x7ff714a534c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x438dbf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7408796124321123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74087961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104ce0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a01d0; to 'JaxprTracer' at 0x7ffb700a0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d16bf10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.357458504727142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.3574585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a350>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ef706d0; to 'JaxprTracer' at 0x7ff70ef71ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x139ae710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5965929560131483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59659296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747360>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd6890; to 'JaxprTracer' at 0x7ff7a2cd4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34afa9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6783989700104492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67839897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a090>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907bf880; to 'JaxprTracer' at 0x7ffc907be4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fcd76e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7432268316000314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74322683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38580a40; to 'JaxprTracer' at 0x7ffb38582980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x426ef860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0140927473740056
71, epoch_train_loss=1.0140927473740056
Epoch 72
Epoch 72 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.943791936065955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94379194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ffeb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50702840; to 'JaxprTracer' at 0x7ffa50700bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3091300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8824257702895065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88242577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9450>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026ccc0; to 'JaxprTracer' at 0x7ffcb026c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551e7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1565839050008223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15658391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c96f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304842c0; to 'JaxprTracer' at 0x7ffc30485760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f7d7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3921805612877096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39218056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb340>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e32fc0; to 'JaxprTracer' at 0x7ff715e336a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c478a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.898418552651499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89841855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f800>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0425800; to 'JaxprTracer' at 0x7ffcb0426d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1b0170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9444144884854254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94441449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d35d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e612020; to 'JaxprTracer' at 0x7ff70e613150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4bd9f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.026675030330712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02667503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702859d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021c950; to 'JaxprTracer' at 0x7ffb5021ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8174a060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0860648494386032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.08606485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ecaae30; to 'JaxprTracer' at 0x7ff70eca9ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x670b0ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4522945912947971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45229459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243d90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304d8270; to 'JaxprTracer' at 0x7ffc304db3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e35a490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9447847329551863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94478473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903830>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715485350; to 'JaxprTracer' at 0x7ffb08144860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbaf580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.8174673193144247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81746732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fde30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0297a10; to 'JaxprTracer' at 0x7ffcf0294540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28dd2580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8800074527331428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88000745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9a00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e85b6a0; to 'JaxprTracer' at 0x7ff70e85b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3078db80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.9091022826228794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90910228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb820>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074c400; to 'JaxprTracer' at 0x7ffbd074c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8166cc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.952366002707755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.952366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7ce0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5019f1f0; to 'JaxprTracer' at 0x7ffb5019cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d81f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8961305911837398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89613059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0d840>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347265c0; to 'JaxprTracer' at 0x7ffa34726a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f14a440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8763906163910797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87639062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2d30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e5a23e0; to 'JaxprTracer' at 0x7ff70e5a28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f12fd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8275818035986198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8275818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb4e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10296c00; to 'JaxprTracer' at 0x7ffc10297790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4208c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.944154258092891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94415426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a6e90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9073ad90; to 'JaxprTracer' at 0x7ffb9073a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4377add0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.814493071272078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81449307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104af0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072fc90; to 'JaxprTracer' at 0x7ffa9072e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64aaad30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6565421707515271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65654217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901487e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907a2f70; to 'JaxprTracer' at 0x7ff9f035ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a2d310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.1041368816574237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.10413688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4aa0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f3ea20; to 'JaxprTracer' at 0x7ff714f3fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x510c9bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0886766891776203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.08867669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686b60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7052b790; to 'JaxprTracer' at 0x7ffb70528fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d54ba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.8241797374697191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82417974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f140>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ca9260; to 'JaxprTracer' at 0x7ff7a2cabce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53f5c570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.4367314136884048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.43673141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4ed0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0497dd0; to 'JaxprTracer' at 0x7ffcd0495580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2c0640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6690823991363926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6690824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032da10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea55cb0; to 'JaxprTracer' at 0x7ff70ea55df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x600a6280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7568881770260557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75688818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f54c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700ad0d0; to 'JaxprTracer' at 0x7ffa700acea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x466d70c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.8249676485034856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82496765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013d6e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715490540; to 'JaxprTracer' at 0x7ff7154904a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x850cb4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0750937262379825
72, epoch_train_loss=1.0750937262379825
Epoch 73
Epoch 73 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8618243532248995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86182435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b3f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714816d40; to 'JaxprTracer' at 0x7ff714815120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7204870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8197421072308957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81974211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858ad90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00c97b0; to 'JaxprTracer' at 0x7ff9f00cbc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73a62780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15516486282914538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15516486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4480>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0772020; to 'JaxprTracer' at 0x7ff9f0771d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30939a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3803328576158852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38033286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509220>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706929d0; to 'JaxprTracer' at 0x7ffb70691ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1363a7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8767158749022418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87671587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104440>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716941210; to 'JaxprTracer' at 0x7ff7169404f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cbcd660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9238056080957427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92380561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193760>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b5f80; to 'JaxprTracer' at 0x7ff9f05b5940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2be11c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9188023277121349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91880233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653b90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04b80e0; to 'JaxprTracer' at 0x7ff70e881b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5da94300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.044021874180983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04402187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086522d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3047c400; to 'JaxprTracer' at 0x7ffc3047d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x290958a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.44917795026726026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44917795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e700>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064dcb0; to 'JaxprTracer' at 0x7ff9f07e3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e68d9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9269698690003114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92696987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124570>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5028f650; to 'JaxprTracer' at 0x7ffb5028ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59638170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7978716437182709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79787164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026bdc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e5f830; to 'JaxprTracer' at 0x7ff715e5d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x208125d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8635508086143937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86355081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858ad70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0295fd0; to 'JaxprTracer' at 0x7ffcb02965c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f2c7dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8936520357418528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89365204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7520>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10305800; to 'JaxprTracer' at 0x7ffc103042c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb6d900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9343809943129638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93438099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9470>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00ecd10; to 'JaxprTracer' at 0x7ffbf00eddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bedf3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.883345052225776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88334505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01068d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02007c0; to 'JaxprTracer' at 0x7ffcd0203f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d895780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8626667773506309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86266678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242500>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d035b010; to 'JaxprTracer' at 0x7ff9d0358e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638f34a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8123142557633668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81231426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285160>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d3010; to 'JaxprTracer' at 0x7ffb900d0900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65253400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9246263609040622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92462636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287aa0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90514590; to 'JaxprTracer' at 0x7ffb905162a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49ddc290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8001181344767268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80011813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb900>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705e8c20; to 'JaxprTracer' at 0x7ffa705ea020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a23c9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6258038898808215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62580389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d03e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0715ad0; to 'JaxprTracer' at 0x7ffcb07176a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c65e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0143375076308097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01433751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d1e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bf880; to 'JaxprTracer' at 0x7ff7168bec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5acc0ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0555255119664004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.05552551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107706f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71568d760; to 'JaxprTracer' at 0x7ffbf04cb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60cb15c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.8075582376511093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80755824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686610>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9072e340; to 'JaxprTracer' at 0x7ffa9072f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6508e4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3519935965529237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.3519936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb7b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50484fe0; to 'JaxprTracer' at 0x7ffa50486890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d6ea3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6618314796045669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66183148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fc1c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c5f1f0; to 'JaxprTracer' at 0x7ff7a2c5c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x892f8d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7441501404580998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74415014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235ec0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01cb2e0; to 'JaxprTracer' at 0x7ff9d01c8180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15b25a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.8062364889954252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80623649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd4e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3064da30; to 'JaxprTracer' at 0x7ffc3064dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b56b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.049646549461825
73, epoch_train_loss=1.049646549461825
Epoch 74
Epoch 74 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.745680621289416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74568062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb260>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50448b30; to 'JaxprTracer' at 0x7ffa50449bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44cb2830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7197324692278119, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71973247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748f30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045fa60; to 'JaxprTracer' at 0x7ffcd045c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x655e6de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14512725923958816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14512726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702885c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30709e90; to 'JaxprTracer' at 0x7ffc3070a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94811cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.34931948683110076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34931949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3d80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008dcb0; to 'JaxprTracer' at 0x7ff9f008e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47b55020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7896494651053868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78964947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb2e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0536700; to 'JaxprTracer' at 0x7ffab0537ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x248256d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8372558184327455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83725582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651aa0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707de570; to 'JaxprTracer' at 0x7ffc707dfab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a108090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7860591501884869, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78605915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065adf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0102ed0; to 'JaxprTracer' at 0x7ff9f0103c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66405e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9395991943797152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93959919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659ee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902ddd00; to 'JaxprTracer' at 0x7ffc902dc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55520220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4124063610077756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41240636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149c20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01e4310; to 'JaxprTracer' at 0x7ffcf01e55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3587faa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8374852084631184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83748521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903e40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03e6390; to 'JaxprTracer' at 0x7ffcb03e5a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1539beb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7217197341713835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72171973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed9690>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053d580; to 'JaxprTracer' at 0x7ffb9053ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85bcfe20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7809276667622208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78092767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748e20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038dd50; to 'JaxprTracer' at 0x7ffb1038c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bb07030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8091110080299674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80911101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288c10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90167e70; to 'JaxprTracer' at 0x7ffb90166fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61778bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8485171128192718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84851711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268190>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bfcf40; to 'JaxprTracer' at 0x7ff715bfc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x406eda80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8012146099883386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80121461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb810>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716690680; to 'JaxprTracer' at 0x7ff7166906d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99626c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.781267550601902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78126755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086501a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904ab420; to 'JaxprTracer' at 0x7ffc904abfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8790660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.735103140670176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73510314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191770>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b6200; to 'JaxprTracer' at 0x7ffcd04b68e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6752d550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8344550239668485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83445502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01078c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01d8f40; to 'JaxprTracer' at 0x7ffcb01d8cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ea5450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7273978500166692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72739785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a050>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08627010; to 'JaxprTracer' at 0x7ffb08624a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32d7c160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5614952876549699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56149529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687480>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8a8220; to 'JaxprTracer' at 0x7ff70d51e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c42a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8928595922156268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89285959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d71f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3053eca0; to 'JaxprTracer' at 0x7ffc3053e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d41d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9511718023395968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9511718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848dd60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70734220; to 'JaxprTracer' at 0x7ffc70736430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0f8e2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7326736710635604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73267367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8d50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a1c60; to 'JaxprTracer' at 0x7ffbb0140630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a232d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1983276227871176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.19832762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588360>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70efc20c0; to 'JaxprTracer' at 0x7ff70efc0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a21e430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6035568833314257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60355688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0e70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7010abb0; to 'JaxprTracer' at 0x7ffb700a1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x637f4780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.675069123291241, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67506912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c4e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c9cb0; to 'JaxprTracer' at 0x7ff9d01cbd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa04d8900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7307278841884244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73072788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744f90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04a8590; to 'JaxprTracer' at 0x7ffbf04aac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50641fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0836253705238468
74, epoch_train_loss=1.0836253705238468
Epoch 75
Epoch 75 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7295608544482861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72956085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235c90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3873b6a0; to 'JaxprTracer' at 0x7ffb387390d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32cdc220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.709441775966637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70944178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032db10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a6ca0; to 'JaxprTracer' at 0x7ffab02a4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33cf5140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14901763187685424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14901763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f310>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05f5530; to 'JaxprTracer' at 0x7ff9f05f4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4daec740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.35428281573081527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35428282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a610>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70690a90; to 'JaxprTracer' at 0x7ffb70690e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f764360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8151887494944355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81518875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a200>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc585d27a0; to 'JaxprTracer' at 0x7ffc585d2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5665e680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8646507318188505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86465073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a6a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706704f0; to 'JaxprTracer' at 0x7ffa706739c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5f5190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7711015377342957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77110154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286940>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385829d0; to 'JaxprTracer' at 0x7ffb385810d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28ea96d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9515316842753756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95153168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287c20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3047f290; to 'JaxprTracer' at 0x7ffc3047c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989776d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.42702849315457464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42702849, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c90c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700e56c0; to 'JaxprTracer' at 0x7ffa700e5850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7677e730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8678159381934786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86781594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d1280>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501cf790; to 'JaxprTracer' at 0x7ffa501cecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa15d6c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7432881587187326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74328816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235e40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5067cea0; to 'JaxprTracer' at 0x7ffb5067c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f00b4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8088371995941154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8088372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032d510>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f6d90; to 'JaxprTracer' at 0x7ffc704b28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa41dfb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8393945203644533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83939452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f510>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08177c40; to 'JaxprTracer' at 0x7ffa5068cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b1913a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8782485482039251, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87824855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b980>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166253f0; to 'JaxprTracer' at 0x7ff7166262f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96e68bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8327912730993127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83279127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014ac00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a119e0; to 'JaxprTracer' at 0x7ff7a2a109a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50786120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8112432007528279, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8112432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4250>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04f0310; to 'JaxprTracer' at 0x7ffab04f1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e57a110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7611636780753908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76116368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086526f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904afe70; to 'JaxprTracer' at 0x7ffb904ae480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d13930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8636603416136901, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86366034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbd90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b42c0; to 'JaxprTracer' at 0x7ffc30486c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88860ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7526216835498615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75262168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771b20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07db920; to 'JaxprTracer' at 0x7ff9f07d9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77552dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5684663164178556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56846632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9e20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045cf40; to 'JaxprTracer' at 0x7ffcd045f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96043020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8819432510850447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88194325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288160>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346cc130; to 'JaxprTracer' at 0x7ffa346cd260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x349669a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9759930715393781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97599307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9540>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0497970; to 'JaxprTracer' at 0x7ffcd0494f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x719f9370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7550377332583457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75503773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685220>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90203600; to 'JaxprTracer' at 0x7ffc902020c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6874c180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1932202734897914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.19322027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f620>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b5b70; to 'JaxprTracer' at 0x7ffbd02b7100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa47b8a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6265408457550884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62654085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda020>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0332930; to 'JaxprTracer' at 0x7ffbf0333b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3fd8820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6990269835550211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69902698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df130>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10317330; to 'JaxprTracer' at 0x7ffa10315b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x850d78b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7502636106482736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75026361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d5c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686f470; to 'JaxprTracer' at 0x7ffa346cbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b292120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0857393371981527
75, epoch_train_loss=1.0857393371981527
Epoch 76
Epoch 76 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7497412308418907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74974123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8ab7e0; to 'JaxprTracer' at 0x7ff70e8a80e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60edfe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7270355747516037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72703557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057170>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb100e05e0; to 'JaxprTracer' at 0x7ffb100e0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d9a940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15595747669841867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15595748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074baf0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b305800; to 'JaxprTracer' at 0x7ff70b3063e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cfbc570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3674158623018665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36741586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9740>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083f16c0; to 'JaxprTracer' at 0x7ffb083f33d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62895df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.857440157274408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85744016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3350>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0424360; to 'JaxprTracer' at 0x7ffcb0426ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25586630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9136642671075654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91366427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285c40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71568c0e0; to 'JaxprTracer' at 0x7ff71568fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4349ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7910430392430006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79104304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243580>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dc8b0; to 'JaxprTracer' at 0x7ffbb04c1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ab3b590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9902956784049854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99029568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243e70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5067c590; to 'JaxprTracer' at 0x7ffb5067c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x449f66a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4505906229696527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45059062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050ac40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90700810; to 'JaxprTracer' at 0x7ffc90702ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ea62970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9149775045106598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9149775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903d10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01047c0; to 'JaxprTracer' at 0x7ffbb01059e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33a732b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.784355830603635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78435583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfe450>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058abb0; to 'JaxprTracer' at 0x7ff9f058a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c744490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8531670784048299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85316708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057eb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0739ad0; to 'JaxprTracer' at 0x7ffbf0738db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x952a5a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8863227159763784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88632272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907497a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eaf1f30; to 'JaxprTracer' at 0x7ff70eaf2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314619b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9269250934762724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92692509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234ee0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069e840; to 'JaxprTracer' at 0x7ffb5069fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71c3d110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.880688290466453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88068829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1ba0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706b16c0; to 'JaxprTracer' at 0x7ffc706b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x364a2ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.856582065450152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85658207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163ba840>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71455ccc0; to 'JaxprTracer' at 0x7ff71455f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf72000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8030398250976759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80303983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065b410>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0411fd0; to 'JaxprTracer' at 0x7ffcd0411760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3351ac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9105451816354787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91054518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b950>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714eafc90; to 'JaxprTracer' at 0x7ff714ead440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94d2ded0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7945890817258533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79458908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0df0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00cbd0; to 'JaxprTracer' at 0x7ff70f00d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771dd1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5924609613308077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59246096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906871a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb031fdd0; to 'JaxprTracer' at 0x7ffbb031cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fb7d250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9064930086870059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90649301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d3d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702fcb30; to 'JaxprTracer' at 0x7ffc702fe520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3997180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0252034894040671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02520349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714538270; to 'JaxprTracer' at 0x7ff714538e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x438f8b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7967808564854765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79678086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5970>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f0630; to 'JaxprTracer' at 0x7ffbd04f21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76857d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2275941406164899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.22759414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c6c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0021a480; to 'JaxprTracer' at 0x7ffb0021a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fe38f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6624047354927308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66240474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013ee70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70737c90; to 'JaxprTracer' at 0x7ffb9053ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23702770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7380889408807443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73808894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490d10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f3f740; to 'JaxprTracer' at 0x7ff714f3ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8de28b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7886630331155551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78866303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f8c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70dc49620; to 'JaxprTracer' at 0x7ff70dc49b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x134d1fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0812105845857576
76, epoch_train_loss=1.0812105845857576
Epoch 77
Epoch 77 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-2.0584721365402254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.05847214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc6d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0437d30; to 'JaxprTracer' at 0x7ffbb0379e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99043580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7454579524717214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74545795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105350>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30512d90; to 'JaxprTracer' at 0x7ffc30513b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63773340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16013862075412674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16013862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285d80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158d0ea0; to 'JaxprTracer' at 0x7ff7158d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6668c000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.378498247283564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37849825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a560>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04c9df0; to 'JaxprTracer' at 0x7ffbf04cb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x471a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-3.6924737190591603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.69247372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2320>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016cc70; to 'JaxprTracer' at 0x7ffc1016cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e5bc050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-3.0500695400227102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.05006954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828ca90; to 'JaxprTracer' at 0x7ffb3828d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47b57a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.8778096714857863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87780967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02526d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038e480; to 'JaxprTracer' at 0x7ffb1038d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d7bf8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-4.025035622477975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-4.02503562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253db0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160b1760; to 'JaxprTracer' at 0x7ff7160b19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b888bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4659399752762335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46593998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb740>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900dd350; to 'JaxprTracer' at 0x7ffa900de930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52880360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9521894003160889, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9521894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d750>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06830b0; to 'JaxprTracer' at 0x7ffbd0680590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74c1c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-1.034945996677174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.034946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0746830>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50719260; to 'JaxprTracer' at 0x7ff7151898a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2081e720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8876067829643776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88760678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106e20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05e8ea0; to 'JaxprTracer' at 0x7ff9d05e8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85ae0a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.9229658006565552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9229658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287b50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e611da0; to 'JaxprTracer' at 0x7ff70e6104f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f4e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-1.0421039091475952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04210391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473cf80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8b5df0; to 'JaxprTracer' at 0x7ff70e8b46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e0d1100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.917822651102858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91782265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0570>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300cc2c0; to 'JaxprTracer' at 0x7ffc300cdbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f9b9cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8920835670406465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89208357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a550>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0358270; to 'JaxprTracer' at 0x7ffc707dcfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x755b2930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8352190898310948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83521909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240c30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716169440; to 'JaxprTracer' at 0x7ff71616b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb90c7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9474038519140268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94740385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cab80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04bcea0; to 'JaxprTracer' at 0x7ff7145bf420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53d24960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-1.6652376063384677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.66523761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773d00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a5da0; to 'JaxprTracer' at 0x7ffc307a5b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17afcb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6136801368617003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61368014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cad70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715bffec0; to 'JaxprTracer' at 0x7ff715bfef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x883b3fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9333335572727233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93333356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8030>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7eac0; to 'JaxprTracer' at 0x7ff715e7ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29ea6240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0973240030218168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.097324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907488b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021f5b0; to 'JaxprTracer' at 0x7ffc9021f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29e02ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.8907262814484448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89072628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502344a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507437e0; to 'JaxprTracer' at 0x7ffb507410d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d1fc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2601901009180672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.2601901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473ec10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9009dee0; to 'JaxprTracer' at 0x7ffb9009d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2a63130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6884223792547006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68842238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3ed0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904af6f0; to 'JaxprTracer' at 0x7ffb904afa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5024de30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7794049630075706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77940496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfdce0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5011a5c0; to 'JaxprTracer' at 0x7ffa5011a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62969160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.817151737034753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81715174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c86d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504b35b0; to 'JaxprTracer' at 0x7ffa504b3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288c9dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 4.651192194140471
77, epoch_train_loss=4.651192194140471
Epoch 78
Epoch 78 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6529166170635465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65291662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491fd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702fdf80; to 'JaxprTracer' at 0x7ffc702fe700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dd2d570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6240334852100113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62403349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd650>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716b3d990; to 'JaxprTracer' at 0x7ff716b3fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x106c7990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14386703856071195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14386704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0571d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0411580; to 'JaxprTracer' at 0x7ffcf0411ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5174eee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.329243482501806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32924348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907488e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d0680; to 'JaxprTracer' at 0x7ffb900d25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ed1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7552991678565599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75529917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03cdcb0; to 'JaxprTracer' at 0x7ff9f03ceb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84c6670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8070801742249761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80708017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b95c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90469c60; to 'JaxprTracer' at 0x7ffb90469a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2322a700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6848239535913546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68482395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252a50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00472ac0; to 'JaxprTracer' at 0x7ffb00473a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80e88ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8627310286743614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86273103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02511d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06f4130; to 'JaxprTracer' at 0x7ffbb06f5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd895e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.403902108528723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40390211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278cc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda1a80; to 'JaxprTracer' at 0x7ff70eda23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43802270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8090483397459385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80904834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903830>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0533d80; to 'JaxprTracer' at 0x7ffbf0532390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x997604b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6882414572376805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68824146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490760>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5846bab0; to 'JaxprTracer' at 0x7ffc5846b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11fc5a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7541543177319677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75415432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fef60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb007472e0; to 'JaxprTracer' at 0x7ffb00747100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64eb50d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7846380860435641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78463809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056910>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034e340; to 'JaxprTracer' at 0x7ffa7034f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c761f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8228503307636165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82285033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028b9e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03eb060; to 'JaxprTracer' at 0x7ffcd03e9da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1562a1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.782049506527474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78204951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cac30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e9990; to 'JaxprTracer' at 0x7ff9f07e9440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a09e8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7595269740586693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75952697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0400>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb053a890; to 'JaxprTracer' at 0x7ff9f05f4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49533880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7096606777058518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70966068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747700>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715661710; to 'JaxprTracer' at 0x7ffcb0749ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62d5b030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8037187798866043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80371878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f49b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168bc8b0; to 'JaxprTracer' at 0x7ff7168bc180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x106938f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7058678871954244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70586789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c0310>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd6ca0; to 'JaxprTracer' at 0x7ff7a2cd4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6634d440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5165904513972346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51659045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685380>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea983b0; to 'JaxprTracer' at 0x7ff70ea9bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d6de510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7762813395115485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77628134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c750>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01ca890; to 'JaxprTracer' at 0x7ff9d01cb740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28c4a600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9012816134859555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90128161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235930>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d035ad90; to 'JaxprTracer' at 0x7ff9d035ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75521a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.703656270900547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70365627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6300>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705e9fd0; to 'JaxprTracer' at 0x7ffa705eb380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a650700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.047385954321242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04738595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288300>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb007756c0; to 'JaxprTracer' at 0x7ffb00776840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a8afb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5896475754657587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58964758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653060>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07db240; to 'JaxprTracer' at 0x7ff9f07d8b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4783220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6528881750065233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65288818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dff70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02aede0; to 'JaxprTracer' at 0x7ffbf02ad6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dff6140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6948655707031173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69486557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0e910>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1586d0; to 'JaxprTracer' at 0x7ff70c158ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c20ed90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.2001478104511738
78, epoch_train_loss=1.2001478104511738
Epoch 79
Epoch 79 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6039633848789815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60396338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242fc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715eced40; to 'JaxprTracer' at 0x7ff715ecff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b77c0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5764508210711735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57645082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f240>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e831760; to 'JaxprTracer' at 0x7ff70e8327a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a74b2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1380750735855728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13807507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702843d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044d6c0; to 'JaxprTracer' at 0x7ffbb044c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8454a2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3094508642146123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30945086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050b490>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00da9d0; to 'JaxprTracer' at 0x7ffbd00db380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2117f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.703510056556109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70351006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279280>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e66b9c0; to 'JaxprTracer' at 0x7ff70e668180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98f5ce30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7534693870382748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75346939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252890>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5dd00; to 'JaxprTracer' at 0x7ff716a5d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e649c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6319084509715372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63190845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0e00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06df790; to 'JaxprTracer' at 0x7ffbb06df4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x658ea680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7982558042158236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7982558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706714e0; to 'JaxprTracer' at 0x7ffa70670f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c12310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.38161159346889334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38161159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9570>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71613d080; to 'JaxprTracer' at 0x7ffa9075ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93033e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7549100313495462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75491003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cbe00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100abd30; to 'JaxprTracer' at 0x7ffb38581cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c23d200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.638069538741141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63806954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cffca0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714591e90; to 'JaxprTracer' at 0x7ff714592e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x420ccd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7038283682000626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70382837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013f2d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38339030; to 'JaxprTracer' at 0x7ffb3833b9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76b1c670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7320226320235802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73202263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285b30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90469fd0; to 'JaxprTracer' at 0x7ffb9046a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d701400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7683523716301098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76835237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588a30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10692840; to 'JaxprTracer' at 0x7ffc10693470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x516e5da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7305602411569843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73056024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027a9c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10681350; to 'JaxprTracer' at 0x7ffc10680040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x937a9eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7092463998728351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7092464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127f90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90101a30; to 'JaxprTracer' at 0x7ff714ede0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43943e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.6623858690528918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66238587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9fd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71519ed90; to 'JaxprTracer' at 0x7ff71519fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5489cf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7493591202646598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74935912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5c50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342a4e50; to 'JaxprTracer' at 0x7ffa342a59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638eb5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6606938829778026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66069388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e530>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a51580; to 'JaxprTracer' at 0x7ff714a51440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76c289d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4781991383295177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47819914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5b30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9011b9c0; to 'JaxprTracer' at 0x7ffa9011b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e9dce90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.714091754817066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71409175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057980>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0746e30; to 'JaxprTracer' at 0x7ff71686f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91f30710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8373718940002131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83737189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3ac0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346ccea0; to 'JaxprTracer' at 0x7ffa346cc950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540f2290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.6569759256292693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65697593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686b20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0201800; to 'JaxprTracer' at 0x7ffbb06f4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x765b65e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.955944100669766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9559441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385893b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c97b0; to 'JaxprTracer' at 0x7ff9d01ca980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cb16bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5526185733817698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55261857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a030>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90476a20; to 'JaxprTracer' at 0x7ffb90477c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674c0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6094126811727744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60941268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014ae60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b4c70; to 'JaxprTracer' at 0x7ffc902b5a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa12dba10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6476770592358461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64767706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714cb2c00; to 'JaxprTracer' at 0x7ffc584b5b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa74da0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.3359662319239862
79, epoch_train_loss=1.3359662319239862
Epoch 80
Epoch 80 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6115845191852568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61158452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07462d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716afa070; to 'JaxprTracer' at 0x7ff716af9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d0b9c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5867643534193766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58676435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5780>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382d9620; to 'JaxprTracer' at 0x7ffb382da430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8597c820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1416811255985825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14168113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd550>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10263ba0; to 'JaxprTracer' at 0x7ffc10261b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34322d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3161739748327506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31617397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5350>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d1800; to 'JaxprTracer' at 0x7ffb900d1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f6e1970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7293093392318405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72930934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770430>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714861440; to 'JaxprTracer' at 0x7ff714863470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa263da60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7816319820962563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78163198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285b10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90314c70; to 'JaxprTracer' at 0x7ffb90315cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d6ec7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6408332528920054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64083325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127060>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714592890; to 'JaxprTracer' at 0x7ff714593100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54412b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8180051437473318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81800514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10452570; to 'JaxprTracer' at 0x7ffc104503b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x544f9c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.39534226249629745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39534226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508ea0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ea840; to 'JaxprTracer' at 0x7ffb0865ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cf7e520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7841040744790999, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78410407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9033f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b77dd0; to 'JaxprTracer' at 0x7ff715b77a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47448870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6571782682071429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65717827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747c50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7044fba0; to 'JaxprTracer' at 0x7ffc7044e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fdf30c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7308236122378412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73082361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d51f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc585d3380; to 'JaxprTracer' at 0x7ffc585d3c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9796d300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7591999211768483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75919992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd0f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03ebfb0; to 'JaxprTracer' at 0x7ffcd03e9b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e575350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7967474726469896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79674747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021e2e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035c590; to 'JaxprTracer' at 0x7ff9f035fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c58d090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7575303728225227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75753037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749300>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04cbba0; to 'JaxprTracer' at 0x7ffbf04ca2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66cec7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7356632140911116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73566321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285600>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07a0900; to 'JaxprTracer' at 0x7ffcd07a27f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27524a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.6878013447664401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68780134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190f90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3858c770; to 'JaxprTracer' at 0x7ffb3858f150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88a656f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7783204777382277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77832048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3e10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed73b00; to 'JaxprTracer' at 0x7ff70ed73f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43777540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6854804983670023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6854805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685850>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0106610; to 'JaxprTracer' at 0x7ffbb0104d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3262c750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4883238075511895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48832381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70285fb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0274540; to 'JaxprTracer' at 0x7ffab0275940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3261ba40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7254773250272891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72547733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a790>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71686d6c0; to 'JaxprTracer' at 0x7ff71686ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6635530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8649717962309313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8649718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fbf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0770cc0; to 'JaxprTracer' at 0x7ff9f07731f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33d80f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.678559384344441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67855938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5b80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716b3d990; to 'JaxprTracer' at 0x7ff716b3c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x355750c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.9675963243707045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96759632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021ef70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061ef70; to 'JaxprTracer' at 0x7ffc7061f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x154c0010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5725404709676783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57254047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703ca620>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04f3510; to 'JaxprTracer' at 0x7ffbd04f10d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb0cba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6316326556113826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63163266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edac20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7151784f0; to 'JaxprTracer' at 0x7ff71517be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aacfec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6671598200635838, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66715982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858a4e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154bf060; to 'JaxprTracer' at 0x7ff7154bf7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac25540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.2868932130877184
80, epoch_train_loss=1.2868932130877184
Epoch 81
Epoch 81 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6529509225731475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65295092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149540>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c5e110; to 'JaxprTracer' at 0x7ff7a2c5c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f027260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6305333284390569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63053333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055a40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1637e0; to 'JaxprTracer' at 0x7ff9f078b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f66cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15117690705894812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15117691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021ff00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5046ef70; to 'JaxprTracer' at 0x7ffb5046e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5f0d050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.33831429185349404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33831429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286430>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb077fc90; to 'JaxprTracer' at 0x7ffcb077e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b4ac870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8013754949333842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80137549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906851e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dd3a0; to 'JaxprTracer' at 0x7ffb506de7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75665460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8586732509509523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85867325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de4b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f06135b0; to 'JaxprTracer' at 0x7ff9f0611440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e3fee00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6855488742714718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68554887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287bf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019eb10; to 'JaxprTracer' at 0x7ffcf019e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x827c2080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8858765251311945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88587653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02855e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7042e390; to 'JaxprTracer' at 0x7ffc7042c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84d34860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.43212504741231944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43212505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473fbf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0770c70; to 'JaxprTracer' at 0x7ffab07705e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43de17c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8660134913657987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86601349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f6e10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b48b0; to 'JaxprTracer' at 0x7ffa703ccd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e669360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7169472237481591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71694722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014aa40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10150c20; to 'JaxprTracer' at 0x7ffb10152610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56bda530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8061992508088457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80619925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055a50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5844a660; to 'JaxprTracer' at 0x7ffc58449120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa29bb7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8363686302890062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83636863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f630>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166c8040; to 'JaxprTracer' at 0x7ffa5068d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85006e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8759906923875701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87599069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d73c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8b5800; to 'JaxprTracer' at 0x7ff70e8b4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e6a7820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8341272209260492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83412722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906849a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b304ea0; to 'JaxprTracer' at 0x7ff70b306e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e21add0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8109531670276765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81095317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027ae50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907a2930; to 'JaxprTracer' at 0x7ffc907a35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc202f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7582630262706042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75826303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251530>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700a8db0; to 'JaxprTracer' at 0x7ffb700a87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f9cbff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8593574676837754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85935747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773a20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904e3880; to 'JaxprTracer' at 0x7ffb904e0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50f37750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7527742061968875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75277421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7c80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71594d8f0; to 'JaxprTracer' at 0x7ff71594c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x731fbe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5266144996349568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5266145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f28f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ccfe0; to 'JaxprTracer' at 0x7ffc300cff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f420e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7779881498590161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77798815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4ef0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02e3740; to 'JaxprTracer' at 0x7ffbf02e3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e86dca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9477458605047805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94774586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659180>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705d1d50; to 'JaxprTracer' at 0x7ffa705d2890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce5fce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7402327523164723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74023275, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106e20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb385820c0; to 'JaxprTracer' at 0x7ffb38580400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa702daf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.0413029069154232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04130291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7a90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8db970; to 'JaxprTracer' at 0x7ff70e8d8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bec20a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6281532312912906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62815323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b040>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107515d0; to 'JaxprTracer' at 0x7ffa10752020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x947bba10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6941722273512192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69417223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744980>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04f2cf0; to 'JaxprTracer' at 0x7ffab04f07c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76b54500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7250477310485549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72504773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3770>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0204900; to 'JaxprTracer' at 0x7ffab0204770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8659df80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.1693677012025425
81, epoch_train_loss=1.1693677012025425
Epoch 82
Epoch 82 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.700659119856558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70065912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192890>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716624900; to 'JaxprTracer' at 0x7ff716627f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76d6e3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6747755336484382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67477553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848c040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea9b740; to 'JaxprTracer' at 0x7ff70ea99710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e7e7ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1617015292721059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16170153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5480>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001af8d0; to 'JaxprTracer' at 0x7ffb001af970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8df8f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.36042849905145957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3604285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7a70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05cea20; to 'JaxprTracer' at 0x7ff9d05cf010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40c81240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8647058241373579, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86470582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e5530>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901035b0; to 'JaxprTracer' at 0x7ffb90103bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e378140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9298977867229077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92989779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771ff0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166c8860; to 'JaxprTracer' at 0x7ff7166c8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aebc620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7346103412711823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73461034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de700>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504484f0; to 'JaxprTracer' at 0x7ff9f0566520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cb7cc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9528606395437071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95286064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc300>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71610f290; to 'JaxprTracer' at 0x7ff71610f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab87170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.46775928719013277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46775929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237cc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706ceb60; to 'JaxprTracer' at 0x7ffb706cf650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x136e5480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9340187090440947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93401871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903fe0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7027fc40; to 'JaxprTracer' at 0x7ffc7027d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bcef9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7730314534210895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77303145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192fb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a4360; to 'JaxprTracer' at 0x7ffc307a5e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74912ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8708209402427985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87082094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e8f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00783970; to 'JaxprTracer' at 0x7ffb00780090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17317d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.902232664469814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90223266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7530>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2cc3b0; to 'JaxprTracer' at 0x7ff70b2cc590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28be40a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9473661173707645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94736612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b380>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062f380; to 'JaxprTracer' at 0x7ffc3062c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71c1d2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8994170009643309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.899417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6500>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00ee700; to 'JaxprTracer' at 0x7ffbf00ed800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cd681d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8734900515671963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87349005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473d6c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011dfd0; to 'JaxprTracer' at 0x7ff9d011c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30ebbd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8196358945391046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81963589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126540>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0494900; to 'JaxprTracer' at 0x7ffcd04973d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ecab650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9284692031564759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9284692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686690>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b9a160; to 'JaxprTracer' at 0x7ffb7008b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cab0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8145696206820477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81456962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243cc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083f3c40; to 'JaxprTracer' at 0x7ffb083f0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25c38cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5656311758841726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56563118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0105a70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714817d80; to 'JaxprTracer' at 0x7ff714814f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0565f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8344360723210467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83443607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021eb70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0179210; to 'JaxprTracer' at 0x7ffc5862aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x380162a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.022772140647766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02277214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0c50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01ca980; to 'JaxprTracer' at 0x7ff9d01cae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a8d080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7980703658691345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79807037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659450>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00218310; to 'JaxprTracer' at 0x7ffb0021b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ebc0b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1187558289895034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.11875583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054f50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3070a520; to 'JaxprTracer' at 0x7ffc3070abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b3f7140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6782326123329389, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67823261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9190>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0496de0; to 'JaxprTracer' at 0x7ffcb0497470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35013900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7501919921527312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75019199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032cf00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344b1850; to 'JaxprTracer' at 0x7ffa344b1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c77a140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7803910947987798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78039109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fdf40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50526750; to 'JaxprTracer' at 0x7ffb50526890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2472bdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.1259382501961495
82, epoch_train_loss=1.1259382501961495
Epoch 83
Epoch 83 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7374929137697702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73749291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb385896b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300cc310; to 'JaxprTracer' at 0x7ffc300cf380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5db4cab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7104402945105333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71044029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c02c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142ae3e0; to 'JaxprTracer' at 0x7ff7142ad8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac68f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16624813823519288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16624814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8cf0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00c9530; to 'JaxprTracer' at 0x7ff9f00c93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22893b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3750693463370866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37506935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2df0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58232890; to 'JaxprTracer' at 0x7ffc58233510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ad675f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.9036472446160538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90364724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104900>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062d210; to 'JaxprTracer' at 0x7ffb70311da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25df8f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9740663908760199, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97406639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235480>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9032a430; to 'JaxprTracer' at 0x7ffb90328d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41fa5f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7719260960653802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7719261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dc060>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06ddfd0; to 'JaxprTracer' at 0x7ffbb06dcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48b0ee60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9989710051813201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99897101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df8e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705e9440; to 'JaxprTracer' at 0x7ffa705ea430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ada6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.48579776493217564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48579776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749120>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00f9a30; to 'JaxprTracer' at 0x7ffbd00fa840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499bdee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9723338746633426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97233387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d0960>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b4090; to 'JaxprTracer' at 0x7ffc584b40e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e0a82e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.8079307444651255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80793074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858b800>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38534e00; to 'JaxprTracer' at 0x7ffc902b6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88ae45b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.9069134183300476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90691342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2c60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f670b0; to 'JaxprTracer' at 0x7ff714f66070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x273a4cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.9385651962436875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9385652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bac50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e6890; to 'JaxprTracer' at 0x7ffbf00e49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2ba8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9896513744132949, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98965137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c91f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707c3bf0; to 'JaxprTracer' at 0x7ffc707c09f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94d4d670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.9344705051843104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93447051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107580>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa344e3010; to 'JaxprTracer' at 0x7ffa344e1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ed8b1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.907601374732243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90760137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284750>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01d9ad0; to 'JaxprTracer' at 0x7ffcb01d92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88b3e720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.853601936633641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85360194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714ed8830>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03477e0; to 'JaxprTracer' at 0x7ffbb0345580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e239d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9679740107214301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96797401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772560>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b359a80; to 'JaxprTracer' at 0x7ff71455f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x275218a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.850599678751702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85059968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4480>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01fa390; to 'JaxprTracer' at 0x7ff9d01f8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3084ef80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5910798572825067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59107986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0550>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd03e84f0; to 'JaxprTracer' at 0x7ffcd03eba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e8add50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8753404446400432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87534044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50658730>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90672070; to 'JaxprTracer' at 0x7ffc90670a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d225eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0683410913615017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.06834109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d5790>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03ffba0; to 'JaxprTracer' at 0x7ff9f03fcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x872bcc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.8303227522461394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83032275, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148b00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153dd0; to 'JaxprTracer' at 0x7ffa50153100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c55640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.17349208664206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.17349209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca850>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02012b0; to 'JaxprTracer' at 0x7ffcf0203240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97823a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.7036164841030377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70361648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb600>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0021a160; to 'JaxprTracer' at 0x7ffb38339260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50de86f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7804929969905041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.780493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193770>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb100e3510; to 'JaxprTracer' at 0x7ffb100e3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x650a7b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.8118440298999308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81184403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065fb30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0145c10; to 'JaxprTracer' at 0x7ffbd0147880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76411a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.1265500396230403
83, epoch_train_loss=1.1265500396230403
Epoch 84
Epoch 84 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7460454860855706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74604549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021c780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01ca750; to 'JaxprTracer' at 0x7ff9d01cba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x189793a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7131869330420071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71318693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848eac0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02a5f30; to 'JaxprTracer' at 0x7ffcd07a0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52fc7800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16392196723759264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16392197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7ef0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347258a0; to 'JaxprTracer' at 0x7ffa34725df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52243e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37249144404151224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37249144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e46b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9075a480; to 'JaxprTracer' at 0x7ff7a2ca9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75760d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8864188438360918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88641884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771590>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706825c0; to 'JaxprTracer' at 0x7ffc70682e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99db56b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9565406827468708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95654068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508f70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90317bf0; to 'JaxprTracer' at 0x7ffb903152b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e616ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7780786855211576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77807869, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107c50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145bcb30; to 'JaxprTracer' at 0x7ffb5067d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6368ecc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9934096683953614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99340967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107189f0; to 'JaxprTracer' at 0x7ffc1071a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30c34090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.47592634059118977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47592634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057260>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715743150; to 'JaxprTracer' at 0x7ff715742e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57dacec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9465173901947754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94651739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9037a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08625a80; to 'JaxprTracer' at 0x7ffb08625f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22839550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7964075230771736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79640752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021edd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ca65c0; to 'JaxprTracer' at 0x7ff7a2ca5440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8baddf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8833308874780041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88333089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e0b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd077d940; to 'JaxprTracer' at 0x7ffcd077c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92a47a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.9141651807726866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91416518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d70b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eccb740; to 'JaxprTracer' at 0x7ff70ecc93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x997b0c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9690791488931532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96907915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702d98a0; to 'JaxprTracer' at 0x7ffc702d8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a595fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.9109084223100827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91090842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b290>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074dad0; to 'JaxprTracer' at 0x7ffbd074fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3a4b370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8836941315101359, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88369413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509240>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e881350; to 'JaxprTracer' at 0x7ff70e880ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d1546c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.8315597264511797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83155973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241950>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00c8bd0; to 'JaxprTracer' at 0x7ff9f00c8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35f09230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9431660532420223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94316605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d0200>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10683100; to 'JaxprTracer' at 0x7ffc106833d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ca98bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8336519630363518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83365196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb1c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037fce0; to 'JaxprTracer' at 0x7ff9d037df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51fc3a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5860266132312698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58602661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02798d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f00cf40; to 'JaxprTracer' at 0x7ff70f00fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f25b600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8795097443397306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87950974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c460>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382db060; to 'JaxprTracer' at 0x7ffb382d8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa049a9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0486004410177474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04860044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c3100>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3062ce00; to 'JaxprTracer' at 0x7ffbf00e7330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60321800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.814469392814416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81446939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f2a80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716afb920; to 'JaxprTracer' at 0x7ff716afa2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef07d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1719337738969278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.17193377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744420>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf019e700; to 'JaxprTracer' at 0x7ffcf019fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x993f1f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6858158661441849, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68581587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90268640>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90290a90; to 'JaxprTracer' at 0x7ffb90290ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8825a750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7609815097453582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76098151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c8c20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02fa2a0; to 'JaxprTracer' at 0x7ffbf02f8540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465b5800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7983940957720015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7983941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6cb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7169305e0; to 'JaxprTracer' at 0x7ff716930ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x550bee30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0928357655890666
84, epoch_train_loss=1.0928357655890666
Epoch 85
Epoch 85 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7446687223781642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74466872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90684fd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d0270; to 'JaxprTracer' at 0x7ffbb00d3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d0a8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7018040115673982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70180401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032cf50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307cd3f0; to 'JaxprTracer' at 0x7ffc307cf6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33becb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15808175383175418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15808175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38589280>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501ce070; to 'JaxprTracer' at 0x7ffa501ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dac49d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3627342840595335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36273428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014ae90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067d490; to 'JaxprTracer' at 0x7ff9d067c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95c12c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8500016869987154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85000169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca3d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715159e40; to 'JaxprTracer' at 0x7ff715159760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90177460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9182583831977463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91825838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237bd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ef290; to 'JaxprTracer' at 0x7ffbb02ee9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314505a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7705216373285169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77052164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748db0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084212b0; to 'JaxprTracer' at 0x7ffb70312ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x739db720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9648744851889679, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96487449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748750>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34562e30; to 'JaxprTracer' at 0x7ffa34560680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b914ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4547850240777501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45478502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3be0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90476ca0; to 'JaxprTracer' at 0x7ffc704c77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa47e2900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9027622805730121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90276228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286ea0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715741120; to 'JaxprTracer' at 0x7ff715742ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59724980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7681828764660189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76818288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda550>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714592070; to 'JaxprTracer' at 0x7ff714591f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x547a68a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8423578790940721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84235788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e2f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf004b150; to 'JaxprTracer' at 0x7ffcf004ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x794f3100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8720792834829624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87207928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bcd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7142adcb0; to 'JaxprTracer' at 0x7ffc902de2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6ffb500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9281293792889646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92812938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101275a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08176430; to 'JaxprTracer' at 0x7ffb08174d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b10bd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8698797867927665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86987979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2480>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0201e40; to 'JaxprTracer' at 0x7ffcb0203510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27363100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8431291091302547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84312911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234740>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0297d80; to 'JaxprTracer' at 0x7ffcf02955d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447b6f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7929351371794278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79293514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773fa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0065c10; to 'JaxprTracer' at 0x7ff9f0067830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96816690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9002226134141552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90022261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4b20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900459e0; to 'JaxprTracer' at 0x7ffa90047ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989a1390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7984491917666072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79844919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cb550>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb074a0c0; to 'JaxprTracer' at 0x7ffcb074a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3adb2c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5692680527068205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56926805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086508a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c2320c0; to 'JaxprTracer' at 0x7ff70c230ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d38550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8640137724438194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86401377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f430>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008d1c0; to 'JaxprTracer' at 0x7ff9f008e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa779cee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0071964517395986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.00719645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a3e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00a4fe0; to 'JaxprTracer' at 0x7ffbd00a64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ed12e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7807076350334162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78070764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8930>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2c72520; to 'JaxprTracer' at 0x7ff9f00eebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25969b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1494948861225307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.14949489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125e00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70504590; to 'JaxprTracer' at 0x7ffc70504db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa69abcd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6535348249727486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65353482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a7b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011fe20; to 'JaxprTracer' at 0x7ffc9021f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a61c910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7257998624985283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72579986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02501e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab029d300; to 'JaxprTracer' at 0x7ff71610cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bf098c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7672914516379522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76729145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b8de0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70d546340; to 'JaxprTracer' at 0x7ff70d546480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4107eb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.066403091398188
85, epoch_train_loss=1.066403091398188
Epoch 86
Epoch 86 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7467166167221123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74671662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242d10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715698680; to 'JaxprTracer' at 0x7ff715699ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99713bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7029522523208297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70295225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd4e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10169300; to 'JaxprTracer' at 0x7ffc1016be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x810e5770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15266132168043242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15266132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90493f40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2e88630; to 'JaxprTracer' at 0x7ff7a2e8bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1302cc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.35616081486850476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35616081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086508f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3876a890; to 'JaxprTracer' at 0x7ffb38768ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9eb26e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8239861391610082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82398614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105caa80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34236750; to 'JaxprTracer' at 0x7ffa34236570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a4e9570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8901115459295982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89011155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda500>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f4540; to 'JaxprTracer' at 0x7ffbd06f7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52073c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7729060509145278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77290605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234a00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e5f8d0; to 'JaxprTracer' at 0x7ff715e5e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec0f1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9466663672684077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94666637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00744f90; to 'JaxprTracer' at 0x7ffb007466b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f3f0210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.43725059570880187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4372506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f057f90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eda13f0; to 'JaxprTracer' at 0x7ff70eda2340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88f8b480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8708766634620236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87087666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903f70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f06120c0; to 'JaxprTracer' at 0x7ff9f0610950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x228178b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7486238445946038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74862384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243bf0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0865ec50; to 'JaxprTracer' at 0x7ffb0865da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fd19430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8119622393539778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81196224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfde30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5ca90; to 'JaxprTracer' at 0x7ff716a5e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e5d33b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8410735268083065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84107353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90490fe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00edad0; to 'JaxprTracer' at 0x7ffbf00ecd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x287f29a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8976629140542965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89766291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906840b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a9080; to 'JaxprTracer' at 0x7ffbd02a9850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x470eb640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8398989953313388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.839899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c8330>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58232d90; to 'JaxprTracer' at 0x7ffc58233740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22691fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.813673771740329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81367377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473f360>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb026e8e0; to 'JaxprTracer' at 0x7ff70c162930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bd5d350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7638741090234625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76387411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508be0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7f560; to 'JaxprTracer' at 0x7ff715e7d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98999180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8688375057056167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86883751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9cf0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507408b0; to 'JaxprTracer' at 0x7ffb507439c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7da8b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.771913908900172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77191391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278a80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021c1d0; to 'JaxprTracer' at 0x7ffb5021d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c221ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5581081256291234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55810813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9c00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702df2e0; to 'JaxprTracer' at 0x7ffb702df510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54c24f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8584447910857695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85844479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bbb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed708b0; to 'JaxprTracer' at 0x7ff70ed709f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25ee4a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9776150771567258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97761508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c23c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10340a90; to 'JaxprTracer' at 0x7ffa10341760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85962620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7539907553536955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75399076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5330>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715484590; to 'JaxprTracer' at 0x7ff7154861b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x316e14c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1385530729811109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.13855307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685fc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb387392b0; to 'JaxprTracer' at 0x7ffbd04f1760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5724bdd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6282129574977633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62821296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d3020>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f0e50; to 'JaxprTracer' at 0x7ffb900f25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x895ae720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6989019259719395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69890193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288a90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1013a890; to 'JaxprTracer' at 0x7ffcb0403290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x246af490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7428320526464874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74283205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021f710>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158f3ab0; to 'JaxprTracer' at 0x7ff7158f3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5648f540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.057725909986855
86, epoch_train_loss=1.057725909986855
Epoch 87
Epoch 87 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7739977758430213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77399778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107721c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069f830; to 'JaxprTracer' at 0x7ffb5069f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x617babb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7292028631094764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72920286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191b10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702fca90; to 'JaxprTracer' at 0x7ffc702fd8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4491f520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15095629166527655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15095629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747750>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5019ce50; to 'JaxprTracer' at 0x7ffa5019d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4796170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3599382243150159, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35993822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b7b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715ecfe20; to 'JaxprTracer' at 0x7ff715ecde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54e990a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.828953020264461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82895302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055600>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd047bd30; to 'JaxprTracer' at 0x7ffbd0478f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99fe0e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8957565571564514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89575656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50237500>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ece50; to 'JaxprTracer' at 0x7ffbb02ed710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43ba9840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.8026005721782176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80260057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1e20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08421260; to 'JaxprTracer' at 0x7ffb08421a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cfe5f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9637444971516326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9637445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0c70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904af290; to 'JaxprTracer' at 0x7ffb904aec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2760f4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4332021055980348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43320211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7960>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b332250; to 'JaxprTracer' at 0x7ff70b333420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57edcc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.871077297681255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8710773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f4240>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71518a570; to 'JaxprTracer' at 0x7ff71518b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c933c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7558721600569195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75587216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773c70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071a160; to 'JaxprTracer' at 0x7ffc1071bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7762d630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8119158149939694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81191581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193290>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05e9530; to 'JaxprTracer' at 0x7ff9d05e8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770051c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8408122309851259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84081223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07458f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064c090; to 'JaxprTracer' at 0x7ffcb064c310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989a96a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9010122861651029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90101229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160e03b0; to 'JaxprTracer' at 0x7ffc707df4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ce5580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8388090955065012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8388091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055d70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10521800; to 'JaxprTracer' at 0x7ffcd04b44a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eeb7240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.812686514998133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81268651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c9820>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707570b0; to 'JaxprTracer' at 0x7ffc70754d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75a89e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7633988681996534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76339887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda5e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed20680; to 'JaxprTracer' at 0x7ff70ed229d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5122e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.870173507266868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87017351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9350>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0333fb0; to 'JaxprTracer' at 0x7ff715661300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49a647c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7736265398140431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77362654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10127920>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0247c40; to 'JaxprTracer' at 0x7ffcb0247150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ea6d150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5667843501251959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56678435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7120>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a1940; to 'JaxprTracer' at 0x7ffcf03a1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50f48f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.8843922530836955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88439225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fe3d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ebf60; to 'JaxprTracer' at 0x7ffbd06e9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288bc2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.985526675121018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98552668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c290>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70683560; to 'JaxprTracer' at 0x7ffc70680db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x474816b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7552840928011452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75528409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bb900>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004d6d40; to 'JaxprTracer' at 0x7ffb004d46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x319ec0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.1689161719777104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.16891617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102417c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10599f30; to 'JaxprTracer' at 0x7ffa105999e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79b5ca30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6244994618701759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62449946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f68f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706cd710; to 'JaxprTracer' at 0x7ffb706cddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b0dee90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.697659600019865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6976596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848d6c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70690220; to 'JaxprTracer' at 0x7ff71594fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b3e4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7447922429430215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74479224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287dc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504cc2c0; to 'JaxprTracer' at 0x7ffb504ccd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1f60450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.0305212218932351
87, epoch_train_loss=1.0305212218932351
Epoch 88
Epoch 88 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8323904932535703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83239049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bac0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0073f1a0; to 'JaxprTracer' at 0x7ffb0073dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52795fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7804126543409649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78041265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269bf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037ff10; to 'JaxprTracer' at 0x7ff9d037f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e5fdf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15535312739399415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15535313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f3e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e5a0ae0; to 'JaxprTracer' at 0x7ff70e5a1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9eee8250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37703380123820324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3770338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90493b90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0500540; to 'JaxprTracer' at 0x7ffab0502480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a09730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8690438526096336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86904385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653f80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90252d40; to 'JaxprTracer' at 0x7ffb10745710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30687f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9390281070154047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93902811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771910>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc707de070; to 'JaxprTracer' at 0x7ffb904687c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a1f0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.8628369064358729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86283691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234840>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1077f240; to 'JaxprTracer' at 0x7ffa1077fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48b41db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.018340552581016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01834055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502377a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716af9260; to 'JaxprTracer' at 0x7ff716afbc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53ff2600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.44910255747775296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44910256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901485a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06ab010; to 'JaxprTracer' at 0x7ffcb06a92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x845b7c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9101126571876397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91011266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903a60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb017bce0; to 'JaxprTracer' at 0x7ffbb01796c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72eb8ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7944508776031272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79445088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05091d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc584b7c90; to 'JaxprTracer' at 0x7ffbd00a4130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5409ca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8477963905860872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84779639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026bd70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716a5de90; to 'JaxprTracer' at 0x7ff716a5e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53fb9790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8783685596133857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87836856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065c9a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71634a750; to 'JaxprTracer' at 0x7ff716349a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b4f9980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9434016416356533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94340164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193690>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b29ab60; to 'JaxprTracer' at 0x7ff70b298ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c260d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8766899785303741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87668998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651360>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc58233bf0; to 'JaxprTracer' at 0x7ffc58231a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6ed5390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8489605142413518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84896051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473eb40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01dad40; to 'JaxprTracer' at 0x7ffab01db1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6979d3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.796592913598337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79659291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749240>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00b4590; to 'JaxprTracer' at 0x7ffcf00b5b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a0d4d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.9097715392143609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90977154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054e10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705e8b30; to 'JaxprTracer' at 0x7ffa705e85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8febded0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8088883812171298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80888838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb3858bca0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71570e610; to 'JaxprTracer' at 0x7ff71570e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d006130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5974887232748959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59748872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b87b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00fbe20; to 'JaxprTracer' at 0x7ffbd00fa980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x835b6d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9438320542192694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94383205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07454c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ee750; to 'JaxprTracer' at 0x7ffab02a59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b51730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0348625051091795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.03486251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c26e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b35a070; to 'JaxprTracer' at 0x7ff70b359ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98146ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7893811987665523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7893812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c2d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715663ce0; to 'JaxprTracer' at 0x7ff7156632e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c526d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2424686052598226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.24246861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032f3e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9021d990; to 'JaxprTracer' at 0x7ffc9021e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x236157d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6495649203745253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64956492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013db50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7005b470; to 'JaxprTracer' at 0x7ffc7005a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1731e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7273965837063953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72739658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253110>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168947c0; to 'JaxprTracer' at 0x7ff716897790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x516d55d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.778510088078946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77851009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d40a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a26390; to 'JaxprTracer' at 0x7ff7a2a26890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5beeefb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 1.004849592226402
88, epoch_train_loss=1.004849592226402
Epoch 89
Epoch 89 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8803416397003002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88034164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb580>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035c3b0; to 'JaxprTracer' at 0x7ff9f035c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ef520c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8190616533422994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81906165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9b20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302b8770; to 'JaxprTracer' at 0x7ffc302b8900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60857620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1566009160674317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15660092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301923a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715179440; to 'JaxprTracer' at 0x7ff715179f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x231bb4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3879795961036311, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3879796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8780>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147da7a0; to 'JaxprTracer' at 0x7ffb700a3740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33780df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8897698753537797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88976988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a670>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107bc4f0; to 'JaxprTracer' at 0x7ffb107bde90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e7a97f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9632105949174002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96321059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7028a1d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b5c10; to 'JaxprTracer' at 0x7ffc906b7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54eef10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9170383954112818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9170384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772190>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0330180; to 'JaxprTracer' at 0x7ffbf0332de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x577f47a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0542569329815614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.05425693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa107703c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0200a40; to 'JaxprTracer' at 0x7ffcf0200cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2761c9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4538692029950615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4538692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653850>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907bf8d0; to 'JaxprTracer' at 0x7ffc907bc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e82ed20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9280860413506603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92808604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021eff0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505136a0; to 'JaxprTracer' at 0x7ffcf0141850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95ab7650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.815343632173075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81534363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb530>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90524180; to 'JaxprTracer' at 0x7ffb90524040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b074f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8642314334691347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86423143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9db0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714857ba0; to 'JaxprTracer' at 0x7ff714854d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x355dce70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8953430752152761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89534308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190cf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90102980; to 'JaxprTracer' at 0x7ff7a29e4f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229efc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9662007949287768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.96620079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90269820>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382e73d0; to 'JaxprTracer' at 0x7ffb382e5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2266df60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8930744025507583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8930744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027b610>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582d4680; to 'JaxprTracer' at 0x7ffc582d4b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9586db50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8647687040890447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8647687, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054cc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bda30; to 'JaxprTracer' at 0x7ff716b3e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dcf7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.811626648619503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81162665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f39a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053d350; to 'JaxprTracer' at 0x7ffb9053e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x458e4f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.928635119769955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92863512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473da40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10750c20; to 'JaxprTracer' at 0x7ffa10753b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa40f6290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8269411428422674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82694114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd470>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00c8220; to 'JaxprTracer' at 0x7ff9f00c85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15943450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6173114047779876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6173114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0ef30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7cea0; to 'JaxprTracer' at 0x7ff715e7d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ef07570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9883709722413441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98837097, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f070>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009da80; to 'JaxprTracer' at 0x7ffcf009e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80f2aed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0637679957182986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.063768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10240ae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd071b240; to 'JaxprTracer' at 0x7ffbd071b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x763dea70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.8057491001412077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8057491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90685700>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb004a2700; to 'JaxprTracer' at 0x7ffb004a3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ac87e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2948400955468347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.2948401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bab20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa347258f0; to 'JaxprTracer' at 0x7ffa347241d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41967230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.658917880869226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65891788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bab0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a7bf10; to 'JaxprTracer' at 0x7ff70b35a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x668aabb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7403254405705322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74032544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6a20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed70d10; to 'JaxprTracer' at 0x7ff70ed70270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1ff140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7950656227518929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79506562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032e4e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0047f880; to 'JaxprTracer' at 0x7ffb0047f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96eab150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9993540961794671
89, epoch_train_loss=0.9993540961794671
Epoch 90
Epoch 90 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8918211702415014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89182117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0253580>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715189a80; to 'JaxprTracer' at 0x7ff715189d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fac6b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8197272649083513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81972726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c88e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02967a0; to 'JaxprTracer' at 0x7ffcf02962f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88d8bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15231094228048092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15231094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e7430>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0344540; to 'JaxprTracer' at 0x7ffbb0344e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ecf4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3847153229133412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38471532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b9a70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907016c0; to 'JaxprTracer' at 0x7ffc90700bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265a3d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8695831997603569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8695832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f060>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9075a660; to 'JaxprTracer' at 0x7ffc90759b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b4f4a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9430199560272016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94301996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfd9f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34237420; to 'JaxprTracer' at 0x7ffa342344a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac43230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9323239781523526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93232398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101246a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd4860; to 'JaxprTracer' at 0x7ff7a2cd6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x467b8bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0427284088966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04272841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125010>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05e8590; to 'JaxprTracer' at 0x7ff9d05e9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fdd7060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4385782577088198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43857826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50234de0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00747470; to 'JaxprTracer' at 0x7ffb00745b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x420bd170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.9037626403344668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90376264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c9039f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900dd5d0; to 'JaxprTracer' at 0x7ffa900dd440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6fb9600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7993569481677945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79935695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250600>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00781620; to 'JaxprTracer' at 0x7ffb00782ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x342de3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8411237640002182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84112376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9b30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1aee80; to 'JaxprTracer' at 0x7ff70c1ae2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x850d3040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8718661712158504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87186617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e75e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b6020; to 'JaxprTracer' at 0x7ffb1060e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3049c4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9448297690352857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.94482977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bab20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7158d1f80; to 'JaxprTracer' at 0x7ff7158d2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ce5930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8696997878837384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86969979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10243ac0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0434a90; to 'JaxprTracer' at 0x7ff9d0436520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f457790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8419541131945985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84195411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0dd20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c160810; to 'JaxprTracer' at 0x7ff70c162200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x343f27d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7894438663394365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78944387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651080>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714d06c00; to 'JaxprTracer' at 0x7ff714d07e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53d468b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.905006278654065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90500628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10771420>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d2020; to 'JaxprTracer' at 0x7ffbb00d18f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa254dea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.8072850282236239, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80728503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70288510>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ca5620; to 'JaxprTracer' at 0x7ff7a2ca5d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f45e420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.61113311645351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61113312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054910>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3833a340; to 'JaxprTracer' at 0x7ffb383393f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7bc1270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9939331202876924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99393312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a0e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ed22ed0; to 'JaxprTracer' at 0x7ff70ed22700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45563700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0444193958319599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0444194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02780f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70681a30; to 'JaxprTracer' at 0x7ffc70683e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98dd0a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7856327863536487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78563279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a520>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053c860; to 'JaxprTracer' at 0x7ffb9053dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53b35160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.292228850900189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.29222885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2fb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507420c0; to 'JaxprTracer' at 0x7ffb50742570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743a8960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6387059205903965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63870592, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301931e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346cdc60; to 'JaxprTracer' at 0x7ffa346cf330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x741cac20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7195772419781182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71957724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659af0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34727ce0; to 'JaxprTracer' at 0x7ffb9073af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65085490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7758340090821934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77583401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013ebc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70f051850; to 'JaxprTracer' at 0x7ff70f0516c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2b8380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.971932865509896
90, epoch_train_loss=0.971932865509896
Epoch 91
Epoch 91 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8775973722096913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87759737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd650>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2ed4e50; to 'JaxprTracer' at 0x7ff7a2ed5f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69634680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7948574959967183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7948575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c9cd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f035e4d0; to 'JaxprTracer' at 0x7ff9f035ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x350c5310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14491006745972956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14491007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9900>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01f8db0; to 'JaxprTracer' at 0x7ff9d01f98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x307c0d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3719971099127311, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37199711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f0554f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38537290; to 'JaxprTracer' at 0x7ffb385367f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25c543c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8229219069587131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82292191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235150>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30325df0; to 'JaxprTracer' at 0x7ffc30324ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71888c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8932987431388002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89329874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286000>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107a0f90; to 'JaxprTracer' at 0x7ffa107a2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76596a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9193555199534708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91935552, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfe9f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90297ce0; to 'JaxprTracer' at 0x7ffc902949f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b6d6880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9977972971559533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9977973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfc300>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa34563240; to 'JaxprTracer' at 0x7ffa34562ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a99b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4114976222150357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41149762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156b97e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70351e90; to 'JaxprTracer' at 0x7ffa70350b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cdc3010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.853067782399471, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85306778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e470>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153ba0; to 'JaxprTracer' at 0x7ffa501529d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa338a920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7593621525217374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75936215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dff40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f4040; to 'JaxprTracer' at 0x7ffc907f5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54488510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7932425100782178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79324251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cbc00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0682bb0; to 'JaxprTracer' at 0x7ffbd0680e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x874b9b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8232445821029174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82324458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8f50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0530400; to 'JaxprTracer' at 0x7ffbf0530720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67cd9b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8944703347320208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.89447033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a7a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07df920; to 'JaxprTracer' at 0x7ffcb07de2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95897af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8219776480532813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82197765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0a90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706167f0; to 'JaxprTracer' at 0x7ffa706151c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c8e7b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7954448968879926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7954449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10773690>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1032bce0; to 'JaxprTracer' at 0x7ffb10328b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c33f5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7438717918880774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74387179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5c60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705284f0; to 'JaxprTracer' at 0x7ffb5067eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73ceb760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8544846438301696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85448464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10241cb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037fd80; to 'JaxprTracer' at 0x7ff9d037e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a1b6090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.763169758165115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76316976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05085e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1d8860; to 'JaxprTracer' at 0x7ff70c1d8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13d1e210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5879114004469316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5879114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e4a80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a7e160; to 'JaxprTracer' at 0x7ff7a2a7eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13043070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9706236844801646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97062368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90491540>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582305e0; to 'JaxprTracer' at 0x7ffc58230360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2a7c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9927561274782434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99275613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252ce0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa342a4810; to 'JaxprTracer' at 0x7ffa342a5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x900119b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.742027979818579, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74202798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb38588130>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1078f060; to 'JaxprTracer' at 0x7ffa1078e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7687b950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2502570225402612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.25025702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cb4a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504c0d10; to 'JaxprTracer' at 0x7ffa504c2c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b63440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6005954099512498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60059541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065f940>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715e7cbd0; to 'JaxprTracer' at 0x7ff715e7fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5167f060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6777304853945977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67773049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286380>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a7b8d0; to 'JaxprTracer' at 0x7ff714a7af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b3ca690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7333720502061741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73337205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f66c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714a92520; to 'JaxprTracer' at 0x7ff714a92390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ad45d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9589774302963593
91, epoch_train_loss=0.9589774302963593
Epoch 92
Epoch 92 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.8831934725145298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88319347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f074bec0; to 'JaxprTracer' at 0x7ff9f074bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11034680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.7951394489782666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79513945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90148a50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1038f5b0; to 'JaxprTracer' at 0x7ffb1038f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x467cdfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14107814503913071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14107815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b130>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb077c630; to 'JaxprTracer' at 0x7ffcb077f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x302e67a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.36683479314340245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36683479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745ce0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90702d90; to 'JaxprTracer' at 0x7ffc907029d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af82620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8066056040266135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8066056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bb30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf036d800; to 'JaxprTracer' at 0x7ffcf036ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xba03490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8761214929306756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87612149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b360>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716aa5f80; to 'JaxprTracer' at 0x7ff716aa5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa706b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.9320698360593251, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93206984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10125b70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02476a0; to 'JaxprTracer' at 0x7ffcb0245490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97207c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9856636250626551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98566363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126a50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715119e90; to 'JaxprTracer' at 0x7ff71511b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fa30000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.39788650655290514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39788651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50235360>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907bfb00; to 'JaxprTracer' at 0x7ffc907bea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eb202e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8339628411462088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83396284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903a40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e5800; to 'JaxprTracer' at 0x7ffbf00e60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b302700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7459470343250616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74594703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb086503c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90476b10; to 'JaxprTracer' at 0x7ffc90476ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95ea0e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7745874634641934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77458746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149590>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504b3970; to 'JaxprTracer' at 0x7ffa504b3100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c14f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8046326892820959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80463269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bbe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1060d800; to 'JaxprTracer' at 0x7ffb1060fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f9318d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8764236796293968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87642368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686080>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8f7100; to 'JaxprTracer' at 0x7ff70e8f7510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5223ea20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8036327672262507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80363277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05090f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f012eed0; to 'JaxprTracer' at 0x7ff9f012e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca896c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7776476681862705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77764767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb450>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a46d0; to 'JaxprTracer' at 0x7ffa907a5990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc5c960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.72563089379748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72563089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfcdd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3053c720; to 'JaxprTracer' at 0x7ffc3053e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x766dbf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8356631152041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83566312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb083f3560; to 'JaxprTracer' at 0x7ffb083f0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816768e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7463961735315447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74639617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289e70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10680540; to 'JaxprTracer' at 0x7ffa107ecea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f159210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5832056017285043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5832056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f054b20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30102bb0; to 'JaxprTracer' at 0x7ffc30103d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d17d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9774498300566467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97744983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0278660>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0101ad0; to 'JaxprTracer' at 0x7ff9f0102e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f349330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9763293220010699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97632932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8720>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0103d30; to 'JaxprTracer' at 0x7ffb3828f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x603534c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7246668991488187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7246669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0251fd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90623510; to 'JaxprTracer' at 0x7ffc90622200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80ce1400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2458973331466783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.24589733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2db0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7160e1620; to 'JaxprTracer' at 0x7ffc58231fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33bc0860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5834786004377152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5834786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107260>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd021ea20; to 'JaxprTracer' at 0x7ffcd021d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d33eda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6603323515949372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66033235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f200>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08626200; to 'JaxprTracer' at 0x7ffc107183b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56d6d380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7164563184332285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71645632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d2df0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716afab10; to 'JaxprTracer' at 0x7ffb0025bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6112cfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.959518192870195
92, epoch_train_loss=0.959518192870195
Epoch 93
Epoch 93 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9368088228646164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93680882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284f50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10399260; to 'JaxprTracer' at 0x7ffb103996c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68c47670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8416882893659218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84168829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca630>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341fae30; to 'JaxprTracer' at 0x7ffa341f8a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7faaab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1428044228847469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14280442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9b60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06d4c20; to 'JaxprTracer' at 0x7ffcb06d6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2484af40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3780826405363994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37808264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f33c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e1760; to 'JaxprTracer' at 0x7ff9f07e22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b66f0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8365512435826253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83655124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506592b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1075c680; to 'JaxprTracer' at 0x7ff9d0435170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dc21230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9091551200315552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90915512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03de700>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50448a90; to 'JaxprTracer' at 0x7ffa50449530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af4b800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.989456704360061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9894567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0508ad0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7034fb50; to 'JaxprTracer' at 0x7ffa7034dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fe0d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0282996121657506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02829961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a240>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd045dc10; to 'JaxprTracer' at 0x7ffcd045e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3acf590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.40478726281928523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40478726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105ca950>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05dcdb0; to 'JaxprTracer' at 0x7ff9f05de660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eb6d860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8624934899509497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86249349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10242b10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715b9b6f0; to 'JaxprTracer' at 0x7ff715b9b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7511e510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7741549326206304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77415493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286300>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3062a0; to 'JaxprTracer' at 0x7ff70b304b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c159a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8003240480651869, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80032405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06cb5d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1030e070; to 'JaxprTracer' at 0x7ffa1056ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ff0e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8319058838133946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83190588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b97d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021c220; to 'JaxprTracer' at 0x7ffb5021e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c17f090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9082291236673891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90822912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7e90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f0db0; to 'JaxprTracer' at 0x7ffa902f2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24d99990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8303743949427739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83037439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772f50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701470b0; to 'JaxprTracer' at 0x7ffb70146b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7880a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8034531398467385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80345314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df760>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50719e40; to 'JaxprTracer' at 0x7ffb507188b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73da7060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7489929549085899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74899295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d3420>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b6f20; to 'JaxprTracer' at 0x7ffc902b7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b526f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8650863417279465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86508634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0744660>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70340db0; to 'JaxprTracer' at 0x7ff70eda0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47014a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7717238843924534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77172388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bba0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02adda0; to 'JaxprTracer' at 0x7ffcd02aeac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa41057e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.608274005154592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60827401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065d0d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30688090; to 'JaxprTracer' at 0x7ffc3068b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602f26e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0332610956443125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0332611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901495e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8362f0; to 'JaxprTracer' at 0x7ff70e837a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540f06d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0150726827303296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01507268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032ea10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905148b0; to 'JaxprTracer' at 0x7ffb90517e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0f00c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7482348924674734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74823489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289a10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71511ae30; to 'JaxprTracer' at 0x7ff71511b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47ad9be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.306377104614233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.3063771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7c50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828ea20; to 'JaxprTracer' at 0x7ffb3828d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a58f820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.598493238589628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59849324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0279800>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c233e20; to 'JaxprTracer' at 0x7ff70c230e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x938e0550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6802831688083255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68028317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191080>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a29e60c0; to 'JaxprTracer' at 0x7ff7a29e5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51f8cc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7397396019562086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7397396, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edb170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd071d4e0; to 'JaxprTracer' at 0x7ffbd071d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40e70d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9405329103511325
93, epoch_train_loss=0.9405329103511325
Epoch 94
Epoch 94 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9854566695296285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98545667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f67c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5011a110; to 'JaxprTracer' at 0x7ffa5011bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x828d5700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8828591531110919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88285915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7690>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147d9d00; to 'JaxprTracer' at 0x7ffbb07476f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x300c7330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14378937835754033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14378938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08653500>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30509620; to 'JaxprTracer' at 0x7ffc3050b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47a27540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.387015348492728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38701535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b380>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506be2a0; to 'JaxprTracer' at 0x7ffa506bf150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638c12c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8610507551995561, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86105076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0250150>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08174db0; to 'JaxprTracer' at 0x7ffb08177880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x620a5e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.936215155584156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93621516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050b990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07eb060; to 'JaxprTracer' at 0x7ff716b3f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6daccf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0412627117476503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04126271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065acd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3071a0; to 'JaxprTracer' at 0x7ff70b3054e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x623a3820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0640350988041645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0640351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659d50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008f650; to 'JaxprTracer' at 0x7ff9f008dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c92bc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.40885927294122143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40885927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770db0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5028fd30; to 'JaxprTracer' at 0x7ffb5028c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28a24920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8856608675367814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88566087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903e40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d2d90; to 'JaxprTracer' at 0x7ffb900d11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49648920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7973297106991534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79732971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7f80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704e7dd0; to 'JaxprTracer' at 0x7ffc704e71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54de1ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8209396224001714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82093962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d7760>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b2ccd10; to 'JaxprTracer' at 0x7ff70b2cfc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49116230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8540197465677141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85401975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08650330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb103510d0; to 'JaxprTracer' at 0x7ffb10353920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3126df90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9341931182039844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.93419312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705fd580>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855e5c0; to 'JaxprTracer' at 0x7ffb3855ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ade3f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8524309102560648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85243091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02532a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e66a7f0; to 'JaxprTracer' at 0x7ff70e66b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c74c620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8243990437495817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82439904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0745d40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706708b0; to 'JaxprTracer' at 0x7ffa70671300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42a5b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7674770826586514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76747708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dfa90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cd0b30; to 'JaxprTracer' at 0x7ff7a2cd0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44c7a3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8890654308114587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88906543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10772850>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd077c8b0; to 'JaxprTracer' at 0x7ffcd077c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3592c5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7920677128484653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79206771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289a10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7008aed0; to 'JaxprTracer' at 0x7ffb70089e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4be6700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6290583433068135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62905834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b9a20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8319e0; to 'JaxprTracer' at 0x7ff70e833790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e66250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.082635588898392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.08263559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c1720>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715c2bc90; to 'JaxprTracer' at 0x7ff715c2a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x978a5540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0471220576731695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04712206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687100>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304845e0; to 'JaxprTracer' at 0x7ff70b333e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4316d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7668023065424286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76680231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90149650>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90315210; to 'JaxprTracer' at 0x7ffb90315490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53df9960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3574727316016277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.35747273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7900>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb001d5df0; to 'JaxprTracer' at 0x7ffb9073bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa50795b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.6096162430813442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60961624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013e7d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1059b420; to 'JaxprTracer' at 0x7ffa1059a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80c55aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6957805743876152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69578057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70284540>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00d1300; to 'JaxprTracer' at 0x7ffbb00d2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56d69980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7580804562749249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75808046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bb100>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102b6de0; to 'JaxprTracer' at 0x7ffc102ca020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c056bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.948292204751474
94, epoch_train_loss=0.948292204751474
Epoch 95
Epoch 95 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.987280865724476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.98728087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e5f30; to 'JaxprTracer' at 0x7ffbf00e4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b308320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.881209260293146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88120926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10124aa0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7156985e0; to 'JaxprTracer' at 0x7ff71569bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40914eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1396059170900072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13960592, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a7150>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10112840; to 'JaxprTracer' at 0x7ffb101108b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12342550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37983974808317206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37983975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbbe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06bc5e0; to 'JaxprTracer' at 0x7ffbb06bdcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6750a4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8427890916003572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84278909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f0330>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ece27f0; to 'JaxprTracer' at 0x7ffb10763bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x392e2930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9171038557604974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91710386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065bc30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7168f8fe0; to 'JaxprTracer' at 0x7ff7168f8a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b58c290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0435736006418324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0435736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509440>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10543420; to 'JaxprTracer' at 0x7ffb10543100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d5da810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0465834257368964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04658343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bf10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e85ae80; to 'JaxprTracer' at 0x7ff70e858f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e67e5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.39368197978616354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39368198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b7e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf04507c0; to 'JaxprTracer' at 0x7ffcf0453790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c52bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8649440629159088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86494406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7151e6420>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50150db0; to 'JaxprTracer' at 0x7ffa50151da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2492f070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.780718552840317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78071855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30193cf0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2a68450; to 'JaxprTracer' at 0x7ff7a2a68db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e30540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.8007169800034004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80071698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101250f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0712d40; to 'JaxprTracer' at 0x7ffbf07110d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x739ae700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8340305570667191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83403056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a60a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716aa5170; to 'JaxprTracer' at 0x7ff7142728e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d504890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9143942913947315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91439429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106bb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b4bd0; to 'JaxprTracer' at 0x7ffcd04b7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8313fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8325507392901464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83255074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056770>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1010c040; to 'JaxprTracer' at 0x7ffc1010fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d07f3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8050219212193831, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80502192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff030>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7052be70; to 'JaxprTracer' at 0x7ffb705289f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c33c1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.747660448012034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74766045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026b0a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716897d80; to 'JaxprTracer' at 0x7ffc90672ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68dd4c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8686429113054378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86864291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab02522a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0200d10; to 'JaxprTracer' at 0x7ffcd0203150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35af03d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7737083949886371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77370839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014bf60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71481b600; to 'JaxprTracer' at 0x7ff71481bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88727b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6195665631346846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61956656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651be0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346c91c0; to 'JaxprTracer' at 0x7ffa346ca110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a212f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0796298132627242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.07962981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0f040>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa907a4810; to 'JaxprTracer' at 0x7ffa907a4cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33a0f550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.027478812681301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02747881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6be0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00ece50; to 'JaxprTracer' at 0x7ffbf00edf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bd36230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7472808622438443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74728086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06ca180>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07dcd10; to 'JaxprTracer' at 0x7ffcb07de430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645bf580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3409619181830021, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.34096192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107a60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7008b0b0; to 'JaxprTracer' at 0x7ffb7008b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e28da20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5910615642137864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59106156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f5740>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90317b50; to 'JaxprTracer' at 0x7ffb90316250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x841613e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6767938231690959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67679382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0021d280>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d011fbf0; to 'JaxprTracer' at 0x7ff9d011d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8663b130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7388262903757445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73882629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c93f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10578680; to 'JaxprTracer' at 0x7ffb105787c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b799a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9359865004903414
95, epoch_train_loss=0.9359865004903414
Epoch 96
Epoch 96 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9564830606878382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.95648306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03df6c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70313650; to 'JaxprTracer' at 0x7ffb70312bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x878dfca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8507663018802271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8507663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0747c30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10151710; to 'JaxprTracer' at 0x7ffb10153880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44ef04c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.132406458425834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13240646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106a30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053ce50; to 'JaxprTracer' at 0x7ffb9053e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447adaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3618516345303769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36185163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652430>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7154870b0; to 'JaxprTracer' at 0x7ff7154848b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x996db30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7941672937797345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79416729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065e6d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c8860; to 'JaxprTracer' at 0x7ff9d01c8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93696a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.865408105813149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86540811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9520>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702c9440; to 'JaxprTracer' at 0x7ffc702caf70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c512490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0114843309373145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01148433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659200>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3064d0; to 'JaxprTracer' at 0x7ff70b306a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x497bcfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9921798743475507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99217987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5065a900>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715412f20; to 'JaxprTracer' at 0x7ff715410040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e6c4e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.36682791693905514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36682792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cffc90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714f3e340; to 'JaxprTracer' at 0x7ff714f3fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86961350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8139791169779543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81397912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903660>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702d8a90; to 'JaxprTracer' at 0x7ffc702da480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x947ac960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7367987385005064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73679874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03def80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828eed0; to 'JaxprTracer' at 0x7ffb3828d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11429e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.752465031809101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75246503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07459b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2d0d490; to 'JaxprTracer' at 0x7ff7a2d0c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56e0b050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7852504342491355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78525043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01061c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504498f0; to 'JaxprTracer' at 0x7ffa5044aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fe18840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.862758973614936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86275897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848fc40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302faf70; to 'JaxprTracer' at 0x7ffc302f98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b575c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7846206804941462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78462068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ce90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10762c00; to 'JaxprTracer' at 0x7ffb10761530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bf12a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7583171864902727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75831719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bf90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0140040; to 'JaxprTracer' at 0x7ffbb0141620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x664d4b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7016884281844119, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70168843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050a5c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03fc7c0; to 'JaxprTracer' at 0x7ffc585d0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d6e7e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8174430698088544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81744307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff5d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa341fa0c0; to 'JaxprTracer' at 0x7ffa341fa430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x644309f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7287067992616929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7287068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f055000>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100bb1a0; to 'JaxprTracer' at 0x7ffc100ba2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ba93990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.5898926774329979, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58989268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163bbc20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90250ea0; to 'JaxprTracer' at 0x7ffc902509a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x291f58f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0414256563245776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04142566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc705ff530>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70109440; to 'JaxprTracer' at 0x7ffb70109620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a6312e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9719482481156839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.97194825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4fb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021e980; to 'JaxprTracer' at 0x7ffb5021f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e455e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7021534574750586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70215346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f6520>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd048a430; to 'JaxprTracer' at 0x7ffbd0488450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x618744c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.2777972531625734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.27779725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013ecf0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ea56840; to 'JaxprTracer' at 0x7ff70ea57560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa674f3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5533158407289518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55331584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa506d2e00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10719a80; to 'JaxprTracer' at 0x7ffc1071aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94703240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6345896018205557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6345896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d1940>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903160c0; to 'JaxprTracer' at 0x7ffb90314b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8daf2bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.6946100491014259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69461005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb006c2a00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1079de90; to 'JaxprTracer' at 0x7ffa1079dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54402ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9439544896700065
96, epoch_train_loss=0.9439544896700065
Epoch 97
Epoch 97 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.9876776988114151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9876777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026acd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30103a60; to 'JaxprTracer' at 0x7ffc301000e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2e15d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.8765870510502544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.87658705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904910f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d037dad0; to 'JaxprTracer' at 0x7ff9d037d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47b856b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13261123486919368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13261123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a70c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f76a0; to 'JaxprTracer' at 0x7ffbd06f5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e26ee40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3676840201558725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36768402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056f50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb382d89f0; to 'JaxprTracer' at 0x7ffb382db470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a00c3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8148374943929201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81483749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cff860>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3855d940; to 'JaxprTracer' at 0x7ffb3855d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf6b0600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8882043450963967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88820435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659840>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa103164d0; to 'JaxprTracer' at 0x7ffa103158f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48615870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0438767983910355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0438768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a180>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828d080; to 'JaxprTracer' at 0x7ffb3828c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52471a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0188994512742482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01889945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014b790>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50170db0; to 'JaxprTracer' at 0x7ffa50170d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb74000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.368680764869522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36868076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08651c80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb502463e0; to 'JaxprTracer' at 0x7ffb50246fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314576d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8336347978649499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8336348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0252f20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0497c90; to 'JaxprTracer' at 0x7ffcd0495850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185ea350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7546487980974645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7546488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9026a8f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05ebc40; to 'JaxprTracer' at 0x7ff9d05e9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d4fc370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7694276839554313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76942768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90492aa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9046bb00; to 'JaxprTracer' at 0x7ffb9046a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe4a6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8039263792606792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80392638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0533d80; to 'JaxprTracer' at 0x7ffbf0533010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x402b94d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8847726501601505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.88477265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dff80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0105490; to 'JaxprTracer' at 0x7ffbb0106890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63470cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8032250036829869, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.803225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f3820>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702b2b60; to 'JaxprTracer' at 0x7ffb702b1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eabe7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7761344833182792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77613448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50659e30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb10353650; to 'JaxprTracer' at 0x7ffb10353470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fd81a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7165006814535636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71650068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105c9d90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900af600; to 'JaxprTracer' at 0x7ffa900ae200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a378880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8375244781742487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83752448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c2e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb38338860; to 'JaxprTracer' at 0x7ffb3833a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67939bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7454866419401384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74548664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f7e60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50741cb0; to 'JaxprTracer' at 0x7ffb507409f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ef660c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6026445074759555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60264451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106510>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f007e660; to 'JaxprTracer' at 0x7ff9f007ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f503b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.0730304008875333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0730304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b2f7660>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1032d300; to 'JaxprTracer' at 0x7ffc1032c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59093270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.9975324161907899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.99753242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07448a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90738680; to 'JaxprTracer' at 0x7ffc106914e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6c8e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.716602713480497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71660271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b94a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714838e50; to 'JaxprTracer' at 0x7ffc904a9710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33100270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3112612789844045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.31126128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dd150>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00e4a90; to 'JaxprTracer' at 0x7ffa902f06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e13fee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.561626440040111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56162644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90687ba0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0201f80; to 'JaxprTracer' at 0x7ffcd02022a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ae12a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6466796569790786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64667966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02840c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1071b5b0; to 'JaxprTracer' at 0x7ff9d035ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b5dbc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7083576700534091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70835767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50236cf0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0047abb0; to 'JaxprTracer' at 0x7ffb700ab3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fe8c3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9293655109517497
97, epoch_train_loss=0.9293655109517497
Epoch 98
Epoch 98 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0239881758793787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.02398818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d04a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff716af8590; to 'JaxprTracer' at 0x7ff716af8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e06650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.9098754584644076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90987546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907499e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06d5350; to 'JaxprTracer' at 0x7ffcb06d4ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ddd1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13427042210308274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13427042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90686bc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa906fcef0; to 'JaxprTracer' at 0x7ffa906fdda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2feebb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.376521630520209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37652163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714eda250>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071a610; to 'JaxprTracer' at 0x7ff9f071bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbeb92b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8430854677363779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.84308547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0104510>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a2cab650; to 'JaxprTracer' at 0x7ff7a2caafc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b442e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9194894964852214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.9194895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08652720>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0711c60; to 'JaxprTracer' at 0x7ffbf0713b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f7e0a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0818062907922035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.08180629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30190d70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7147e53a0; to 'JaxprTracer' at 0x7ff7147e7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e8fc5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0545946466058769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.05459465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30191070>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009ed40; to 'JaxprTracer' at 0x7ffcf009df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dc269d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.375234011320642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37523401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a2cfea40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10450270; to 'JaxprTracer' at 0x7ffc10453380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2919d230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8617931987399662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8617932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c903890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715660b30; to 'JaxprTracer' at 0x7ffb08624590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41d93dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7795747970259496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7795748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307d04b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5068eed0; to 'JaxprTracer' at 0x7ffa5068f510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77621180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7942759870155379, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79427599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a090>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00218130; to 'JaxprTracer' at 0x7ffb00218e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3344a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.831024985907259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83102499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906847c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7040ec50; to 'JaxprTracer' at 0x7ffa7040fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43033e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9157026255523917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91570263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf013dfc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb044de40; to 'JaxprTracer' at 0x7ffbb044fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92a531a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8307509631797299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83075096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0107ec0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08144a90; to 'JaxprTracer' at 0x7ffb08144590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6b8ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.8022568079992606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80225681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7144d4d30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501cc900; to 'JaxprTracer' at 0x7ffa501cec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c54110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7386932505530248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73869325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9014a730>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0413ec0; to 'JaxprTracer' at 0x7ffcd0413330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ec808e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8659072450153209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86590725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70286810>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70eaf0f40; to 'JaxprTracer' at 0x7ff9f0565fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9326c450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7699775866789483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76997759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f1f60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd031b880; to 'JaxprTracer' at 0x7ffbd0319bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc5d850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.6199182233022694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61991822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70f056980>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f008cdb0; to 'JaxprTracer' at 0x7ff9f008e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78976460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.1105825031712002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.1105825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06c95c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0629080; to 'JaxprTracer' at 0x7ffcb062b420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50247c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.032384728528749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.03238473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a5380>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7011dc60; to 'JaxprTracer' at 0x7ff7142dd120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d7dc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7383858677945931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73838587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03dff60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50742cf0; to 'JaxprTracer' at 0x7ffb507415d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1745e0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3558593075401102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.35585931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848f420>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1032f470; to 'JaxprTracer' at 0x7ffc1032c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c0c53d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5765861079163717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57658611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904904a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa346ce430; to 'JaxprTracer' at 0x7ffa346cf560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x412c9760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6656665303924956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66566653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf027ac30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107195d0; to 'JaxprTracer' at 0x7ffa902f0220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be1d0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.729212247532067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72921225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10126230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb107404f0; to 'JaxprTracer' at 0x7ffb10740630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x727d8be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9297711373704824
98, epoch_train_loss=0.9297711373704824
Epoch 99
Epoch 99 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.019344647920423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.01934465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb105cae90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7166cbe20; to 'JaxprTracer' at 0x7ff7166cbc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28f5a6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-1.1598777909485636
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.9060591917326503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90605919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0fe00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb00747d30; to 'JaxprTracer' at 0x7ffb00747f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2730e8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.7327831607188107
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13170331501669325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13170332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e1a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff715451a30; to 'JaxprTracer' at 0x7ff7154521b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36757bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.29906755674574936
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37300099667620656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.373001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7163b8220>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa104f0270; to 'JaxprTracer' at 0x7ffa104f06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25ade9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.3717306401873604
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.8383823774404625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.83838238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70289020>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08147790; to 'JaxprTracer' at 0x7ffa70352bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c6dbf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.7898044507839799
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.9149421806743693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91494218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb074bdd0; to 'JaxprTracer' at 0x7ffcb074b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35f13be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-1.2918378666390122
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-1.0765690160252974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.07656902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065ecc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01e4ef0; to 'JaxprTracer' at 0x7ffcf01e5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fabfbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-1.0505514477192952
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.0492040151543578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.04920402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb065cb70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3828e890; to 'JaxprTracer' at 0x7ffb3828c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e0949e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-1.20692356021876
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3674410800202875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36744108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0106a60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa900dcd10; to 'JaxprTracer' at 0x7ffa900dd670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x534e9010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.2805231070500702
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.8561753289596735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.85617533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9032c6c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06c0860; to 'JaxprTracer' at 0x7ffbb06c22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64202ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.745757112172784
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7741291152566865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77412912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287f00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0358a40; to 'JaxprTracer' at 0x7ff9d035aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa13d0b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.6298532730933634
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.7878649322081652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78786493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff716b0c5a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02036a0; to 'JaxprTracer' at 0x7ffb08177dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb45270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.6260174836120053
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.8256954328616992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82569543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5848e800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064ce00; to 'JaxprTracer' at 0x7ffcb064f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b19270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.7631684684623573
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.9109101928322167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.91091019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0509e30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01c9940; to 'JaxprTracer' at 0x7ff9d01ca840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e5d39c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-1.3027168161256548
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8260598270729781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82605983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd01f05c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb007826b0; to 'JaxprTracer' at 0x7ffb00782110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4360fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Ref stats: shape=(9824,) mean=-0.9082076928233513
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7973133549632678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79731335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70287bb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900f0810; to 'JaxprTracer' at 0x7ffb900f0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5a241e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.8086635953617598
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.7317136175774909, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73171362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30192e80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70e8da0c0; to 'JaxprTracer' at 0x7ff716a5fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12051a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.5357266333437155
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.8602371117746077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.86023711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc304f72c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa906fd300; to 'JaxprTracer' at 0x7ffbd0074fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc57c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.7261654414588602
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.7644691706084981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76446917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714edba30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10681d00; to 'JaxprTracer' at 0x7ffc10681e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956c6c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-1.0068534784308825
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.613277763437093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61327776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3473e380>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb086c2160; to 'JaxprTracer' at 0x7ffb086c2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x514f5ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.33370635322830683
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-1.1048931890507427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.10489319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d03deb60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc582336a0; to 'JaxprTracer' at 0x7ffc582330b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f93e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.9519907861820248
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-1.0267358027440592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.0267358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7156bbd90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907f6fc0; to 'JaxprTracer' at 0x7ffb10112e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4408cd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-1.2433173685063403
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.7311694912583601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73116949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a4880>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506dd4e0; to 'JaxprTracer' at 0x7ffb506dcef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69682600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.7163717411825896
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-1.3475656976667238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.3475657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd050bd90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06298a0; to 'JaxprTracer' at 0x7ffcb0628770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e6d1650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-1.116720655895232
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5690080848239276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56900808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa10770120>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5072ce50; to 'JaxprTracer' at 0x7ffa5072cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48cff370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.4384117467911241
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6584567542744955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65845675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748900>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa902f3600; to 'JaxprTracer' at 0x7ffa902f2e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x130eea40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.48182862963321266
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.7214586619223291, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72145866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703cbea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a5bc0; to 'JaxprTracer' at 0x7ffb702a5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b0c470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.6329810520775324
Batch Loss = 0.9230265562927084
99, epoch_train_loss=0.9230265562927084

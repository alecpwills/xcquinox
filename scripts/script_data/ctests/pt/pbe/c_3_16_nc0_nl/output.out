/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf02f6860> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf02f6860> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffcf02f6860> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf02f6f50> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf02f6bf0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf0035090> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf0037e80> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf0034fd0> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf0035ab0> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf0036b00> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf00356c0> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0037160> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0036f50> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0037940> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf0037100> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf0035bd0> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0036c20> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0034340> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0036680> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf00368f0> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf00348e0> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0035f00> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0034d90> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0036950> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf0036860> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf0037c70> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf0036e00> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffcf0034190> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf0035630> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf02f6f50> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf02f6f50> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-8.21170344e-10 -5.08921978e-10 -1.11761057e-07 ... -1.39991317e-01
 -1.39991317e-01 -1.39991317e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046675  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf02f6bf0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf02f6bf0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc with xc_func = [-9.19718763e-10 -8.50773380e-12 -3.66647359e-15 ... -1.18880463e-01
 -1.18880463e-01 -1.18880463e-01] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597091, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025284, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.499812984008539  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0035090> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0035090> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc with xc_func = [-1.33444119e-09 -2.48043678e-11 -3.44348031e-15 ... -3.24373299e-02
 -3.24373299e-02 -3.24373299e-02] = ,PBE
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627842  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0037e80> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0037e80> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc with xc_func = [-1.37557672e-07 -1.50600495e-09 -1.50600495e-09 ... -1.88453418e-06
 -9.34847678e-02 -9.34847678e-02] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033802918942  <S^2> = 2.0027444  2S+1 = 3.0018291
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0034fd0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0034fd0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc with xc_func = [-8.71814964e-11 -1.62617966e-13 -5.42101086e-18 ... -1.22853758e-01
 -1.22853758e-01 -1.22853758e-01] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.7236344e-13, dtype=float64), Array(148.53259971, dtype=float64))
rho0_b = (Array(9.54760061e-16, dtype=float64), Array(148.54626014, dtype=float64))
gamma_a = (Array(5.88145357e-24, dtype=float64), Array(4945151.67328498, dtype=float64))
gamma_b = (Array(1.3069176e-29, dtype=float64), Array(4956869.12980392, dtype=float64))
gamma_ab = (Array(8.76487824e-27, dtype=float64), Array(4950938.31165902, dtype=float64))
tau_a = (Array(1.1032289e-12, dtype=float64), Array(4773.96992919, dtype=float64))
tau_b = (Array(1.43768168e-14, dtype=float64), Array(4747.12464306, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577121478  <S^2> = 0.7516194  2S+1 = 2.0016187
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0035ab0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0035ab0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc with xc_func = [-2.94536364e-10 -1.41767779e-09 -7.76442972e-12 ... -1.42656275e-01
 -1.42656275e-01 -1.42656275e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.25693153e-11, dtype=float64), Array(1561.90471271, dtype=float64))
rho0_b = (Array(3.11088057e-13, dtype=float64), Array(1561.95787319, dtype=float64))
gamma_a = (Array(1.30503255e-20, dtype=float64), Array(2.7317145e+09, dtype=float64))
gamma_b = (Array(6.46742227e-25, dtype=float64), Array(2.73215916e+09, dtype=float64))
gamma_ab = (Array(-1.32935463e-17, dtype=float64), Array(2.73193368e+09, dtype=float64))
tau_a = (Array(3.15226354e-11, dtype=float64), Array(239540.94872522, dtype=float64))
tau_b = (Array(4.58355767e-13, dtype=float64), Array(239371.75708847, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226560993738  <S^2> = 0.75226415  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036b00> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036b00> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc with xc_func = [-3.54808525e-06 -5.17712595e-07 -3.16397680e-08 ... -1.13509029e-13
 -2.32740595e-10 -2.59489153e-14] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.95729901e-12, dtype=float64), Array(679.40140666, dtype=float64))
rho0_b = (Array(5.9072032e-12, dtype=float64), Array(679.49865978, dtype=float64))
gamma_a = (Array(9.77897291e-23, dtype=float64), Array(2.66170711e+08, dtype=float64))
gamma_b = (Array(9.76672561e-23, dtype=float64), Array(2.66254716e+08, dtype=float64))
gamma_ab = (Array(1.07716736e-22, dtype=float64), Array(2.6621271e+08, dtype=float64))
tau_a = (Array(3.69848865e-12, dtype=float64), Array(56081.37751184, dtype=float64))
tau_b = (Array(2.09876186e-12, dtype=float64), Array(56073.23123411, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.938786804404  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00356c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00356c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-2.91598362e-10 -2.85057737e-10 -1.74140167e-09 ... -1.41348425e-01
 -1.41348425e-01 -1.41348425e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.90974693e-12, dtype=float64), Array(1294.97546988, dtype=float64))
rho0_b = (Array(9.43495789e-15, dtype=float64), Array(1295.10901134, dtype=float64))
gamma_a = (Array(1.97327465e-23, dtype=float64), Array(1.63838354e+09, dtype=float64))
gamma_b = (Array(5.04869125e-28, dtype=float64), Array(1.63892053e+09, dtype=float64))
gamma_ab = (Array(-2.12369895e-15, dtype=float64), Array(1.63865082e+09, dtype=float64))
tau_a = (Array(1.30115138e-12, dtype=float64), Array(172116.85526447, dtype=float64))
tau_b = (Array(9.82933419e-15, dtype=float64), Array(171895.27166913, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182912  <S^2> = 1.3322676e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0037160> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0037160> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc with xc_func = [-1.71390029e-13 -1.02199607e-16 -3.33970980e-12 ... -6.04627872e-02
 -6.04627872e-02 -6.04627872e-02] = ,PBE
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 7.1054274e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036f50> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036f50> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc with xc_func = [-7.79327774e-14 -3.55020539e-10 -2.71133289e-12 ... -5.74328996e-16
 -5.74762677e-16 -7.79347832e-14] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.64475682, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933656, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204669, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850635, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = -1.7763568e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0037940> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0037940> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc with xc_func = [-2.33480507e-07 -7.75990571e-09 -1.38708048e-07 ... -6.76654044e-07
 -5.04688188e-02 -5.04688188e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.15074649, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.15767295, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420972, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.3377924465131  <S^2> = 4.0072656e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0037100> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0037100> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc with xc_func = [-1.28965430e-11 -1.95923464e-15 -4.27191919e-15 ... -6.49048383e-02
 -6.49048383e-02 -6.49048383e-02] = ,PBE
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746184, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036921, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391553, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026184e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322844  <S^2> = 1.4210855e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0035bd0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0035bd0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc with xc_func = [-4.43384099e-12 -1.92417848e-12 -3.22387721e-10 ...  0.00000000e+00
 -1.14188564e-01 -1.14188564e-01] = ,PBE
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35237498, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.35046412, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.35141955, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601495, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601224, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.005608888959  <S^2> = 4.9737992e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036c20> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036c20> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc with xc_func = [-3.40913430e-08 -8.87192881e-10 -1.62718226e-06 ... -8.87192880e-10
 -5.59744128e-02 -5.59744128e-02] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.2256862e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0034340> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0034340> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc with xc_func = [-4.07233166e-13 -1.27095600e-16 -2.72317933e-10 ... -6.11312151e-02
 -6.11312151e-02 -6.11312151e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996861, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158354, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577608, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.214894542413  <S^2> = 1.0018599  2S+1 = 2.2377309
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036680> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036680> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc with xc_func = [-4.47000878e-11 -8.61981927e-14 -7.04731412e-18 ... -6.61293753e-02
 -6.61293753e-02 -6.61293753e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.60895668e-13, dtype=float64), Array(148.29947231, dtype=float64))
rho0_b = (Array(1.60895639e-13, dtype=float64), Array(148.29947231, dtype=float64))
gamma_a = (Array(3.37975139e-25, dtype=float64), Array(4951708.97591024, dtype=float64))
gamma_b = (Array(3.37975017e-25, dtype=float64), Array(4951708.97592592, dtype=float64))
gamma_ab = (Array(2.14509247e-24, dtype=float64), Array(4951708.97591808, dtype=float64))
tau_a = (Array(2.73394744e-13, dtype=float64), Array(4771.62334863, dtype=float64))
tau_b = (Array(2.73394698e-13, dtype=float64), Array(4771.62334862, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346375  <S^2> = 1.2434498e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00368f0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00368f0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc with xc_func = [-1.71679348e-13 -1.71678156e-13 -7.19667087e-10 ... -7.04338389e-15
 -4.90685509e-15 -4.90934875e-15] = ,PBE
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931845e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.0149324, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01409488, dtype=float64))
gamma_ab = (Array(1.65925441e-22, dtype=float64), Array(440696.01451364, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.29901851, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901762, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.5725203e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf00348e0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf00348e0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc with xc_func = [-6.33104786e-11 -3.57449909e-10 -1.88463532e-08 ... -6.22578679e-02
 -6.22578679e-02 -6.22578679e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683901, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.34129878, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.34406889, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374078  <S^2> = 5.8619776e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0035f00> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0035f00> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc with xc_func = [-6.96925937e-12 -5.28440139e-16 -1.35124117e-15 ... -3.20968833e-02
 -3.20968833e-02 -3.20968833e-02] = ,PBE
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018922  <S^2> = 7.7049478e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0034d90> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0034d90> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc with xc_func = [-2.03296153e-08 -2.11140102e-08 -2.11140102e-08 ... -1.03260661e-02
 -1.03260661e-02 -1.03260661e-02] = ,PBE
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.586109e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036950> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036950> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc with xc_func = [-1.27764758e-07 -1.27764758e-07 -3.69492645e-07 ... -1.27764758e-07
 -1.27764758e-07 -3.69492645e-07] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.6558491, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498151, dtype=float64))
gamma_ab = (Array(6.900802e-19, dtype=float64), Array(74474467.5454153, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845814  <S^2> = 8.31335e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036860> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036860> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc with xc_func = [-1.26617467e-12 -7.35928039e-11 -3.91748201e-06 ... -1.36439237e-01
 -1.36439237e-01 -1.36439237e-01] = ,PBE
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469575  <S^2> = 2.5391245e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0037c70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0037c70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc with xc_func = [-2.82659562e-08 -6.72494447e-11 -7.07973177e-15 ... -7.07572569e-02
 -7.07572569e-02 -7.07572569e-02] = ,PBE
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.565335924773  <S^2> = 1.0034706  2S+1 = 2.23917
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0036e00> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0036e00> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc with xc_func = [-1.02775373e-12 -5.83380349e-12 -5.83334889e-12 ... -5.31290541e-02
 -5.31290541e-02 -5.31290541e-02] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.40437586e-12, dtype=float64), Array(856.05048966, dtype=float64))
rho0_b = (Array(8.40437534e-12, dtype=float64), Array(856.05048965, dtype=float64))
gamma_a = (Array(2.86014522e-22, dtype=float64), Array(5.06808651e+08, dtype=float64))
gamma_b = (Array(2.86014486e-22, dtype=float64), Array(5.06808651e+08, dtype=float64))
gamma_ab = (Array(2.93938723e-22, dtype=float64), Array(5.06808651e+08, dtype=float64))
tau_a = (Array(4.2774166e-12, dtype=float64), Array(79367.69591722, dtype=float64))
tau_b = (Array(4.27741632e-12, dtype=float64), Array(79367.69591747, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864077  <S^2> = 3.1619152e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0034190> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0034190> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc with xc_func = [-5.41425036e-10 -5.68267731e-12 -4.33870604e-16 ... -1.81809862e-15
 -1.81980624e-15 -1.81996887e-15] = ,PBE
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271682, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483504  <S^2> = 6.2034822e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf0035630> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf0035630> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc with xc_func = [-4.35296088e-10 -1.35621223e-14 -2.71086213e-12 ... -1.38359588e-02
 -1.38359588e-02 -1.38359588e-02] = ,PBE
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437818  <S^2> = 1.3152146e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc with xc_func = [-4.48109087e-10 -5.22667575e-12 -5.16107339e-16 ... -7.45822674e-16
 -7.46879772e-16 -7.51541841e-16] = ,PBE
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.011782482583459116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01178248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520500>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3052f7e0; to 'JaxprTracer' at 0x7ffc3052f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31097600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.014106124975172347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01410612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164500>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016ebb0; to 'JaxprTracer' at 0x7ffc1016e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a9ef2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009330071970800973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00933007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7d30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd053f2e0; to 'JaxprTracer' at 0x7ffbd053d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49003380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010993113558939985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01099311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb4e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0595e90; to 'JaxprTracer' at 0x7ffbb0380680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c8a1d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.016594826235311926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01659483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212b40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707beb10; to 'JaxprTracer' at 0x7ffb707be700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551b9680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.016473729174463873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01647373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02861c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50376ca0; to 'JaxprTracer' at 0x7ffb50377100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a84b5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.011647363780582023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01164736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb0c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05f1bc0; to 'JaxprTracer' at 0x7ffcf017b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bceb260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01497567128522081, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01497567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbd50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48232390; to 'JaxprTracer' at 0x7ffb48232340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ba2030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01835443419260703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01835443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d100>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90229e40; to 'JaxprTracer' at 0x7ffb40529940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ebaa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.019500666597079667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a26d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0140ef0; to 'JaxprTracer' at 0x7ffaf0140770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68565070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01707225068858301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01707225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522900>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0754c70; to 'JaxprTracer' at 0x7ffab0754ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69d04830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.019514124053469622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01951412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101666f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8592020; to 'JaxprTracer' at 0x7ffaa8591e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64f44440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.019313072472504987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01931307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a61f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703c77e0; to 'JaxprTracer' at 0x7ffa703c7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x738c0050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.017779031625216112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01777903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed0d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c2153f0; to 'JaxprTracer' at 0x7ffa4c215530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70078a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0192543351044888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01925434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604050>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4474db20; to 'JaxprTracer' at 0x7ffa442c0c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76102a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.01877019814362803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0187702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506298d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c122930; to 'JaxprTracer' at 0x7ffa3c1227a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aa5c230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019384261076156876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01938426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbe40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067d2b0; to 'JaxprTracer' at 0x7ff9d4703e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81c0f0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.01887386351364804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01887386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2080>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f44359e0; to 'JaxprTracer' at 0x7ff9d47db560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78f3bd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.017603124050253285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01760312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc1d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b03a9fd0; to 'JaxprTracer' at 0x7ff9b0123f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f28e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.015767515813143375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01576752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9840>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0636c00; to 'JaxprTracer' at 0x7ff7b05e66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86a3e120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01120233278017074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01120233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa875ef40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f15e90; to 'JaxprTracer' at 0x7ff713f167a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d2e4940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.017471549569776618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01747155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0b20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137ee7a0; to 'JaxprTracer' at 0x7ff7137ee8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94aeeb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.018599853080372042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01859985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476840>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d82f70; to 'JaxprTracer' at 0x7ff712d82de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c2f4c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.015216533537970815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01521653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7e00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712342a70; to 'JaxprTracer' at 0x7ff7123428e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96be46d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.020156916035560534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02015692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1960>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bcc6d0; to 'JaxprTracer' at 0x7ff711bccbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ae17c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.019280985521644978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01928099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3210>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6493f0; to 'JaxprTracer' at 0x7ff70c64ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e459a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.018539453174487797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01853945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057c8e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bbde660; to 'JaxprTracer' at 0x7ff70bbdeac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f7b57d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.028590115453081724
0, epoch_train_loss=0.028590115453081724
Epoch 1
Epoch 1 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.038076189592833154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03807619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d3d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712baf650; to 'JaxprTracer' at 0x7ff712baf560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x837e69b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.033853885432682654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03385389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07476c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0184950; to 'JaxprTracer' at 0x7ff7b0187d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b4620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010289220304346546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01028922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3170>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4702480; to 'JaxprTracer' at 0x7ff9d4702700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd2a3a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.020975505429122465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e71c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c446f20; to 'JaxprTracer' at 0x7ffa4c446520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26100dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.031932570108202996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03193257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f360>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae077b470; to 'JaxprTracer' at 0x7ffae077bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9208c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.036953343641381156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03695334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335970>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30615120; to 'JaxprTracer' at 0x7ffc30614f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x300d4cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.038270233021030775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03827023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1240>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70261a30; to 'JaxprTracer' at 0x7ffb70190630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33fe8030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.036552437186035326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03655244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705da7f0; to 'JaxprTracer' at 0x7ffb705da840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33fb5a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02118824927150897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629c00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0798860; to 'JaxprTracer' at 0x7ffbb079a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39263850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.033168390211502655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03316839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a8f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05ee390; to 'JaxprTracer' at 0x7ffbf03a9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17fb07c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02788572117007688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02788572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fb70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102f53f0; to 'JaxprTracer' at 0x7ffc102f72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d8ce830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.030514045258877572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03051405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07459f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e4e50; to 'JaxprTracer' at 0x7ffc301680e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x764bd4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.032999975072427135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03299998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3bb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706185e0; to 'JaxprTracer' at 0x7ffc70618180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x557c1e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03796474792908094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03796475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477ff0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9060c5e0; to 'JaxprTracer' at 0x7ffc9060fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a59150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.035182216708986885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03518222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ebe10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb069a7a0; to 'JaxprTracer' at 0x7ffcb069b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45752fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.03329933538487645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03329934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337ab0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00e0130; to 'JaxprTracer' at 0x7ffcf00e2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341f89e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02846793965724371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02846794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1ec0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8797b50; to 'JaxprTracer' at 0x7ffaa87958a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x547c80d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.03241691789487172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03241692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629d50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0633ec0; to 'JaxprTracer' at 0x7ff9b0633510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40584b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.03289137257783407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03289137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251390>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3ff650; to 'JaxprTracer' at 0x7ffa3c3fcef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b3a0b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.02263426206588365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee780>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444ed670; to 'JaxprTracer' at 0x7ffa444ec0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x393f4110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.03808370641542902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03808371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d4a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa440e9940; to 'JaxprTracer' at 0x7ffaa83246d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39421d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.038171901107329674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0381719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e710>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0117600; to 'JaxprTracer' at 0x7ffae01162f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa98fa8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.029756562774766588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02975656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d60f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703704a0; to 'JaxprTracer' at 0x7ffb70370450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be8ada0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.03837832983514829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03837833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101655b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5057cc70; to 'JaxprTracer' at 0x7ffb707f40e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fea360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.026145999011000048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.026146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3b00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0064090; to 'JaxprTracer' at 0x7ff9b0065a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9be73870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.027103621703844224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02710362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523b10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a201d0; to 'JaxprTracer' at 0x7ff71417c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649be250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.028823414700870645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02882341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907489d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e1cd10; to 'JaxprTracer' at 0x7ff711b56840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62cc2af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.05706249756084855
1, epoch_train_loss=0.05706249756084855
Epoch 2
Epoch 2 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03387373353036703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03387373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287150>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e34c0; to 'JaxprTracer' at 0x7ffbd06e3c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fec2da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.029200401390770188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0292004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5990>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87d5f30; to 'JaxprTracer' at 0x7ffaa87d7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa45775e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009779685609294828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00977969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c18d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d44e2890; to 'JaxprTracer' at 0x7ff9d44e2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3198820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.019175254170711933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01917525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d65f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf017a840; to 'JaxprTracer' at 0x7ffcf017bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4132fe70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.028326812433414172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02832681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c590>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb069a5c0; to 'JaxprTracer' at 0x7ffcb069ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x610f3440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.032907392021040024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03290739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253a30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904ee4d0; to 'JaxprTracer' at 0x7ffc90296750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c839e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.03435733130197704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03435733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b690>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506792b0; to 'JaxprTracer' at 0x7ffc50679e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66083c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03163379207314408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03163379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb9c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e3ec0; to 'JaxprTracer' at 0x7ffc502e30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5faf6b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019445608798457057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01944561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1510>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01028e0; to 'JaxprTracer' at 0x7ffbf0102700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a2bab00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.029564172805495836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02956417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616190>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70639940; to 'JaxprTracer' at 0x7ffb70639350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28751320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.024355558880554896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02435556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285820>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711c29b70; to 'JaxprTracer' at 0x7ff711c29350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8078d620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.027064541682166147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02706454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0740>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40700810; to 'JaxprTracer' at 0x7ffb40700540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40c81e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.029478339888997975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02947834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8b50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40044450; to 'JaxprTracer' at 0x7ffb40044860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x552df4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03400107358705343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03400107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6760>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0213b00; to 'JaxprTracer' at 0x7ffae06b2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e30fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.03179798864910455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03179799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ec20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70185940; to 'JaxprTracer' at 0x7ffa70184630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e155130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.030082617629126035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03008262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252fd0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442ed530; to 'JaxprTracer' at 0x7ffa442ed2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x619ada80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.025150703883590794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb120>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a6b60; to 'JaxprTracer' at 0x7ff9d45a62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x651a87a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02865280555003534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02865281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2a30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0374360; to 'JaxprTracer' at 0x7ff9b03777e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987e9a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.029560097116983125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0295601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03343e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125ab0b0; to 'JaxprTracer' at 0x7ff7132be070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x896d59b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019849710512160217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01984971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea440>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128df0b0; to 'JaxprTracer' at 0x7ff7128dfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88f2cb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.03473501402609117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03473501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4752b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3fc630; to 'JaxprTracer' at 0x7ffa3c3fd7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x104d1470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.033839391725003734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03383939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c39d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa82f2de0; to 'JaxprTracer' at 0x7ff712865670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c5a48c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026460341040239532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02646034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e2b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f178d0; to 'JaxprTracer' at 0x7ff713f17830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3473f1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.032838704998707044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0328387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e30b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712bae4d0; to 'JaxprTracer' at 0x7ff712bad760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65eb3660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023596969100085755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9220>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706ad120; to 'JaxprTracer' at 0x7ff7d05edbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50497410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.024022275316491214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0560>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74c400; to 'JaxprTracer' at 0x7ffa4c74c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b85fe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02553249301684349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02553249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac8260>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10127790; to 'JaxprTracer' at 0x7ffc10124810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b02aec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.03978802675254661
2, epoch_train_loss=0.03978802675254661
Epoch 3
Epoch 3 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02738282678443172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02738283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a4e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712340810; to 'JaxprTracer' at 0x7ff712340950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x305d00d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02261251779805586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7340>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119d2a20; to 'JaxprTracer' at 0x7ff7119d2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x151f7390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009418101220823876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0094181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0e20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193fba0; to 'JaxprTracer' at 0x7ff71193f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab3e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.016807582027819033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01680758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8890>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4739170; to 'JaxprTracer' at 0x7ff9d473a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa98422c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.024987644239684182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02498764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6620>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444bb3d0; to 'JaxprTracer' at 0x7ffa444bbec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ff04c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.030578123171941227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03057812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdce0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50427560; to 'JaxprTracer' at 0x7ffc50427420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77ecb630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.026640884413145077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02664088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253590>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7023a2a0; to 'JaxprTracer' at 0x7ffb7023b420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f3a560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.029069797806403577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0290698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252e50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb020cb30; to 'JaxprTracer' at 0x7ffbb020fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b127460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.018533929479599406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01853393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f5b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ba610; to 'JaxprTracer' at 0x7ffbd03b99e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93a23010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.025636794266608105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02563679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf680>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30748540; to 'JaxprTracer' at 0x7ffc3074a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67425c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0221974737823801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748e00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05c0d60; to 'JaxprTracer' at 0x7ff7b05c1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51921bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023631075243033945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6520>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a5940; to 'JaxprTracer' at 0x7ffc704a5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3fc540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0258484313553334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02584843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3710>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900c9850; to 'JaxprTracer' at 0x7ffc900c9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85f8b560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0316374229539777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03163742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e13f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a7650; to 'JaxprTracer' at 0x7ffc9062df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x958725a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02888119176965787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02888119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3400>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04fc090; to 'JaxprTracer' at 0x7ffcd04feed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x799abce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.026747716406116572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02674772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be970>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01d88b0; to 'JaxprTracer' at 0x7ffcd04789a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45781870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022081826857071253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250820>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d00e4ea0; to 'JaxprTracer' at 0x7ff7d00e49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b1c3260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.024930280331682847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02493028, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e660>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c66a8e0; to 'JaxprTracer' at 0x7ffa3c669d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bc4ae40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.027610424983866868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02761042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498a60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c37e520; to 'JaxprTracer' at 0x7ffa3c37d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77b4d610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0166902486126247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01669025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251ea0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90470860; to 'JaxprTracer' at 0x7ffc90470f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445d2220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024192350021638807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef4f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90173420; to 'JaxprTracer' at 0x7ffb707f7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x311a32c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.031189800439790024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0311898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e0d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a6cf0; to 'JaxprTracer' at 0x7ffc702a7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79cbeeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0248917231046328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02489172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f470>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7030e0c0; to 'JaxprTracer' at 0x7ffaa82f3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c800190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.029465535888152403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02946554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8e80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50454a90; to 'JaxprTracer' at 0x7ff7b05976f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d1fb4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021507870684025168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9d20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10124ae0; to 'JaxprTracer' at 0x7ffc10127ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ac4f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0213795041358079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164390>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71289a840; to 'JaxprTracer' at 0x7ff71289b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dc67490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02398838255511351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2770>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713794d10; to 'JaxprTracer' at 0x7ffaa874b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b84fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.022013744969208816
3, epoch_train_loss=0.022013744969208816
Epoch 4
Epoch 4 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.010811600246189497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0108116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522d50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304c7b00; to 'JaxprTracer' at 0x7ffc304c5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbff8d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.013607869130897605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01360787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287780>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713066980; to 'JaxprTracer' at 0x7ffbb0168400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418a5fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008872099461248709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0088721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e58c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70620c20; to 'JaxprTracer' at 0x7ffbd0782fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3caf0280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013581973122935563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01358197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d68a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141b6520; to 'JaxprTracer' at 0x7ff7141b4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x706c0ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.015091530031501417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01509153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c880>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03531a0; to 'JaxprTracer' at 0x7ffcf0351530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68a17050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.014852717318999974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01485272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252c60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902951c0; to 'JaxprTracer' at 0x7ffc902953f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7497d880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.010570899370868747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0105709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049aa70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10563ec0; to 'JaxprTracer' at 0x7ff7b05e4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95036e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.013603610701973107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01360361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9c20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121acf40; to 'JaxprTracer' at 0x7ff7121af240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98a121d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.017078043098750068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01707804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0910>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10704400; to 'JaxprTracer' at 0x7ffc10706020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b883ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.01774248347443103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01774248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101128c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03cfbf0; to 'JaxprTracer' at 0x7ffbb03cd580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77b18d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.014928454996105272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01492845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523780>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06f1df0; to 'JaxprTracer' at 0x7ffae06f23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5daebd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01782465236291739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01782465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286470>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bfec00; to 'JaxprTracer' at 0x7ff711bffc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a08b080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.017356836764231994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01735684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167fd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055bd80; to 'JaxprTracer' at 0x7ffb4055ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37af06c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.01575548063954176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01575548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4e30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0792200; to 'JaxprTracer' at 0x7ffab07910d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x411c4360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.017242057409165467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01724206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c9d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85927f0; to 'JaxprTracer' at 0x7ffaa8593d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be27ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.01684393506103839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01684394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252540>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c2154e0; to 'JaxprTracer' at 0x7ffa4c216e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98510780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.017654813070052386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01765481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8170>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d005b330; to 'JaxprTracer' at 0x7ff7d005a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x256d0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.017170914882984844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01717091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619680>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa7b50; to 'JaxprTracer' at 0x7ff713fa4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80532de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.01593917654736589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01593918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9460>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01af4c0; to 'JaxprTracer' at 0x7ffbb01aee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f461bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01443287841059691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01443288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03349b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125b0810; to 'JaxprTracer' at 0x7ff7125b1440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d44fc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.00970318202751545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00970318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bee50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9017f5b0; to 'JaxprTracer' at 0x7ffb9017d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68683690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.015414868636634636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01541487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e59d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90194ae0; to 'JaxprTracer' at 0x7ffc706ad260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x325b0540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.01680553374141012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01680553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c0d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050c810; to 'JaxprTracer' at 0x7ffbf050c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45f082c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.013789407148702856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01378941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eae90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123ac180; to 'JaxprTracer' at 0x7ff7123ad990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95b4cf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.01847262805268923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01847263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745540>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10127790; to 'JaxprTracer' at 0x7ffc101255d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x706175c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.017601086976496993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01760109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3ba0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd98f0; to 'JaxprTracer' at 0x7ff713797bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a3a8130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.016920206211874567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01692021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6100>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07153a0; to 'JaxprTracer' at 0x7ff7d0715800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x555f5ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.03563149984764321
4, epoch_train_loss=0.03563149984764321
Epoch 5
Epoch 5 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.013407151811273478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01340715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ea50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713527970; to 'JaxprTracer' at 0x7ff713527b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd25a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016460506661222642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01646051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147830>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c8d60; to 'JaxprTracer' at 0x7ffaa85cad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75f32ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009117473772690558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00911747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e0c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3aed40; to 'JaxprTracer' at 0x7ff70c3ad030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53064200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.014450097863268204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0144501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ebad0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c259990; to 'JaxprTracer' at 0x7ffa4c258fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0f3ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01762001867287206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01762002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e76d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab057fba0; to 'JaxprTracer' at 0x7ffab057d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a6dd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01674599017515193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01674599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bcaf0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb405590d0; to 'JaxprTracer' at 0x7ffb4055a750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dccc0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.012962809239894886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01296281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482504c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073e5c0; to 'JaxprTracer' at 0x7ffb7073c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4d7ac20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.015681321902494976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01568132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482517a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076cf90; to 'JaxprTracer' at 0x7ffbd076efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4199f4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.017912019544765338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01791202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbf80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ba660; to 'JaxprTracer' at 0x7ffbd03ba1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a203920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02018912920193955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02018913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616ca0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07178d0; to 'JaxprTracer' at 0x7ffbd0716980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa124e8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016975791038266633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01697579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c0c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f23e0; to 'JaxprTracer' at 0x7ffb703f00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc59cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.019881252499720413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01988125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146610>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026a520; to 'JaxprTracer' at 0x7ffb7026b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6633d680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.01981940950297241, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01981941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833db80>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90744630; to 'JaxprTracer' at 0x7ffc90747060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3dc390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.01770850902046578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01770851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8fc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0434ea0; to 'JaxprTracer' at 0x7ffc9024c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d4f0330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.019818017809708325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01981802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e73d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0416700; to 'JaxprTracer' at 0x7ffcb0416480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c326320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.019396206823436794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01939621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334850>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01d8630; to 'JaxprTracer' at 0x7ffbf01dbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c7a1c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.01945733889470855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01945734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253f00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f415b060; to 'JaxprTracer' at 0x7ff9f4159fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x249a1dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.019541584342293562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01954158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa200>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42c62f0; to 'JaxprTracer' at 0x7ff9d42c7150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x651e7d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.017548212553809776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01754821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605420>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712867560; to 'JaxprTracer' at 0x7ff7128651c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x546a4c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.015619078303927517, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01561908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253760>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705c4400; to 'JaxprTracer' at 0x7ffa705c4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x546fcc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.011884567981446386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01188457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee910>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b00b7a60; to 'JaxprTracer' at 0x7ff9b00b67a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6475e420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.017549471217640767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01754947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb430>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01e6070; to 'JaxprTracer' at 0x7ff7b01e57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7050f3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.018328578978495307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01832858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d940>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a21e40; to 'JaxprTracer' at 0x7ffaa83248b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c8fa280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.01632058202704209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01632058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167eb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0601490; to 'JaxprTracer' at 0x7ff9b0602cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80391180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019860074650178822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01986007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9eb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb483d1fd0; to 'JaxprTracer' at 0x7ffb483d1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41dde530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.019206881923652396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01920688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7af0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb405538d0; to 'JaxprTracer' at 0x7ffb40551d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fa85040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.01841921968201472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01841922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02859d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00867a0; to 'JaxprTracer' at 0x7ffaf0086610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa83b1d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.026196943988307207
5, epoch_train_loss=0.026196943988307207
Epoch 6
Epoch 6 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.029280364941468177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02928036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01579c0; to 'JaxprTracer' at 0x7ffae01578d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x271b9850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02232136523416703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbac0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48473740; to 'JaxprTracer' at 0x7ffb48471e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a854ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00954338974807923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00954339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0300>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ed3f0; to 'JaxprTracer' at 0x7ff9d42eed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40cd7210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0169233957399028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0169234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9840>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035d350; to 'JaxprTracer' at 0x7ffbd035eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e5b8b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.023200637075385482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02320064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021dcd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0292110; to 'JaxprTracer' at 0x7ffcd0293a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666ed3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.030634472429276815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03063447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253610>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307edee0; to 'JaxprTracer' at 0x7ffc307ec400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ebb0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.029466369793744753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02946637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1590>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf033a110; to 'JaxprTracer' at 0x7ffbf033a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43793380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02923579490372349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02923579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125cbbf0; to 'JaxprTracer' at 0x7ff7125c9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47204330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019063793478406154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01906379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d560>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30766d90; to 'JaxprTracer' at 0x7ffbf05bbba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d010e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.024525963592956498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02452596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cda30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903e2750; to 'JaxprTracer' at 0x7ffb903e34c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cd14b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.021586721298900484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07759e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03943b0; to 'JaxprTracer' at 0x7ffaf03976a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd5ad700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023217752684885164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca990>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c47bd80; to 'JaxprTracer' at 0x7ff70c47b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5976a950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.024592997929457242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.024593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b39e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4059e570; to 'JaxprTracer' at 0x7ffb4059e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65c83a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03166083449478986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03166083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167050>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50140ae0; to 'JaxprTracer' at 0x7ffb501406d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4335de80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.026789996157696953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f82e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c214270; to 'JaxprTracer' at 0x7ffa4c216840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49207440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.024896164994132226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02489616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702521e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa83a7420; to 'JaxprTracer' at 0x7ffaa83a51c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bc951e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02212445867683013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1c60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45389a0; to 'JaxprTracer' at 0x7ff9d453a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38071550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023954464787015194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d0d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713372fc0; to 'JaxprTracer' at 0x7ff711e7df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f385550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.027783942733587134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02778394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea0f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0119300; to 'JaxprTracer' at 0x7ff7b01182c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25692530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018830624386853408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01883062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf360>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3d44a0; to 'JaxprTracer' at 0x7ff70c49ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34795640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.030097737818259536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03009774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2930>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70922ba10; to 'JaxprTracer' at 0x7ff709229a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4789ed30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.03128187615381966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03128188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c600>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01918a0; to 'JaxprTracer' at 0x7ffbd01932e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dc2ec60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025284751879943092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02528475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e29c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b00b5670; to 'JaxprTracer' at 0x7ff9b00b55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x423361a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02974231035005061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02974231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31860>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa441308b0; to 'JaxprTracer' at 0x7ff70c1084a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fac0ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021828018939163567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746170>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0114720; to 'JaxprTracer' at 0x7ffae0114f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8320b6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021579976980654732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e420>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40550bd0; to 'JaxprTracer' at 0x7ffb405529d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e44a110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024357218200738634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02435722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714202a30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4846cd60; to 'JaxprTracer' at 0x7ff9b078f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73c43e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.023848198521953187
6, epoch_train_loss=0.023848198521953187
Epoch 7
Epoch 7 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022030908618377403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02203091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1ec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab070bfb0; to 'JaxprTracer' at 0x7ffab0708a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11ca4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020792153422424384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506298f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417f290; to 'JaxprTracer' at 0x7ff71417fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f2ed5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009564886732929928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00956489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748dc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442378d0; to 'JaxprTracer' at 0x7ffa442375b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x256076b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.016458097362341002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0164581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ea600>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0418d60; to 'JaxprTracer' at 0x7ff7b0418b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a440c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.021555524476623747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02155552, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6b40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c1760; to 'JaxprTracer' at 0x7ffa442c2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39cd73e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022765039847792334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ebe50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400e80e0; to 'JaxprTracer' at 0x7ffb400ea3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7c1c4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023064750921144888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02306475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252f80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303cd1c0; to 'JaxprTracer' at 0x7ffc303cf3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6da76c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022014431978054923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2e40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711908f40; to 'JaxprTracer' at 0x7ff711908680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d9d4810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019077288202826653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01907729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211b70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30767600; to 'JaxprTracer' at 0x7ffc30764900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96b71bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023419916895114155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02341992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101105c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e0810; to 'JaxprTracer' at 0x7ffbd06e2520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20668f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02038743186998198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02038743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3d40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30469210; to 'JaxprTracer' at 0x7ffc30468e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x867c6060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022488287718941017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa450>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505ea070; to 'JaxprTracer' at 0x7ffc505eb5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55811910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023355308034911846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02335531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746970>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e1da0; to 'JaxprTracer' at 0x7ffc900e1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d62a4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.023876878859093866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eaa30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0380180; to 'JaxprTracer' at 0x7ff7d03807c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x470e28e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024581837728999835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02458184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6280>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d3740; to 'JaxprTracer' at 0x7ffcd02d1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ff7a6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023349020814599303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8cc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442ee4d0; to 'JaxprTracer' at 0x7ffa442ecf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x479f5170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02168467993098339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0d20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01c2430; to 'JaxprTracer' at 0x7ffae01c3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d18eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022806831380154925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0460>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07806d0; to 'JaxprTracer' at 0x7ffc50645620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41147760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.022206098175418243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499450>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4472b60; to 'JaxprTracer' at 0x7ff712127790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7f7b090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018479796021599208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0184798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702508f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061a6b0; to 'JaxprTracer' at 0x7ffc70619fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e238430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025467013297964865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02546701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01effb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9071aa20; to 'JaxprTracer' at 0x7ffc704a5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44c9caf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024056332623985703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02405633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c8c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4538ae0; to 'JaxprTracer' at 0x7ff9d453a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x824a85c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022137907744904844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164830>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70922bd80; to 'JaxprTracer' at 0x7ff70922b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83cf9d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023477237407900888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02347724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab030>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123adee0; to 'JaxprTracer' at 0x7ff7123af240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c35dd60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021620130252975173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0168ea0; to 'JaxprTracer' at 0x7ffbf016a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccf1120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02122705953448695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02122706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305204e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4865d080; to 'JaxprTracer' at 0x7ffb4865f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d106a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02189691069571146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9a10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4b4d10; to 'JaxprTracer' at 0x7ffa4c4b58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5c9a930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.010358009830108747
7, epoch_train_loss=0.010358009830108747
Epoch 8
Epoch 8 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.018503816981084224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01850382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a68c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f17290; to 'JaxprTracer' at 0x7ff713f158f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dea4b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019446594076377326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01944659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d40b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1955d0; to 'JaxprTracer' at 0x7ffa3c196c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9adb4620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009457058736757272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00945706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618440>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70153600; to 'JaxprTracer' at 0x7ffa701522f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6efb02b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013511235254579557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01351124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab3e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4189710; to 'JaxprTracer' at 0x7ffcb0710310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9da12550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020754867677911355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02075487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166f00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025d620; to 'JaxprTracer' at 0x7ffcb025c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bdd54c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01999057300090691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01999057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa010>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904a4310; to 'JaxprTracer' at 0x7ffc904a49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62e1f750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.019607194209494968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607b40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05efce0; to 'JaxprTracer' at 0x7ff712165800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5944a3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019296511228005755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01929651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606af0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf033af20; to 'JaxprTracer' at 0x7ffbf033a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ca328f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.018785946553961014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01878595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3b20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10331080; to 'JaxprTracer' at 0x7ffc10333dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x984bccd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022846464384307874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70617250>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c47afc0; to 'JaxprTracer' at 0x7ff7d0047150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743804f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019886438897176936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01988644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6f80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7470; to 'JaxprTracer' at 0x7ffc902b46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45f85fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022148634569484113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d63a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ee5c0; to 'JaxprTracer' at 0x7ffc100ef2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x583d50b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022882123885055998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618df0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400eab60; to 'JaxprTracer' at 0x7ffb400e91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x473edb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02119552563037654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab710>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0792660; to 'JaxprTracer' at 0x7ffab07922a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58b9e1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023822567423980544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e810>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c123560; to 'JaxprTracer' at 0x7ffa3c122b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x436692b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022786123560388196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250b30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d034bd30; to 'JaxprTracer' at 0x7ff712152c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b8d0960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021444057992082384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02144406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706052b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04640e0; to 'JaxprTracer' at 0x7ffcb0466c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x828d11f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022242714702819924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2930>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b57150; to 'JaxprTracer' at 0x7ff71308bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36640860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.020232952963043768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02023295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03356f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907dd120; to 'JaxprTracer' at 0x7ff9d47036a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x504f9d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017499685979352943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01749969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea6a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417f1f0; to 'JaxprTracer' at 0x7ff71417fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa123bd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01839205002034899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01839205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be6b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48418810; to 'JaxprTracer' at 0x7ffb4841bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x352813d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02150838450205791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e37f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0601620; to 'JaxprTracer' at 0x7ff9b06009f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a6c0f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02093266184158139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02093266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407cb70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7092002c0; to 'JaxprTracer' at 0x7ff709201760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x505bdf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02105062596514982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747b70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068dd00; to 'JaxprTracer' at 0x7ffc3068c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41de6500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021501324991127935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32120>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47a3650; to 'JaxprTracer' at 0x7ff9d47a2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1092fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020975472099152508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476f10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4b6890; to 'JaxprTracer' at 0x7ffa4c4b5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1359b730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.020981200161391787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0209812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628a00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b66e80; to 'JaxprTracer' at 0x7ff711b676a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88018ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.012007131403944543
8, epoch_train_loss=0.012007131403944543
Epoch 9
Epoch 9 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023629514977205092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144da0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90413a60; to 'JaxprTracer' at 0x7ffc904118f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4223c5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020845665534276595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286500>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db4770; to 'JaxprTracer' at 0x7ff712db6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4082a980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009741955221106456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00974196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e61e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ed5760; to 'JaxprTracer' at 0x7ff711ed4400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5532a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.016253594905229606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01625359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747960>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73ffb0; to 'JaxprTracer' at 0x7ffa4c73ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa830d670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.022008985859473678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2420>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15fba0; to 'JaxprTracer' at 0x7ffa3c15f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3398d2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02580619414366828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02580619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb950>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf062ea20; to 'JaxprTracer' at 0x7ffaf062fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37e6f110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023782621116220752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1a70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121abba0; to 'JaxprTracer' at 0x7ff7121aad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1fc6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024447853547275036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02444785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1fe0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb079a3e0; to 'JaxprTracer' at 0x7ffbb079bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2639d8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019419378237127624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01941938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f810>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d00469d0; to 'JaxprTracer' at 0x7ffbf0585710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a1d1e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02380216355162554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cde40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf077d120; to 'JaxprTracer' at 0x7ffbf077d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5be63990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02080144634644343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02080145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147b10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41af740; to 'JaxprTracer' at 0x7ff9f41acbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e0d6830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02284222549751078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286300>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900397b0; to 'JaxprTracer' at 0x7ffc9003b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e1ddf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02378635767214371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7510>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b2110; to 'JaxprTracer' at 0x7ffc906b2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x390cb4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02693104060997617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02693104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07478a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8151620; to 'JaxprTracer' at 0x7ffaa8153d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6282f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025279040863268806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1740>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01e9a80; to 'JaxprTracer' at 0x7ffcf01ead40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ec0150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02386525608710145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336060>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060a9d0; to 'JaxprTracer' at 0x7ffcb060abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60fda360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021979239335985935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902105c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706395d0; to 'JaxprTracer' at 0x7ffb70639670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x479f1c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023176376309818423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02317638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c7b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50759c10; to 'JaxprTracer' at 0x7ffb507596c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x490295e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024495577768043873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499fc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018f830; to 'JaxprTracer' at 0x7ffbd057da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a408a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018494046136225333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01849405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f85f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3d3bf0; to 'JaxprTracer' at 0x7ff70c3d2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb506810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025639300340150172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0256393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c7c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ea8360; to 'JaxprTracer' at 0x7ff9d4571ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97ec6150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026650433423999798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02665043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d56a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48440040; to 'JaxprTracer' at 0x7ff9d42c0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97ea3870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023344543196474048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102abee0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a9d50; to 'JaxprTracer' at 0x7ff7125a8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cf6cb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025107020636602483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305235a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104f0a90; to 'JaxprTracer' at 0x7ffc104f3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64545eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02199374192140041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d920>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d71f0; to 'JaxprTracer' at 0x7ffbb03d6ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58511300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021528377344398254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6df0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90074c70; to 'JaxprTracer' at 0x7ffc90074040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88be4a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022831955748559556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02283196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3a50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50610950; to 'JaxprTracer' at 0x7ff70c4797b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e568f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.011123113649734338
9, epoch_train_loss=0.011123113649734338
Epoch 10
Epoch 10 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020999242874926223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02099924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70372de0; to 'JaxprTracer' at 0x7ffb703725c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39d3aa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020321627199894436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02032163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714202370>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50434c70; to 'JaxprTracer' at 0x7ffb50434270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15cada80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009771707112238721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00977171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d56a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c215ee0; to 'JaxprTracer' at 0x7ffa4c2173d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533df080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01629924527378231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01629925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521870>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0714770; to 'JaxprTracer' at 0x7ffbd0716b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a022bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02165259363043104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02165259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7f30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87f3650; to 'JaxprTracer' at 0x7ff71264d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8541a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022939264267439363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02293926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021fc50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307ed5d0; to 'JaxprTracer' at 0x7ffc307ec360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85fc30a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021349924934222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702500b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073f5b0; to 'JaxprTracer' at 0x7ffc1073fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2260d300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022050695703293006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50679e40; to 'JaxprTracer' at 0x7ffc5067bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43d87a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019456636295815444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01945664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f12e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0587790; to 'JaxprTracer' at 0x7ffbf0584e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ad272d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023560815306556727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02356082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10110b50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0244900; to 'JaxprTracer' at 0x7ffcd0244ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bbe28f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020493688109563278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02049369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01efac0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c0d10; to 'JaxprTracer' at 0x7ff7137c0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2871fa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022670593111089845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142003b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504e7880; to 'JaxprTracer' at 0x7ffc504e7600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1071a860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023509380616046394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307117b0; to 'JaxprTracer' at 0x7ffc30711080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7327acb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0240595333798129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02405953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305213d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39e390; to 'JaxprTracer' at 0x7ffa3c39ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9bbfd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024840114982055534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02484011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7810>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05f0400; to 'JaxprTracer' at 0x7ffcb05f0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x734db910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023535853467691797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9980>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73f2e0; to 'JaxprTracer' at 0x7ffa4c73cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa61f07c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021854289266421575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252ee0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0740310; to 'JaxprTracer' at 0x7ff7d07416c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x872f4bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022917030787220447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0ca0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4326f20; to 'JaxprTracer' at 0x7ff9d4327380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64bb1f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.022470873669664337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250e70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b858f0; to 'JaxprTracer' at 0x7ff712b868e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4915ade0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017735714409885486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01773571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336ca0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90589580; to 'JaxprTracer' at 0x7ffb90588720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75bc07c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01913530301729161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0191353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ebea0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0058590; to 'JaxprTracer' at 0x7ffcf0059ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d8908f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02409464448565052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e12c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01ebd30; to 'JaxprTracer' at 0x7ffb40543650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99b51da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02239203946665822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d090>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0082980; to 'JaxprTracer' at 0x7ff9b0082840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86a35a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023335516400082097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02333552, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747360>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e63e0; to 'JaxprTracer' at 0x7ff7b03e5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x663f04c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021950166427709597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475650>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab057cfe0; to 'JaxprTracer' at 0x7ffab057ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c68cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021438564089861167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02143856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5160>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506125c0; to 'JaxprTracer' at 0x7ffc7045aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b652060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02216800516457031, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2c40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f0720; to 'JaxprTracer' at 0x7ffaa854e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78eadc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.008041301237827836
10, epoch_train_loss=0.008041301237827836
Epoch 11
Epoch 11 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020840515150388754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fbb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0101170; to 'JaxprTracer' at 0x7ffbf0101800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3351020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02017363383841292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02017363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145b10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41884a0; to 'JaxprTracer' at 0x7ff9f4188220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6783a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009803443587072498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00980344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286470>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107509f0; to 'JaxprTracer' at 0x7ffc10751ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3748a430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0159554698545978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01595547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745bb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d02660; to 'JaxprTracer' at 0x7ff713d022f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c5bba50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02163072249650066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c900>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04d6570; to 'JaxprTracer' at 0x7ff7141b5b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fe9a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023044980602097975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02304498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb690>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307109a0; to 'JaxprTracer' at 0x7ffc30711da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18722070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020983174657690867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02098317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e30d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7042cfe0; to 'JaxprTracer' at 0x7ffa7042c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x178da420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022118913892544865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1b20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05bbf10; to 'JaxprTracer' at 0x7ffbf05b8270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9be68c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019510604234518822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0195106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212310>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10597380; to 'JaxprTracer' at 0x7ffc105976a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x682b1c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02354548093329219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614be0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bfa2a0; to 'JaxprTracer' at 0x7ff711bfa340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98837210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02049394605462733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02049395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d1f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1413a0; to 'JaxprTracer' at 0x7ffbb03cc5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e304cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022660376079789487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146cb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05e7560; to 'JaxprTracer' at 0x7ff7b05e4bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33f37690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02351446027292574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285310>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8794f40; to 'JaxprTracer' at 0x7ffaa8795850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81afb0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02420279112914447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747d30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025f470; to 'JaxprTracer' at 0x7ffcb025e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x783eb4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02486317714004057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02486318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1a20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d00e6d90; to 'JaxprTracer' at 0x7ff7d00e54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cd43f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023544399322945008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334b80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07172e0; to 'JaxprTracer' at 0x7ffbd07155d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7ed190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021856836856357798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e05c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0053fb0; to 'JaxprTracer' at 0x7ffcf00501d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x807661e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02290182596673296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210b80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07aefc0; to 'JaxprTracer' at 0x7ff7141e1da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38502bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.022571880644651446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251d10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02ea2a0; to 'JaxprTracer' at 0x7ffab02e9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f5f8b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017589967328447094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01758997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f90b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01ac310; to 'JaxprTracer' at 0x7ffbb01adbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88bdcd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018751008495514632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b4b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074c7c0; to 'JaxprTracer' at 0x7ffbd074d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f990a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024214192936990675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02421419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10165fe0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ec860; to 'JaxprTracer' at 0x7ff9d42ee2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65cdbb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02246420140225748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d66c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03b89a0; to 'JaxprTracer' at 0x7ff9d4325530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f029280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023364393073695366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02336439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b3890>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0083b00; to 'JaxprTracer' at 0x7ff9b00831a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55f99b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02198384542476984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305224d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705b0950; to 'JaxprTracer' at 0x7ffb48443ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x617d0350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021459658713689118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02145966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775ec0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8112c00; to 'JaxprTracer' at 0x7ffaa8111fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa11e3a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022235414207473856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a974c0; to 'JaxprTracer' at 0x7ff713a97600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97785fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.007807529926366275
11, epoch_train_loss=0.007807529926366275
Epoch 12
Epoch 12 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02131883652312542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e3d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e4ef0; to 'JaxprTracer' at 0x7ff7b03e7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1c4f8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01999175880665222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01999176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9050>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70373790; to 'JaxprTracer' at 0x7ffb90398db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c889a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009806648095844906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00980665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6d80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c215620; to 'JaxprTracer' at 0x7ffa4c2153a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31581510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.015553500747754004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0155535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520930>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0704220; to 'JaxprTracer' at 0x7ffcd0707e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f477260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.021647091922045322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7e00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87f3830; to 'JaxprTracer' at 0x7ffaa87f0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4caf9760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023941411761010698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499cd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706fcb80; to 'JaxprTracer' at 0x7ffc706fe570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e6444c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021248362958627368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252650>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30363d30; to 'JaxprTracer' at 0x7ffc30362e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50bb7330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022854461834904253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0353920; to 'JaxprTracer' at 0x7ffcf0353c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e59250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019508640466466713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e0a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105953f0; to 'JaxprTracer' at 0x7ffc105940e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa82c4af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023493166891557376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02349317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c04e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c0ae0; to 'JaxprTracer' at 0x7ff7137c0c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ec802c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02055577630988018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02055578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d0b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7130011c0; to 'JaxprTracer' at 0x7ff713001b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31103fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022607100805527258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f85f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40703a10; to 'JaxprTracer' at 0x7ffb40702f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8816fb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02353362617800818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7ee0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06b1080; to 'JaxprTracer' at 0x7ffa3c0bfb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x804d2800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02513300220003694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.025133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521d90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141b6d90; to 'JaxprTracer' at 0x7ffc306cc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ba5660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024967960038401377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02496796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4b30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f43100; to 'JaxprTracer' at 0x7ff713f41580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dee2150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02358921151019731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049bb80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713524a90; to 'JaxprTracer' at 0x7ff713526020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x510249b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02183558671165603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629fd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304fb100; to 'JaxprTracer' at 0x7ffc304f9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a6efcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02287278211623255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605e50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a7740; to 'JaxprTracer' at 0x7ffc506a7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73f5d730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023216455794066605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334d30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa81222f0; to 'JaxprTracer' at 0x7ffaa8121850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x661b8f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01754459648986803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0175446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250030>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706afb50; to 'JaxprTracer' at 0x7ffc706ac130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42db2e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01895364540205849, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01895365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3500>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c172de0; to 'JaxprTracer' at 0x7ff70c171580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49222c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02502503201341813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02502503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d6a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd89f0; to 'JaxprTracer' at 0x7ff713cdb330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15051590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022790412315097233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744de0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70451f30; to 'JaxprTracer' at 0x7ffb70452070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42507b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023855192503739624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477900>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a5620; to 'JaxprTracer' at 0x7ffc704a7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88b1fa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021980524888423184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c313a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442bd210; to 'JaxprTracer' at 0x7ffa442bd5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c3f6370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021462467701555216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6670>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139f4f90; to 'JaxprTracer' at 0x7ffb4841be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6dd0a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022462688668015717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145160>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f424bf10; to 'JaxprTracer' at 0x7ff9f424a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41b58750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.007272347102992042
12, epoch_train_loss=0.007272347102992042
Epoch 13
Epoch 13 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02068379618068074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0206838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2a80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c7061b0; to 'JaxprTracer' at 0x7ffa4c704630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86c5fc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019400728613138126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01940073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1f40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0044b80; to 'JaxprTracer' at 0x7ff7d0045850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89c8c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009712140204181438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00971214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b02d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f1c10; to 'JaxprTracer' at 0x7ffb402f1350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x482fb8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013221637348903663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01322164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701845e0; to 'JaxprTracer' at 0x7ffa70185e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0a2a0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02125349810691526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07453d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706435b0; to 'JaxprTracer' at 0x7ffa70642430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x675ed8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023346906046218745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0b00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b033c040; to 'JaxprTracer' at 0x7ff71193cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x946bbc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0207409920741316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02074099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337a40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30711120; to 'JaxprTracer' at 0x7ffc30712b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78fbf430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022370479508076625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337e40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7042f010; to 'JaxprTracer' at 0x7ffa7042f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26300730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019276702471350004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0192767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0860>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e1fd0; to 'JaxprTracer' at 0x7ffbd06e2340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39e2fee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023131511042966433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02313151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf0e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10738f90; to 'JaxprTracer' at 0x7ffc30360f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b9f950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020380289538760327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02038029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0e70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd022bd80; to 'JaxprTracer' at 0x7ffbd0229da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4986140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022307524976384184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02230752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2df0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05a4630; to 'JaxprTracer' at 0x7ff9b05a78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61f53260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02324048053330612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02324048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b21f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907155d0; to 'JaxprTracer' at 0x7ffc90714720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59ff26e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02465565815100704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c328d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0212250; to 'JaxprTracer' at 0x7ffae0210db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x907a4140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02460162546852539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02460163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eb4b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0712a20; to 'JaxprTracer' at 0x7ffcb0711cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62d7fc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023231264680600355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02323126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2a40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44241990; to 'JaxprTracer' at 0x7ffa44241670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75c2eaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021635913877409624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335450>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb032b330; to 'JaxprTracer' at 0x7ffbb0328680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b329680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022546943937026075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f09a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504354e0; to 'JaxprTracer' at 0x7ffb504377e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60e0a450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.022762283387990998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1bb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417e200; to 'JaxprTracer' at 0x7ff71417c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x205d2580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017414963816873182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01741496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250680>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3055fc90; to 'JaxprTracer' at 0x7ff712343560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a45c180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01875784610974261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb3c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04fd260; to 'JaxprTracer' at 0x7ffcd04fd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x526eba00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024653677593016596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166900>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4024c8b0; to 'JaxprTracer' at 0x7ffb4024dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82ae0450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022598565143566927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5380>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07dac00; to 'JaxprTracer' at 0x7ffbb07dacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3768acb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02354581381258567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8730>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cda5c0; to 'JaxprTracer' at 0x7ff713cd8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3572eb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021818547753029837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305221c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907a29d0; to 'JaxprTracer' at 0x7ffb907a3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ea8f270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021331109022074336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d6d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70661800; to 'JaxprTracer' at 0x7ffb706633d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6232f1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02227691988134342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7a80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70917a200; to 'JaxprTracer' at 0x7ff7d072aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b0e4330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.006865877228346725
13, epoch_train_loss=0.006865877228346725
Epoch 14
Epoch 14 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021258516785849543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e750>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a23330; to 'JaxprTracer' at 0x7ff7121a95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30742830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01946232039217339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01946232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0ec0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d1b20; to 'JaxprTracer' at 0x7ffcd02d20c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8057c980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009798102049986407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0097981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa110>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b02390; to 'JaxprTracer' at 0x7ff712b00090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a6c740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013267131518055916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01326713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521860>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e06d0; to 'JaxprTracer' at 0x7ff7141e2890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c85db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02134155581558764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4f90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062f6a0; to 'JaxprTracer' at 0x7ffcb062d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680c48c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02425586210216729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f98c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067ee80; to 'JaxprTracer' at 0x7ffcb067c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ebb1890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02108103120586358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e8b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03069d0; to 'JaxprTracer' at 0x7ffab0305490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8437bc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023084355703326676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833cd90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74c4f0; to 'JaxprTracer' at 0x7ffa4c74f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x843456f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01944990230793822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0194499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d790>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a6c00; to 'JaxprTracer' at 0x7ffc101a79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f8be90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02318584121698889, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145d20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502abd80; to 'JaxprTracer' at 0x7ffc502aaac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x966c7990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02046056493780943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02046056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142018b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7042fbf0; to 'JaxprTracer' at 0x7ffa7042fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a402c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022380667125029775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10110fe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00c2fc0; to 'JaxprTracer' at 0x7ffaf00c11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x946550f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02333499735010994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.023335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a820>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100bfba0; to 'JaxprTracer' at 0x7ffc100be9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b4a540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025567207615366076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02556721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520ce0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae068bd30; to 'JaxprTracer' at 0x7ffae0688860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5a3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024730126398848015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02473013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4860>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713371a80; to 'JaxprTracer' at 0x7ff713373510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cd2e2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023304186441601468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02330419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702527b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713064130; to 'JaxprTracer' at 0x7ff713065d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfdb6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021723540601999422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506297d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b4090; to 'JaxprTracer' at 0x7ffc902b64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d64d3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02261139566520316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063cd80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b1d50; to 'JaxprTracer' at 0x7ffbd05b2cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88b32d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023450606566180383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb3f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c32e0; to 'JaxprTracer' at 0x7ffaa85c37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e2f4ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01750927288686994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01750927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250a40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3affb0; to 'JaxprTracer' at 0x7ff70c3af150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80ce6710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01897011782796646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0620>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d43244f0; to 'JaxprTracer' at 0x7ff9d4326de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0697920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025426510096950853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d680>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3039a390; to 'JaxprTracer' at 0x7ffc3039a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x436edc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022984416942084862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745f70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f3b00; to 'JaxprTracer' at 0x7ff9b07e1530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61efbec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02402367355249305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33270>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0065760; to 'JaxprTracer' at 0x7ff7d0067600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40da4c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021968933708490197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287fa0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07da2a0; to 'JaxprTracer' at 0x7ffc30617ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9be2a9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021463079202177264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3af0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b86480; to 'JaxprTracer' at 0x7ff712b853f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3556830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02258499553799529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618780>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb405b36a0; to 'JaxprTracer' at 0x7ffb405b37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x953d0180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.006536349345284476
14, epoch_train_loss=0.006536349345284476
Epoch 15
Epoch 15 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02131993574974449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3055f420; to 'JaxprTracer' at 0x7ffc3055ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288210c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019445764286474196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01944576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdc10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137ebce0; to 'JaxprTracer' at 0x7ff7137e88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e5fb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009893513395970775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00989351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2780>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10753010; to 'JaxprTracer' at 0x7ffc700606d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c245ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01334631614769421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01334632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31810>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713065990; to 'JaxprTracer' at 0x7ff713067970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9058ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.021327456776030762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02132746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f3f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193e340; to 'JaxprTracer' at 0x7ff71193ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51ec7590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024254133530364055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1ee0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505beac0; to 'JaxprTracer' at 0x7ffab0793560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x740123f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021164251603146673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02116425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03372d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507cbd30; to 'JaxprTracer' at 0x7ffb507c8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aff5030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023101754841485588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02310175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335a10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f4680; to 'JaxprTracer' at 0x7ffb905f6250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb3fede0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019636090706096367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01963609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1680>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073b420; to 'JaxprTracer' at 0x7ffc1073b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e04f350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023125215198634114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02312522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614be0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d4c20; to 'JaxprTracer' at 0x7ff7132d5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f4dbc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020474978351643646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02047498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9bd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4248130; to 'JaxprTracer' at 0x7ffbd0389300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564284f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022377809315890267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bda80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7065c9a0; to 'JaxprTracer' at 0x7ffa7065e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cce670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023330300882786904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0233303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3430>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025f920; to 'JaxprTracer' at 0x7ffcb025d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0d607a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02557867458866268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02557867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30a30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02987c0; to 'JaxprTracer' at 0x7ffcf029a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6691e1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024738667128818566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02473867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f1f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c227150; to 'JaxprTracer' at 0x7ffa4c224ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f090890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023267941106508153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02326794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482510f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0413ec0; to 'JaxprTracer' at 0x7ffcf04127f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6cd500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021756189150976515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335000>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c37f790; to 'JaxprTracer' at 0x7ffa3c37c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x814095c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022580895256848785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e12e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137207c0; to 'JaxprTracer' at 0x7ff713721bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b973e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023507146517039768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fc10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10330cc0; to 'JaxprTracer' at 0x7ffc103333d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1239450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01762284800076162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01762285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3380>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121aade0; to 'JaxprTracer' at 0x7ff7121a8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e9e73d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019031690918180855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01903169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702518a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0169c10; to 'JaxprTracer' at 0x7ffbf016bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x828328c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025438732298853406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164c90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e40e0; to 'JaxprTracer' at 0x7ffbf03e64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ae0cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023105423751789915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02310542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4300>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90753ec0; to 'JaxprTracer' at 0x7ffb90750950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47f39900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02407259802501421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8860>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30398770; to 'JaxprTracer' at 0x7ffc30398130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x857b7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022095260584446535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520d70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068f880; to 'JaxprTracer' at 0x7ffc3068dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ae3eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021551624584381077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02155162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057c490>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709178d10; to 'JaxprTracer' at 0x7ff70917a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x788e65c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022718777629536797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748310>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b006ccc0; to 'JaxprTracer' at 0x7ff9b006d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cc72440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.006375179127081363
15, epoch_train_loss=0.006375179127081363
Epoch 16
Epoch 16 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021340327981787293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ddb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f445d940; to 'JaxprTracer' at 0x7ff9f445da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bb9da60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01935679422219296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01935679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2fd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87241d0; to 'JaxprTracer' at 0x7ffaa8725490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bc34940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009983126505711658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00998313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057df60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50610220; to 'JaxprTracer' at 0x7ffb50612340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0001310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013315359541745862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01331536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8760>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5057d5d0; to 'JaxprTracer' at 0x7ffb5057f100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec87160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02123691823848488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101657b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703c40e0; to 'JaxprTracer' at 0x7ffbf01d84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55dbe1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024158247948186086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702518d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0269b20; to 'JaxprTracer' at 0x7ffcd02696c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85765b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021200468346156492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706056b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03058f0; to 'JaxprTracer' at 0x7ffab0307150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x735ce800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023025963071246384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02302596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606ee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1cdd00; to 'JaxprTracer' at 0x7ff70c1cfd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ee47590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019799726732416253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b6b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0369da0; to 'JaxprTracer' at 0x7ffcf036a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b97450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023001826042682617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02300183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619d90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48669080; to 'JaxprTracer' at 0x7ffb48669760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75e22780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020420293345928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02042029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049dc80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50563600; to 'JaxprTracer' at 0x7ffb50560540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa769a9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02231140594939658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2a10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41a0540; to 'JaxprTracer' at 0x7ff9f41a3830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25cbac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023242384346447317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02324238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d0e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a7880; to 'JaxprTracer' at 0x7ffaa8748310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68ccbe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0254910158603784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02549102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa3d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8591d50; to 'JaxprTracer' at 0x7ffaa8590680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ceda960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024648122810036515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02464812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166da0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b06750d0; to 'JaxprTracer' at 0x7ff7b0674180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57229a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023148356268144307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02314836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1530>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907de1b0; to 'JaxprTracer' at 0x7ffc907dcfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5787580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02172726977871456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2b50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137d1b20; to 'JaxprTracer' at 0x7ff7137d3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e3434b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0224694960966318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b370>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9020eac0; to 'JaxprTracer' at 0x7ffae0115490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c3d0690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02348846212296622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02348846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482532d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02eaf70; to 'JaxprTracer' at 0x7ffab02eb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x334e8dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017692785785819103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01769279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e98c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ea7f0; to 'JaxprTracer' at 0x7ffc100e8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56338330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01903068888040938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01903069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9680>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bfd4e0; to 'JaxprTracer' at 0x7ff711bfc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48631910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02535136276907824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02535136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407ea60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0435a80; to 'JaxprTracer' at 0x7ffcb0434e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e333a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02316688021874968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02316688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746060>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07671a0; to 'JaxprTracer' at 0x7ff7d0766bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a38f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02401631973297859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c332e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41aed90; to 'JaxprTracer' at 0x7ff9f41afba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c86a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022173272096911268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02875d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0362e30; to 'JaxprTracer' at 0x7ffbb0361da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3442cc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021583541922468176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1ab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b2110; to 'JaxprTracer' at 0x7ffc906b3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e6215d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02279638871724442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2cc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc63e0; to 'JaxprTracer' at 0x7ff712fc6520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59b94940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.006153868775252469
16, epoch_train_loss=0.006153868775252469
Epoch 17
Epoch 17 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02079250744507544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0d10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e6e80; to 'JaxprTracer' at 0x7ffbf03e65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac34390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01896007717042211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01896008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbcf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4703240; to 'JaxprTracer' at 0x7ff9d4701bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51cb3640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010072258282562665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01007226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bd790>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f0b30; to 'JaxprTracer' at 0x7ffc70618fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9718c7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013058227050635586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01305823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa41d0; to 'JaxprTracer' at 0x7ff713fa4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64eff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02102912133763105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02102912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745740>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50278630; to 'JaxprTracer' at 0x7ffc5027b2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85fe2450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023954760067597433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9110>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482322f0; to 'JaxprTracer' at 0x7ffc5023a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89c7bab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020421888032185007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02042189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482528d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05aaac0; to 'JaxprTracer' at 0x7ffb507cab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1caecdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022810493401146832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06f3a60; to 'JaxprTracer' at 0x7ffae06f1580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f2cc910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019946144724825886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01994614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063cb30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70263ba0; to 'JaxprTracer' at 0x7ffb70260e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9af6df40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022757535608402574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cd250>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4248630; to 'JaxprTracer' at 0x7ff9f4248950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f92a450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020265837812004497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02026584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1760>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e7f60; to 'JaxprTracer' at 0x7ffab0307ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c43b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022147045353095626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac87d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04de7f0; to 'JaxprTracer' at 0x7ffaa80de980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a30900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023035446459582602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02303545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdcf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c1f80; to 'JaxprTracer' at 0x7ffc102c2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61444a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025292586011862035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286560>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71358f330; to 'JaxprTracer' at 0x7ff71358de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cc99580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024435574771513584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747750>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf04135b0; to 'JaxprTracer' at 0x7ffcf04118f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d02a680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022907125945619507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0aa0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa81138d0; to 'JaxprTracer' at 0x7ffaa8113150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa521ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021615572488971162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335090>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07beb10; to 'JaxprTracer' at 0x7ff9b07bc770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7520b3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022240694398381555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f350>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e39b20; to 'JaxprTracer' at 0x7ff711e39170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8edecbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02338316358956934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210fc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05892b0; to 'JaxprTracer' at 0x7ff7b058aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956ec4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017546984983861313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01754698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607e20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44592520; to 'JaxprTracer' at 0x7ffbb03813a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4252a510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01857243306167639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01857243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a25d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f7f60; to 'JaxprTracer' at 0x7ffb905f4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c982790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025119112139879052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250270>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90229a80; to 'JaxprTracer' at 0x7ffc902284a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e96dd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023157225564494618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02315723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166200>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a0a90; to 'JaxprTracer' at 0x7ffcb07a1300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac68d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023740412666086765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b25d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05c10d0; to 'JaxprTracer' at 0x7ff7b05c2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81dbbb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0221963644237562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab5a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41afa60; to 'JaxprTracer' at 0x7ff9f41adee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d44fff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021543640913728568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02154364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774270>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05adcb0; to 'JaxprTracer' at 0x7ff7b05ac4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25ea7f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02280450584570629, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d8c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd056b880; to 'JaxprTracer' at 0x7ffbd056b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d01f350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.00599674959902811
17, epoch_train_loss=0.00599674959902811
Epoch 18
Epoch 18 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02084931139339567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90718c20; to 'JaxprTracer' at 0x7ffae01f71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b286320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018950751768241274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01895075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145340>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4325bc0; to 'JaxprTracer' at 0x7ff9d4324fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3626c4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010232397182077592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0102324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0631350; to 'JaxprTracer' at 0x7ff9b0630720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x406554e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013063629020601071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520720>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0450090; to 'JaxprTracer' at 0x7ffcf0452250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ecc3660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02097868265105211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6b40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713501e40; to 'JaxprTracer' at 0x7ff713501530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626d72c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0239356113194265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1290>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41d78d0; to 'JaxprTracer' at 0x7ff9f41d66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe22580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020490720504455908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02049072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210300>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e6b10; to 'JaxprTracer' at 0x7ffc300e5f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66c6d280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022803776011314805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417e250; to 'JaxprTracer' at 0x7ff71417dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f28d5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020272195031067385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0202722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334bf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106d4590; to 'JaxprTracer' at 0x7ffc106d52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9892750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022691944695111918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1a00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4220270; to 'JaxprTracer' at 0x7ff9f42212b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55c7a260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02027492564203552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02027493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e70f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05abbf0; to 'JaxprTracer' at 0x7ffc704d2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x789b0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02216764840357863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144960>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c489990; to 'JaxprTracer' at 0x7ffa4c4885e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bce4d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02298732328170433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111300>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001d50; to 'JaxprTracer' at 0x7ff713002390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67c9b070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025286415176247388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02528642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9330>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7042ee80; to 'JaxprTracer' at 0x7ffa7067b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x664cdc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02438307780224545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166220>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0155490; to 'JaxprTracer' at 0x7ffae0155210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39749570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02282410287056223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c610>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713065760; to 'JaxprTracer' at 0x7ff713065530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c5b25b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021690136196257506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210170>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10750400; to 'JaxprTracer' at 0x7ffc107501d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42365350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02218658113057488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334960>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706f9da0; to 'JaxprTracer' at 0x7ffb402f3330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c7e5570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0234588950644163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0234589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251120>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4703ba0; to 'JaxprTracer' at 0x7ff9d4701c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89449260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017716524087393652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01771652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb650>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41cfec0; to 'JaxprTracer' at 0x7ff9f41ce980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f709a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01861734356780186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01861734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e32d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0298d60; to 'JaxprTracer' at 0x7ffcf0299210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a59ba40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025107852506225152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407dd00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50644720; to 'JaxprTracer' at 0x7ffc506467a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa06100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023348648615034915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07467c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44593fb0; to 'JaxprTracer' at 0x7ffb70638810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78d38e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023773666223106015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c304c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704ff6a0; to 'JaxprTracer' at 0x7ffcd0291800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20dded40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02240578879547544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285160>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c2c50; to 'JaxprTracer' at 0x7ffa442c0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b6f1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021692070531734477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1ac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014c860; to 'JaxprTracer' at 0x7ff7b014ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b4b450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02302089647915171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdc10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4211030; to 'JaxprTracer' at 0x7ff9f4211170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa15fac00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.005728226787894587
18, epoch_train_loss=0.005728226787894587
Epoch 19
Epoch 19 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021412628762512462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02141263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b3790; to 'JaxprTracer' at 0x7ff7b05c02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ff8f7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0192446635195727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01924466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa910>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03ba610; to 'JaxprTracer' at 0x7ff7b03ba8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28eeae50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010448769977228127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01044877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a09b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3055d120; to 'JaxprTracer' at 0x7ffc3055e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40879d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013283052504737344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01328305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285ae0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07dd3f0; to 'JaxprTracer' at 0x7ffcb07de4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa87f07c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02104587468341456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744c60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be35e40; to 'JaxprTracer' at 0x7ff70be367f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5707160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024064988879500097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8f80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7130002c0; to 'JaxprTracer' at 0x7ff713003010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47b39850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021301977596462265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02130198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f570>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70663e70; to 'JaxprTracer' at 0x7ffb70661b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b91bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022968556779483826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628d30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400ea250; to 'JaxprTracer' at 0x7ffb400e9ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbae1090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02076776097967532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d4b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10370ef0; to 'JaxprTracer' at 0x7ffc10373fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99f66370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022775548081837394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277555, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614850>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70682520; to 'JaxprTracer' at 0x7ffc70680450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3819afa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0204093101688795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4d80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018f100; to 'JaxprTracer' at 0x7ffcf018e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b3e82e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022344146057114673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb3e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0241ad0; to 'JaxprTracer' at 0x7ffcb02438d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265b6340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02307851214356995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3e50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712906570; to 'JaxprTracer' at 0x7ffa7065f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5990c660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025437479740847712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284650>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41d4ea0; to 'JaxprTracer' at 0x7ff712404c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540639a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024460522460453056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07478e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab050c270; to 'JaxprTracer' at 0x7ffa703c5120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dfa64a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022865939374228154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9ce0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dfce0; to 'JaxprTracer' at 0x7ffc902def20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51a749b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021922836271341985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02192284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506281a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48440450; to 'JaxprTracer' at 0x7ffb48442cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b12a130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022275533557394325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa380>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ed580; to 'JaxprTracer' at 0x7ff7d07ef650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a753ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023693424445211983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211b60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03620c0; to 'JaxprTracer' at 0x7ffbb03609a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5c84100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018165594172537103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01816559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833d220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137211c0; to 'JaxprTracer' at 0x7ff713720180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35562e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019115593707875033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01911559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167890>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0437ab0; to 'JaxprTracer' at 0x7ffcb0437d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x319c82e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025281078581705984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02528108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250c70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ad3f0; to 'JaxprTracer' at 0x7ff7d07accc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9665d380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02371785020044199, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1740>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71375b240; to 'JaxprTracer' at 0x7ffae0115ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82733c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024051813974086525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02405181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa010>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9017df30; to 'JaxprTracer' at 0x7ffb9017fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dbc1e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02278639167228443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520e30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41ad1c0; to 'JaxprTracer' at 0x7ff9f41af150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x205d5760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022004142816316997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113ad0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c313830; to 'JaxprTracer' at 0x7ffa3c310ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x892e0150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023423252010385417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1bd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7130853f0; to 'JaxprTracer' at 0x7ff713086ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x961be540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0054719344771914855
19, epoch_train_loss=0.0054719344771914855
Epoch 20
Epoch 20 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021403443737794185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ea00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0714a90; to 'JaxprTracer' at 0x7ffbd0716480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39f9d840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019209286704109395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01920929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618fe0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07db6f0; to 'JaxprTracer' at 0x7ffbb015a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcd14e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010580408129847983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01058041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01edbd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a94b30; to 'JaxprTracer' at 0x7ff713a94090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56dfa310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013268728621289085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01326873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521d70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0143290; to 'JaxprTracer' at 0x7ffaf0143dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x519d5250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020868444845871227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02086844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4310>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab050e610; to 'JaxprTracer' at 0x7ffab050fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef7e580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02395345034182702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605ed0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71197ae30; to 'JaxprTracer' at 0x7ff711978630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fd3a8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021255705706980686, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1030>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074bf10; to 'JaxprTracer' at 0x7ffbd074a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5605a3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02289041290504326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02289041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3730>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40505300; to 'JaxprTracer' at 0x7ffb40507970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ea95100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021104608515171912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02110461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e30d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00e2ca0; to 'JaxprTracer' at 0x7ffcf00e09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95af54f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022612413106302975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf420>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d00c4950; to 'JaxprTracer' at 0x7ff7d00c4f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c92320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02029281797339967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02029282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d280>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0246610; to 'JaxprTracer' at 0x7ffcd0244220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8292da20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02229155440873477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61b870>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c444090; to 'JaxprTracer' at 0x7ffa4c445f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a276500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022907207666051366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101130b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70458ae0; to 'JaxprTracer' at 0x7ffcb05f01d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc86e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025323139361940892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab3e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00c0ea0; to 'JaxprTracer' at 0x7ffab0791760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35146940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024235060799025144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250150>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4024ede0; to 'JaxprTracer' at 0x7ffa70641a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ae0690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022641346250636338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606240>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0665a80; to 'JaxprTracer' at 0x7ff9b0666980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a158190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021932879911320202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3cd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b06640e0; to 'JaxprTracer' at 0x7ff9b0666e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x587ce610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02211269367877881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0dc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03339c0; to 'JaxprTracer' at 0x7ffbb0330ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e295db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023703200776593283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8660>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d6b10; to 'JaxprTracer' at 0x7ffbb03d5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ab3850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01828780508350154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01828781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3020>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87c8f90; to 'JaxprTracer' at 0x7ffaa87cb0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a7a1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019072228724702267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01907223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f2a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa83a4c70; to 'JaxprTracer' at 0x7ffaa83a5940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8381aad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025177485722138893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02517749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476440>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d008e610; to 'JaxprTracer' at 0x7ff7d008fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85589920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023864304847843354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0238643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32ea0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701876a0; to 'JaxprTracer' at 0x7ffa701849f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70523f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024001422466989903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4100>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01564d0; to 'JaxprTracer' at 0x7ffc9060e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5d1820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02295323706664608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2a50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41ae7f0; to 'JaxprTracer' at 0x7ff9f41af060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5f7900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02209999459884906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359f250>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd019d620; to 'JaxprTracer' at 0x7ffbd019f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75081f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02361066709577483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa390>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b7740; to 'JaxprTracer' at 0x7ffb905b7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c5a570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0051939482722783295
20, epoch_train_loss=0.0051939482722783295
Epoch 21
Epoch 21 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02119603343548532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3280>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b033f150; to 'JaxprTracer' at 0x7ff9b033fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25203c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019027950907575062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01902795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057de20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b03750d0; to 'JaxprTracer' at 0x7ff9b0374860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f0402d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01061010227972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0106101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5c70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c6c13a0; to 'JaxprTracer' at 0x7ff713a23d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8874740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013158483710103792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01315848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1e10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e5df0; to 'JaxprTracer' at 0x7ffc300e77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a678e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02051484623693623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02051485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30c30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4426b510; to 'JaxprTracer' at 0x7ffa44269990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7297b100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02364987940780065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02364988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2270>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f72340; to 'JaxprTracer' at 0x7ff713f71d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57ad0970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02102962894531342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02102963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252050>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd053ee80; to 'JaxprTracer' at 0x7ffbd053e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f7fb430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022623698527923626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021fbd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a31a0; to 'JaxprTracer' at 0x7ffcf03a15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17069de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02128649076703532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499e30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05aaa70; to 'JaxprTracer' at 0x7ffc704d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa79c98f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022256359631557157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cfe10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0618220; to 'JaxprTracer' at 0x7ff7d0618270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5074770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01997544089854223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1e70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad1300; to 'JaxprTracer' at 0x7ffcf00e1620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46259210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022056755463931724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057eeb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10333e20; to 'JaxprTracer' at 0x7ffc10332200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f3d23b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022524341512834924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4290>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04dd940; to 'JaxprTracer' at 0x7ffcd04ddf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80f4c3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025006051238078118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02500605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2ac0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713502d90; to 'JaxprTracer' at 0x7ffbd0783e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55359390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023783364368299482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32350>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060b510; to 'JaxprTracer' at 0x7ffcb0608c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc59c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022227181096498478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1c90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e6cf0; to 'JaxprTracer' at 0x7ffa3c37cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42494040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02176950234288649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e7b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07e04a0; to 'JaxprTracer' at 0x7ffaf0140f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5781d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021761960674613088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504992e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506136f0; to 'JaxprTracer' at 0x7ffb506114e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4448dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023525917323099606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02352592, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f18b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137d1cb0; to 'JaxprTracer' at 0x7ff7137d3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b3519c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01824524253859915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01824524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c420>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07411c0; to 'JaxprTracer' at 0x7ffbd0740770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96eefd60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018871284746442864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01887128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607100>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf029b4c0; to 'JaxprTracer' at 0x7ffcf029a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64d1e070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024864572910974613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02486457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251d40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30190900; to 'JaxprTracer' at 0x7ffc301909a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f56af70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02381296532777096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5ce0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70720040; to 'JaxprTracer' at 0x7ffb70722a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e47200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023736110469127207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2950>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713720450; to 'JaxprTracer' at 0x7ff711eab060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43ae92c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022928101767812355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520b00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3016b1f0; to 'JaxprTracer' at 0x7ffc3016a6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa194290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022013783314254493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112240>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0618130; to 'JaxprTracer' at 0x7ff7b0618450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9434f1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023610082430254798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41f92b0; to 'JaxprTracer' at 0x7ff9f41f9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68924580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.004932595308632571
21, epoch_train_loss=0.004932595308632571
Epoch 22
Epoch 22 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02107421527486235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744ca0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a77e0; to 'JaxprTracer' at 0x7ffc506a5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x466e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018930158782999956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01893016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3220>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442edfd0; to 'JaxprTracer' at 0x7ffa442ece00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95e31d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010610157250642982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01061016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a3e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b855d0; to 'JaxprTracer' at 0x7ffa4c410360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39e4ece0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013131010350168523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01313101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776260>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907576a0; to 'JaxprTracer' at 0x7ffb90755120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x493ab760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02026965769636536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02026966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa4c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42c5e90; to 'JaxprTracer' at 0x7ff9d42c41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15225830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023450492892448636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706065f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90745620; to 'JaxprTracer' at 0x7ff71264efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e79f020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020910245537620612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1330>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a5c10; to 'JaxprTracer' at 0x7ffc307a7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf3df410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022426370021058455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0ec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad3b00; to 'JaxprTracer' at 0x7ff712ad1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dfe2da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021588612949272428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d120>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123afce0; to 'JaxprTracer' at 0x7ff7123ae7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2cfcfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02201723372478755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa930>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02449f0; to 'JaxprTracer' at 0x7ffcd0246660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22aa8bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019749642066353244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01974964, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07442c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf005a160; to 'JaxprTracer' at 0x7ffcf005b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac2a410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02194728065095969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3600>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0208ae0; to 'JaxprTracer' at 0x7ff9f467cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bf331b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022269291956596497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901446b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036c8b0; to 'JaxprTracer' at 0x7ffa7036da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ce12910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02480859130146423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02480859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521130>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e7d080; to 'JaxprTracer' at 0x7ff711e7f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4249df20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023447440896617096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02344744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5ed0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70641df0; to 'JaxprTracer' at 0x7ffa70642b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9c36ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021943868538131683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607eb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0666430; to 'JaxprTracer' at 0x7ffa4c4e6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94da54e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021742342357397266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1cd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455f7e0; to 'JaxprTracer' at 0x7ffa4455ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e0e0860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02153236416779873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f0a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0636d40; to 'JaxprTracer' at 0x7ffa705c6520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e1e9ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02347409148308815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02347409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250aa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f4860; to 'JaxprTracer' at 0x7ff9b0375a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54494d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01828050100020127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0182805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9130>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae07495d0; to 'JaxprTracer' at 0x7ffae074bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b2d0410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018772463857764602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01877246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e10b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb032b880; to 'JaxprTracer' at 0x7ffbb032ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65992200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02467152255164925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02467152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4757c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503752b0; to 'JaxprTracer' at 0x7ffb503753f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1fee8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023889776747296632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33af0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e29d0; to 'JaxprTracer' at 0x7ffc900e0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29915940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02358509276854766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e74c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d4680; to 'JaxprTracer' at 0x7ffbb03d72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d22470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023055882730203786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1a80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e4360; to 'JaxprTracer' at 0x7ffbd05e6750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6794c980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022064714452418976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e510>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014ea20; to 'JaxprTracer' at 0x7ffbf011acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d8268e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023740192953672957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7c40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4026eb10; to 'JaxprTracer' at 0x7ffb4026ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88217c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0048238313740096486
22, epoch_train_loss=0.0048238313740096486
Epoch 23
Epoch 23 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021161449622830713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02116145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ea870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41ad490; to 'JaxprTracer' at 0x7ff9f41adbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cebc540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019038769514098882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01903877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9b10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70764fe0; to 'JaxprTracer' at 0x7ffb70767920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dfc1630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010574870972973608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01057487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4700>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0764e00; to 'JaxprTracer' at 0x7ff7d0767560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c507ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013249581510526529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01324958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d82d90; to 'JaxprTracer' at 0x7ff712d82250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4887b4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020288418025226334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02028842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33da0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4e4220; to 'JaxprTracer' at 0x7ffa3c100270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88d49430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023545678820364832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2320>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa811ff10; to 'JaxprTracer' at 0x7ffaa811c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1841ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02103523172935252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02103523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251740>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0791800; to 'JaxprTracer' at 0x7ffab0793470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8ee5e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022492674375400874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa7c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c196f70; to 'JaxprTracer' at 0x7ffa3c194ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ca8c7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02206131459435431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335be0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03a8ae0; to 'JaxprTracer' at 0x7ffbf03a9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa59358b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022109817252069452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706167c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf019c8b0; to 'JaxprTracer' at 0x7ffc10707ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e1d5b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01980438734987535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01980439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ea1b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf037a840; to 'JaxprTracer' at 0x7ffbf0379030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3aeae0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022152117246394928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca790>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a5c10; to 'JaxprTracer' at 0x7ffc702a7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d4692c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022361841258806827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5550>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3bfd30; to 'JaxprTracer' at 0x7ffa3c3bf6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cc0a180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02495098119720419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02495098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2bb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3bcdb0; to 'JaxprTracer' at 0x7ffc702e2750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbaf530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023460630193187372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02346063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31610>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1e3ec0; to 'JaxprTracer' at 0x7ffa44529fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34d21950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02198463187624004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2ed0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01c3b00; to 'JaxprTracer' at 0x7ffae01c0770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25381bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022024814398444507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb880>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d0040; to 'JaxprTracer' at 0x7ffcd02d3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4380fd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021635496748002095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049ae30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05e7600; to 'JaxprTracer' at 0x7ff7b05e6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97ecb1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023714723910455284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2620>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c0400; to 'JaxprTracer' at 0x7ff7137c3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88d8a220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01849202481666023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01849202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1950>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0710a90; to 'JaxprTracer' at 0x7ff713fa7240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ad37410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018940621015818077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01894062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833dcf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01e9c10; to 'JaxprTracer' at 0x7ffcf01e8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x565b1120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02481803393601445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02481803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5ee0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e54e0; to 'JaxprTracer' at 0x7ff7b03e74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c038a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02423340958806632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab8c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db4810; to 'JaxprTracer' at 0x7ff712db5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53f0cc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023752373663094285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02375237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305222f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07c87c0; to 'JaxprTracer' at 0x7ff9b07cac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa614e7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023476185430197697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02347619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0af0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70722a20; to 'JaxprTracer' at 0x7ffb707227a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81bb0bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02239682285068977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239682, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111590>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07de570; to 'JaxprTracer' at 0x7ffcb07df2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55213680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02413024525729082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146a80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905a01d0; to 'JaxprTracer' at 0x7ffb905a06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1072a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.004568163630111268
23, epoch_train_loss=0.004568163630111268
Epoch 24
Epoch 24 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02120020022653445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049db90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b1df0; to 'JaxprTracer' at 0x7ffc50426890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11c1f650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01914425538853493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01914426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06beea0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70436660; to 'JaxprTracer' at 0x7ffc70437ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4419160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010307258680057779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01030726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101117c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100e9c10; to 'JaxprTracer' at 0x7ffc100eafc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3783e470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013317377543481319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01331738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305223b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712124630; to 'JaxprTracer' at 0x7ffcd02d25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63b29ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020333269352383415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02033327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6cf0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904a71f0; to 'JaxprTracer' at 0x7ffc904a7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2705aad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023602979216702458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210550>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04df380; to 'JaxprTracer' at 0x7ffcd04dd800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9fd820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021172320727527283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166570>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04362a0; to 'JaxprTracer' at 0x7ffbb0151bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e6c3520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022507234478712144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101660a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8326a70; to 'JaxprTracer' at 0x7ffaa8327b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e6cb360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02213793167135083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f90d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0388680; to 'JaxprTracer' at 0x7ffbd038a8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37147ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02227131816562948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d57d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0244900; to 'JaxprTracer' at 0x7ffcd0245ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d84730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01985700051695995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.019857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d880>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137963e0; to 'JaxprTracer' at 0x7ff7137958f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc44f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02231624866412724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bda60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068f970; to 'JaxprTracer' at 0x7ffbb07632e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68fc1a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02249154407351323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113cd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141b7100; to 'JaxprTracer' at 0x7ffc10562070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44ed0fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0250614456945325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305208e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f44352b0; to 'JaxprTracer' at 0x7ffc502790d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56fa7a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023522147831948042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02352215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6c40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b67f0; to 'JaxprTracer' at 0x7ffc902b55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d7e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022073068054357974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f24a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c109c60; to 'JaxprTracer' at 0x7ff70c10b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a7cb450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022200861803291963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167a10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455e660; to 'JaxprTracer' at 0x7ffa4455f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa57446c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021767122445455436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fbc00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0767970; to 'JaxprTracer' at 0x7ff7d0764680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85a1ae20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02382988844611578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb570>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03bac00; to 'JaxprTracer' at 0x7ff712373a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425015e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018513888137330896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01851389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e27f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b3b510; to 'JaxprTracer' at 0x7ff712b382c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1622d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019144386051557775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01914439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476ad0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50610310; to 'JaxprTracer' at 0x7ffb907d2520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x155655b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024944299561441466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287010>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01ca4d0; to 'JaxprTracer' at 0x7ffbb01c9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e814d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02434449941038176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0243445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b35b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904568e0; to 'JaxprTracer' at 0x7ffc90456160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626371d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02388760228512058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0238876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2060>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db5da0; to 'JaxprTracer' at 0x7ff712db7740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38a0c630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023668166603847067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d070>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44321df0; to 'JaxprTracer' at 0x7ffa443218f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dd254e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022556745206637755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057dae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713559df0; to 'JaxprTracer' at 0x7ff71355bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60295cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024259853903683716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb033cc70; to 'JaxprTracer' at 0x7ffbb033d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89375fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0043281283334519055
24, epoch_train_loss=0.0043281283334519055
Epoch 25
Epoch 25 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021235587426634114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30190ae0; to 'JaxprTracer' at 0x7ffc30190b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b20840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01899245083089387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01899245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8460>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07122a0; to 'JaxprTracer' at 0x7ff7125a8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24dfc4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009779702200515739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0097797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057da50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137ea340; to 'JaxprTracer' at 0x7ff7137e8180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cbc8b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013354321555700465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01335432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a15b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0667e70; to 'JaxprTracer' at 0x7ff9b0667f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71ac3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020122681556049366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02012268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6160>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70641260; to 'JaxprTracer' at 0x7ffa70641d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b367b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02363526237087261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e12e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0102110; to 'JaxprTracer' at 0x7ffbf01030b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4adcf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02120915464296341, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253ca0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dfc40; to 'JaxprTracer' at 0x7ffc902df560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3993fbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022464429631306133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fbed0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0466840; to 'JaxprTracer' at 0x7ffcb0464d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4947d3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02143169500972218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ed30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8764810; to 'JaxprTracer' at 0x7ffaa8766a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6288ad30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022154408402045845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cd3c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046a2f0; to 'JaxprTracer' at 0x7ffc3046a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b8d4dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0197588673868825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3a00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706806d0; to 'JaxprTracer' at 0x7ffc706815d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39ae39e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02216713692871716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e88a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30168d10; to 'JaxprTracer' at 0x7ffcb0434a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3438f6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02234307890868107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e150>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90054ea0; to 'JaxprTracer' at 0x7ffc90054540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8911d6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025118409285224883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3d50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10506390; to 'JaxprTracer' at 0x7ffc105069d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x742f0200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02337055335540759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02337055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02852f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442bc9a0; to 'JaxprTracer' at 0x7ffa442bf650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33d3d2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021876504783442708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3930>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa835ac50; to 'JaxprTracer' at 0x7ffaa8359260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x863d2200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022022008684873615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb4c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e7d80; to 'JaxprTracer' at 0x7ffc70270ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439a9ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02168646840741112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e0d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c27e0c0; to 'JaxprTracer' at 0x7ffa4c27dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64ca38b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023679256876404636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164bc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71289bf10; to 'JaxprTracer' at 0x7ff712898bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2242d9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018216531946618108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01821653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1ef0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e5ad0; to 'JaxprTracer' at 0x7ffbf03e4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a53ea50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019221616418590277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01922162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213b70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74c860; to 'JaxprTracer' at 0x7ffb90718720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e1c3490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02499508169545015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7720>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0429350; to 'JaxprTracer' at 0x7ffcd042bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de77090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023952512569218865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251f90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048e6b0; to 'JaxprTracer' at 0x7ffc5048c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3818cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02389529369691231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523410>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3dc4a0; to 'JaxprTracer' at 0x7ffa3c3dc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa085230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02327302240400657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02327302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1e30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db5b20; to 'JaxprTracer' at 0x7ff712db41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57cbe250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022236794594279994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112c50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057c9f0; to 'JaxprTracer' at 0x7ffb486efd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bcb1d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02382325197032553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201a40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106ed030; to 'JaxprTracer' at 0x7ffbf052bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57ca9aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0040105517550627435
25, epoch_train_loss=0.0040105517550627435
Epoch 26
Epoch 26 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021249628835523383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147f50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01db790; to 'JaxprTracer' at 0x7ffbf01d8450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15a84790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018946805512672558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01894681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d52c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9071b1f0; to 'JaxprTracer' at 0x7ffb9071bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c8c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009352045312478564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00935205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be8e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c14e0; to 'JaxprTracer' at 0x7ffaa85c1350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dda67e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013363734308591436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01336373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520ee0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01c0090; to 'JaxprTracer' at 0x7ffae01c2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f1f3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02002400477647813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.020024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252470>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0268360; to 'JaxprTracer' at 0x7ffcd0268cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e7d9c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02370331186627814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e29a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0749a80; to 'JaxprTracer' at 0x7ffbd07493f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b1aa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021267941701581135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fa70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0746c50; to 'JaxprTracer' at 0x7ffcb0744e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0c3a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02248462983779261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c470>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902ddb20; to 'JaxprTracer' at 0x7ffc902dc4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0acc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020918946938299366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb2a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48248590; to 'JaxprTracer' at 0x7ffb48249260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8557760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022158095318172786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac95e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01af920; to 'JaxprTracer' at 0x7ffbb01acd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a9d4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01977516586817149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01977517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147700>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0115530; to 'JaxprTracer' at 0x7ffae01162f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56beaf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022122929316791138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa740>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07e3740; to 'JaxprTracer' at 0x7ffbf07e1030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ab0d9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022345582343824666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2720>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128dfbf0; to 'JaxprTracer' at 0x7ff7128dfd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x489cae30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025244739186018536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02524474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520d20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90667d80; to 'JaxprTracer' at 0x7ffc906657b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f1100b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023348549753786006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4d90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0594180; to 'JaxprTracer' at 0x7ffbb0594540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x150085b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021825451181863312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e39c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711908fe0; to 'JaxprTracer' at 0x7ff71190ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87820390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02193997249577104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c380>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70450680; to 'JaxprTracer' at 0x7ffb704528e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29dfc180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021711373216548518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fbf00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf036a340; to 'JaxprTracer' at 0x7ffcf036a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341aa8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023618076754528986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8640>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a8860; to 'JaxprTracer' at 0x7ff7125ab100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf8ae350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017999784163415224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01799978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e18f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4dd7b0; to 'JaxprTracer' at 0x7ffa4c6c0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54378300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019336416244434225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01933642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476e80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062f1a0; to 'JaxprTracer' at 0x7ffaf06dc9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fb35020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02511863878136195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02851f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074f2e0; to 'JaxprTracer' at 0x7ffbd074ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99b4b7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023683076653146062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e66b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c163790; to 'JaxprTracer' at 0x7ffa3c160130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e0c5b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023925878483947182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a08a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001260; to 'JaxprTracer' at 0x7ff713003330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x414a6c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023018457163683562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e270>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3dc450; to 'JaxprTracer' at 0x7ffa70151670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa288e7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022024684082210005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d8f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307654e0; to 'JaxprTracer' at 0x7ffaf00c0f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68390270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023517113268296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1ba0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901944a0; to 'JaxprTracer' at 0x7ffb90194310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d3cf6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.004010224373737148
26, epoch_train_loss=0.004010224373737148
Epoch 27
Epoch 27 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021246294304879818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c640>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9060fdd0; to 'JaxprTracer' at 0x7ffc9060e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666cf010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0190189376513987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01901894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3c40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd020ae80; to 'JaxprTracer' at 0x7ffcd0209ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x509efc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009234820588736006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00923482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8190>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907d3830; to 'JaxprTracer' at 0x7ffb907d31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d492f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0133577367704011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01335774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ea40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70452570; to 'JaxprTracer' at 0x7ffb70450270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d5d9f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020172294806662886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02017229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b19d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e0e00; to 'JaxprTracer' at 0x7ffc502e1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b1feb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023856467986916884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477610>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128dcc20; to 'JaxprTracer' at 0x7ff7128ddb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbb7c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021312927972225452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eac60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02e9080; to 'JaxprTracer' at 0x7ffab02eae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa982fa00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022564913270047372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482514b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0046660; to 'JaxprTracer' at 0x7ff7d00455d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89e38900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021627620464360387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c120>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903e1da0; to 'JaxprTracer' at 0x7ffb903e0040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f732900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022405361343173287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706159c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00e2ca0; to 'JaxprTracer' at 0x7ffcf00e3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533b6390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019874171629842508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01987417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407fff0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e78d0; to 'JaxprTracer' at 0x7ffc300e7dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8071af50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022468051373355374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c13c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7066a200; to 'JaxprTracer' at 0x7ffc7066ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a0352d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0225750154494843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eb030>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90055ee0; to 'JaxprTracer' at 0x7ffc900570b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e29dbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025460178350769955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02546018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fa00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41a2070; to 'JaxprTracer' at 0x7ff712d82980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43dcbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023515367827239297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7610>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf04518f0; to 'JaxprTracer' at 0x7ffcf04503b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47234ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.0219990851316611, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477890>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0580db0; to 'JaxprTracer' at 0x7ff7d0580cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7edae590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022357457250342248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253390>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07dbf60; to 'JaxprTracer' at 0x7ffbb07d9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48d938f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021928593667683648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02192859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021fdc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44591170; to 'JaxprTracer' at 0x7ffa44590360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65355550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023957801907791183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0239578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3580>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5023b880; to 'JaxprTracer' at 0x7ffc5023bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6538e210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01821549946048639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0182155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fe10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1076fd30; to 'JaxprTracer' at 0x7ffc1076ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45373de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019487155836706543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01948716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167560>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f3ce0; to 'JaxprTracer' at 0x7ffb703f3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f762ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025308388775126135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0596070; to 'JaxprTracer' at 0x7ffbb05975b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4435410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024151564171508468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7d80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121518f0; to 'JaxprTracer' at 0x7ff70c1a0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa45f04c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02398767153975082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8ef0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0740ef0; to 'JaxprTracer' at 0x7ff7d0742ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60a8e100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02363915176189422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522b70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b391c0; to 'JaxprTracer' at 0x7ff712b3ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x396fafa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02250715761596322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776730>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d3650; to 'JaxprTracer' at 0x7ffc704d14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2deb8a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02401598085544439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401598, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b31f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70665e90; to 'JaxprTracer' at 0x7ffa70665d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d7fe60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003650841024250464
27, epoch_train_loss=0.003650841024250464
Epoch 28
Epoch 28 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02103617051557774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02103617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac89b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4dc900; to 'JaxprTracer' at 0x7ffa4c4dc220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd4730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018939267346853438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01893927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa3c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0368180; to 'JaxprTracer' at 0x7ffb905f57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bca30f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009035039133020476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00903504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0d20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30748c70; to 'JaxprTracer' at 0x7ffc3074ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11c93ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013169879463948384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01316988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252050>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4325760; to 'JaxprTracer' at 0x7ffab070aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56591ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020148513763689722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02014851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10165380>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c53ec0; to 'JaxprTracer' at 0x7ff713c519e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cbe5ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02368303065233323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d3c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0417600; to 'JaxprTracer' at 0x7ffcb0417ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x865e4b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021086656795486318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ddd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03334c0; to 'JaxprTracer' at 0x7ffbb0333740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa35f0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02239058343061564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ef20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5036d2b0; to 'JaxprTracer' at 0x7ffb5036fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c7d5380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022366615182189464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604da0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00e18f0; to 'JaxprTracer' at 0x7ffcf00e3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c3e0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022357266806675456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fadf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b4ae0; to 'JaxprTracer' at 0x7ffbb020e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82a83bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01971773418845248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbe20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0464d60; to 'JaxprTracer' at 0x7ffcb0466fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x510ac8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02255446713720539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbf20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ac5e90; to 'JaxprTracer' at 0x7ff713ac4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f0ec9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022500637830470852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2700>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036dad0; to 'JaxprTracer' at 0x7ffae06f2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50985e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025299910736076677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253650>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b6750; to 'JaxprTracer' at 0x7ffae068a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x746738e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023388117367624563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101646e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05e62a0; to 'JaxprTracer' at 0x7ffc70459530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9007400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02193205183930725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1820>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d82c00; to 'JaxprTracer' at 0x7ff712d83f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1c25360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022545540837113572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f940>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0667b00; to 'JaxprTracer' at 0x7ffc704fd080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x227fe090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021859617929179873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706073c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014db20; to 'JaxprTracer' at 0x7ffcf014f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3d35ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02404579230689754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475be0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae015c950; to 'JaxprTracer' at 0x7ffa3c60c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b8d5ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01831242570720014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01831243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31470>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30711350; to 'JaxprTracer' at 0x7ffc307115d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85639110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01937680421652012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0193768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5c60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d4cc0; to 'JaxprTracer' at 0x7ff7132d6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96e9d620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025135569115698433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b19b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0429ee0; to 'JaxprTracer' at 0x7ff7128ddf80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956dd0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024499737425658735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359de30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07da110; to 'JaxprTracer' at 0x7ffbb07d90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x788f5470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02380381052709339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506296e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be36ac0; to 'JaxprTracer' at 0x7ff70be34d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a9a22c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024105136978397623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9200>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a7bf0; to 'JaxprTracer' at 0x7ffb482a73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c593050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02280652525177291, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee1f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a2160; to 'JaxprTracer' at 0x7ff70c5a3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89d74450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02441961355933989, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0e00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa447c2c00; to 'JaxprTracer' at 0x7ffcb067e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61e648f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0035975340646923304
28, epoch_train_loss=0.0035975340646923304
Epoch 29
Epoch 29 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020794959692157455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02c7d30; to 'JaxprTracer' at 0x7ffcb02c4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6406f5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018701085664144402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01870109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201380>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1036f6a0; to 'JaxprTracer' at 0x7ffc1036e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d55d570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008519133902824291, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00851913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074ba00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87d4b80; to 'JaxprTracer' at 0x7ffaa87d7830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73ede570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013011991070963274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01301199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8150>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4841bf60; to 'JaxprTracer' at 0x7ffb4841bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12254480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019802848934010197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01980285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e050>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fb04a0; to 'JaxprTracer' at 0x7ff712fb09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee62350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023430113667877776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02343011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6f60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44234360; to 'JaxprTracer' at 0x7ffaa8795760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15b0aca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020812341417601472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02081234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475800>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00a7240; to 'JaxprTracer' at 0x7ffcf00a4a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9928c7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022168307429901484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1e00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5017c180; to 'JaxprTracer' at 0x7ffc304d8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6679c350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021995582756433776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61ab20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01acb80; to 'JaxprTracer' at 0x7ffbb01ad8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x746dc6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022029983689765043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cebc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c25a7a0; to 'JaxprTracer' at 0x7ff7128ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5026870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019394414794905942, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01939441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498320>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d44e1a80; to 'JaxprTracer' at 0x7ffbb0333560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f1cb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022269005902640478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142022a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905998a0; to 'JaxprTracer' at 0x7ffb90598d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66bb6350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022128062393000105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074acb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ee2f0; to 'JaxprTracer' at 0x7ffbd03efbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e832e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025017625968767544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02501763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e81b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06b8b30; to 'JaxprTracer' at 0x7ffcb06bb5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d9a7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02294506512358794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a33b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125b1e90; to 'JaxprTracer' at 0x7ff7125b22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c593b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02150159776729677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284170>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c214040; to 'JaxprTracer' at 0x7ffa4c2145e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b9f5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022301195900993078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e26e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07098a0; to 'JaxprTracer' at 0x7ffab0708d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54116830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02154525047766802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02154525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a030>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9017d670; to 'JaxprTracer' at 0x7ffb9017cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6db26a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023749724417531596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902131a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0338e50; to 'JaxprTracer' at 0x7ffbb07415d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cdecae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01798706346568668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01798706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f950>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02927a0; to 'JaxprTracer' at 0x7ffcb0290360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56491220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019151206605484788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01915121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e140>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904a4900; to 'JaxprTracer' at 0x7ffc904a6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46dac8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024848414927967813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02484841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ef90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4480720; to 'JaxprTracer' at 0x7ff9f4482020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa29a09b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02416011103028189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3450>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3013ef20; to 'JaxprTracer' at 0x7ffc3013e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53c2c670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02354918276672887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6140>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10333100; to 'JaxprTracer' at 0x7ffc10333a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49693580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02379312822832509, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02379313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250400>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40045e90; to 'JaxprTracer' at 0x7ffb40046390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38afd120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02252999656340404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f443a9d0; to 'JaxprTracer' at 0x7ff9f4439260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69767950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024066326751429317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0d50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71238c680; to 'JaxprTracer' at 0x7ff71238c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4849fdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0034526768597105888
29, epoch_train_loss=0.0034526768597105888
Epoch 30
Epoch 30 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020794893697528738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144da0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712871080; to 'JaxprTracer' at 0x7ff712870770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38d2ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01867295281753949, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01867295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5eb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b033f560; to 'JaxprTracer' at 0x7ff9b033f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f870fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00804423255698165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00804423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520ce0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0633c90; to 'JaxprTracer' at 0x7ff9b06300e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85bd9ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013063958289079388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306396, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251f10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f41fd0; to 'JaxprTracer' at 0x7ff713f43920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c496690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019844535968718182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01984454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0ce0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901714e0; to 'JaxprTracer' at 0x7ffab04a6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e80a5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023549423847826104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d860>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701bb060; to 'JaxprTracer' at 0x7ffc50644c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15beb370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020866000047310526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.020866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61aee0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011a7f0; to 'JaxprTracer' at 0x7ffbf0119710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x992bced0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022246158095482926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61b080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00c0950; to 'JaxprTracer' at 0x7ffaf00c23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b9e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02153422176486268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337af0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018ecf0; to 'JaxprTracer' at 0x7ffcd02445e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a6cbdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02210283958108152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea380>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15d760; to 'JaxprTracer' at 0x7ffc1073efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77653200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019443104038625567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0194431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147bd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0087fb0; to 'JaxprTracer' at 0x7ffaf0084950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63766c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022262983142616644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6fe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc103731a0; to 'JaxprTracer' at 0x7ffc103728e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cb5ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022200314897455168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520da0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036cea0; to 'JaxprTracer' at 0x7ffa7036d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x370a0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02515328228425549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02515328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5bb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48232c50; to 'JaxprTracer' at 0x7ffb48232ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1181b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023022700141713464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f2c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482752b0; to 'JaxprTracer' at 0x7ffb48275e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f090010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02153814757598752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e180>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42eee80; to 'JaxprTracer' at 0x7ff9d42ef1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92cf7e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022252185946062795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619760>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0740db0; to 'JaxprTracer' at 0x7ffbd07418f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aae4940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02161267727220743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336510>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713527c90; to 'JaxprTracer' at 0x7ffc70063650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45c7d5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023721001839767292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.023721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30880>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06de610; to 'JaxprTracer' at 0x7ffaf06dc270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75c62f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017785431079593447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01778543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5bc0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c310400; to 'JaxprTracer' at 0x7ffa3c3108b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d25100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019264859417640563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01926486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1660>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d008c0e0; to 'JaxprTracer' at 0x7ff7d008c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c62030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024981878687000855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02498188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f2020; to 'JaxprTracer' at 0x7ffb703f0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37215890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0239312692260559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062bb70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1967f0; to 'JaxprTracer' at 0x7ffa3c195260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58adb2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023583736625582292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4d60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a5990; to 'JaxprTracer' at 0x7ffcb04a5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ab4080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02359386393866218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01edb20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db7150; to 'JaxprTracer' at 0x7ff712db5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a3fddd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022403852358055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f100>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907dd260; to 'JaxprTracer' at 0x7ffc907dee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a11cf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0237928458677532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02379285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201e20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04a6de0; to 'JaxprTracer' at 0x7ffbf0330310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bd6e6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0033925514767332112
30, epoch_train_loss=0.0033925514767332112
Epoch 31
Epoch 31 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021004777147824616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10110510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0293a60; to 'JaxprTracer' at 0x7ff711ea96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd49360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01884894707900988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01884895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504995d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f70590; to 'JaxprTracer' at 0x7ff713f70770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a2cc530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007885524525574351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00788552, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f820>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072af20; to 'JaxprTracer' at 0x7ffb50729b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bb61a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013226117395222824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01322612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7eb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706af010; to 'JaxprTracer' at 0x7ffb704522a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x120de250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020149018806401162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02014902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ffe0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e7e2f0; to 'JaxprTracer' at 0x7ff711e7f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f82420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023951356681763177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4ce0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307ee390; to 'JaxprTracer' at 0x7ffc307edf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x184bdad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02111713185218085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02111713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284500>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02e80e0; to 'JaxprTracer' at 0x7ffb90389a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d019030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02253298188338743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477a20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71356d580; to 'JaxprTracer' at 0x7ff71356f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x330871e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022155617938737684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0fa0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506780e0; to 'JaxprTracer' at 0x7ffc5067bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7bfb0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02249634001399566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70617eb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7061a020; to 'JaxprTracer' at 0x7ffc70619b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x595d88f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019729825394985193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01972983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101112b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30647f10; to 'JaxprTracer' at 0x7ffc30647290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d5fe580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02269440289954584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049ba30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa83260c0; to 'JaxprTracer' at 0x7ffaa8325800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57b23560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022602722938949826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407cc70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07821b0; to 'JaxprTracer' at 0x7ffbd0783e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e87fd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025629617242786805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02562962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4320>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87f2340; to 'JaxprTracer' at 0x7ff9b0158d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a6d09f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023442397102928867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0234424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359eab0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10506840; to 'JaxprTracer' at 0x7ffb90173ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6e1c940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021908888754358043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e54e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90756de0; to 'JaxprTracer' at 0x7ff712906e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8293100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022714403670857884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475700>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01581d0; to 'JaxprTracer' at 0x7ffbb0158360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d2a1340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02197621244172321, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774ea0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0631a80; to 'JaxprTracer' at 0x7ff9b0632250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b22b340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024219947728764925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02421995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6197d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4865cfe0; to 'JaxprTracer' at 0x7ffb4865f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x892fc2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01809671221468909, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01809671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e190>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4aaac0; to 'JaxprTracer' at 0x7ffa4c4a9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81def660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01955655929057111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01955656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f8a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ac4130; to 'JaxprTracer' at 0x7ff713ac6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57cf4d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025423718466841126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fec0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a2430; to 'JaxprTracer' at 0x7ff70c1a1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99b53f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024451842314673566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0ab0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907d1350; to 'JaxprTracer' at 0x7ffb907d2160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88ab18e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023827810192806935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e36a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068f380; to 'JaxprTracer' at 0x7ffbf0528180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99c8b900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024207852831441837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702514b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141b5f30; to 'JaxprTracer' at 0x7ff7141b7dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57693bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02290797643420149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9110>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4ec220; to 'JaxprTracer' at 0x7ffa4c4ecf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x204ec940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024317455395368937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02431746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523b20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05f77e0; to 'JaxprTracer' at 0x7ff7b05f7920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d65f1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003466351675190066
31, epoch_train_loss=0.003466351675190066
Epoch 32
Epoch 32 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02098061004311453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02098061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9dc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0115580; to 'JaxprTracer' at 0x7ffae0115df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbcbbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01884226584226655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01884227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f90c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47a0ae0; to 'JaxprTracer' at 0x7ff9d47a1120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66773120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007548553618595565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00754855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6980>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01c3ce0; to 'JaxprTracer' at 0x7ffcf01c21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f725560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01320893400369373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01320893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a00b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3d52b0; to 'JaxprTracer' at 0x7ffa3c3d7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2653c5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020136008180169016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02013601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c5b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03452b0; to 'JaxprTracer' at 0x7ffaf0344e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a493030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0238807282380047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101672e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050c9f0; to 'JaxprTracer' at 0x7ffaf00f5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92caaf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021149171560876243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476820>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4869d0; to 'JaxprTracer' at 0x7ffa4c4865c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40921610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022479268728737786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476960>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011a750; to 'JaxprTracer' at 0x7ffbf0119800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x706c7820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021264779432644876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32e20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50562a70; to 'JaxprTracer' at 0x7ffb50563c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7715e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022517358040236225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334ad0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073f1a0; to 'JaxprTracer' at 0x7ffbb01afb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x590caae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019692775566326648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01969278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9060>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125aa5c0; to 'JaxprTracer' at 0x7ff7125a9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c7953c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022556308022997868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745c40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07098a0; to 'JaxprTracer' at 0x7ffab0708bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d7cc660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022580882749182126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3690>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07e1a80; to 'JaxprTracer' at 0x7ffbf07e1620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c0d3320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025544545435822748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02554455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ee50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123d1b70; to 'JaxprTracer' at 0x7ffc504ccfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85bed920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023425337807793954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210180>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057e020; to 'JaxprTracer' at 0x7ffb4057c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80c3e340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021868681314616993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166ed0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9059bf10; to 'JaxprTracer' at 0x7ffb9059a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e1ca4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022481628799386602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475e20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae015e8e0; to 'JaxprTracer' at 0x7ffbd019c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x475cef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021975863566479886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32ea0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03bbf60; to 'JaxprTracer' at 0x7ff7b03bb1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aedaf40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02391212049042233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fb70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a7010; to 'JaxprTracer' at 0x7ffb482a4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9da4f870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017697500764997955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0176975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a7ce0; to 'JaxprTracer' at 0x7ffc101a5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72d7bd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01962503622022897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01962504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9680>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39e9d0; to 'JaxprTracer' at 0x7ffa3c39e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7327c750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025363096560130225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0253631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074add0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03cd440; to 'JaxprTracer' at 0x7ffbb03cf100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7329fba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02389280633425655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed7e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb016b830; to 'JaxprTracer' at 0x7ffbb016a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa12693f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023777022171156063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1b20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4841bd30; to 'JaxprTracer' at 0x7ffb4841a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89392850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023667445689414056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d1e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03ff970; to 'JaxprTracer' at 0x7ffaf03fe8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f2f7c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022542590133628138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bfa90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503fb6a0; to 'JaxprTracer' at 0x7ffb503f9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0956400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023700407989934683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0480>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102d4770; to 'JaxprTracer' at 0x7ffc102d4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93418ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003405791817763839
32, epoch_train_loss=0.003405791817763839
Epoch 33
Epoch 33 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020840678956792782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200620>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0154130; to 'JaxprTracer' at 0x7ff7b0157a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd621c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018825975620855945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01882598, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3570>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014d260; to 'JaxprTracer' at 0x7ffaa85fa570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38271f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007572848872567817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00757285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101109e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42562f0; to 'JaxprTracer' at 0x7ff9d4256890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152adf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013046056723319878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01304606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e200>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c537e0; to 'JaxprTracer' at 0x7ff713c536a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x891e2e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020044279170023615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02004428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee510>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05c3c40; to 'JaxprTracer' at 0x7ff71358ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x804601f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023651024782955676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629ab0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07081d0; to 'JaxprTracer' at 0x7ff9b0708d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c741c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021019979231148126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02101998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3410>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074ce50; to 'JaxprTracer' at 0x7ffbd074e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3652d270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022290384933999506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e52a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100e8180; to 'JaxprTracer' at 0x7ffc100ea390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c98e800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02183221208471071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9650>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50679030; to 'JaxprTracer' at 0x7ffc5067a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d594d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02243190093580723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cc750>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44529760; to 'JaxprTracer' at 0x7ffa4452b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb0cec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01946942319897902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01946942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142035a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01c2ed0; to 'JaxprTracer' at 0x7ffbb01c04a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32360530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02259218754528697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3790>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf037a340; to 'JaxprTracer' at 0x7ff7137edd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4111e800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022426339147795238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112090>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8325da0; to 'JaxprTracer' at 0x7ffaa8326390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x370b6f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025310149019172022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e1c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87f1350; to 'JaxprTracer' at 0x7ffaa87f01d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f29bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02318671001874337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef080>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4dfec0; to 'JaxprTracer' at 0x7ffa4c4dffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x541a2f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021730124729742128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b6a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ec270; to 'JaxprTracer' at 0x7ffbb02ed6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4db2b9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022610220757212657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4b30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bcd080; to 'JaxprTracer' at 0x7ff711bcec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fdc8640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021872331890861064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8b40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30749120; to 'JaxprTracer' at 0x7ffbf077d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x336e5430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02389691430701013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477720>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b033e0c0; to 'JaxprTracer' at 0x7ff9b033cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a865ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017766373180675286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01776637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604030>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f445c9a0; to 'JaxprTracer' at 0x7ff9f445cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86cdf190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019505876466863897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101675a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301689a0; to 'JaxprTracer' at 0x7ffbb020dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x679b0b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025124713109192343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02512471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210200>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900777e0; to 'JaxprTracer' at 0x7ffc90075c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x347c71d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024127319880338855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049dfd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71375b1a0; to 'JaxprTracer' at 0x7ffa7042e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77a38c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02361283669290262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ca10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c2200; to 'JaxprTracer' at 0x7ff712370270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e9cfba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02398032514975092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2bf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b536a0; to 'JaxprTracer' at 0x7ffb4865d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4269a390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02275628572790915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1db0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f443b9c0; to 'JaxprTracer' at 0x7ff9f443b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ece9cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02399515795552928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02399516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5d70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8575710; to 'JaxprTracer' at 0x7ffaa8575d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e49b330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0032041298319784406
33, epoch_train_loss=0.0032041298319784406
Epoch 34
Epoch 34 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020715709050450865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02071571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147170>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0349850; to 'JaxprTracer' at 0x7ff7d034bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53457700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018870050586091286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01887005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745c30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb020c220; to 'JaxprTracer' at 0x7ffbb020c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e22c130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007674660272383681, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00767466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1970>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0707240; to 'JaxprTracer' at 0x7ffcd0704ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4462d290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012887090076367722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01288709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61b630>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70270fe0; to 'JaxprTracer' at 0x7ffc70273060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63039f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02000329815270669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0200033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606580>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4dc310; to 'JaxprTracer' at 0x7ffa4c4deed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f738010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02337772926156793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02337773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833ee20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b01585e0; to 'JaxprTracer' at 0x7ff9b015b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3568ab90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0209467854137861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774c00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f1ad0; to 'JaxprTracer' at 0x7ffb703f1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x477cb970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022083187130537783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774d70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30712bb0; to 'JaxprTracer' at 0x7ffc30710270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c6ba90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02218262800972495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359dc60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035ce00; to 'JaxprTracer' at 0x7ffbd035c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b136f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022366227710473127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6510>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c25b380; to 'JaxprTracer' at 0x7ffa4c258a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69fc0e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019257979753066933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01925798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144250>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125abbf0; to 'JaxprTracer' at 0x7ff7125a8ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ebc230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022558057033452768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6f60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713008bd0; to 'JaxprTracer' at 0x7ff713008720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fb59680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022278933889532632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e1a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b87d80; to 'JaxprTracer' at 0x7ff712b86390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6af596c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025020073968622256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02502007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902131f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4435210; to 'JaxprTracer' at 0x7ff9f4434450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68b035e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02298221273680299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3930>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd8db0; to 'JaxprTracer' at 0x7ff713cda3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa7717f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02164963440529209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833eab0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705efe70; to 'JaxprTracer' at 0x7ffb705ecbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c039b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022605580747002984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07771c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07c8130; to 'JaxprTracer' at 0x7ff713502b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96feaad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021755697772825516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e3f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70640450; to 'JaxprTracer' at 0x7ffa70643240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f36f990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023784742439086622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a930>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab074f290; to 'JaxprTracer' at 0x7ffab074cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dd0a1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017779188419654042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01777919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01edf50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014fb00; to 'JaxprTracer' at 0x7ffcf014d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41182b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019425481415926333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01942548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0cd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0156f20; to 'JaxprTracer' at 0x7ff7b0156c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x903c2f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024850103132870775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0248501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057c920>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb015b8d0; to 'JaxprTracer' at 0x7ffbb015bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a2dc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024226074601912565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498d50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae074b560; to 'JaxprTracer' at 0x7ffae074a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de0f6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023457879605970174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b28f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70681df0; to 'JaxprTracer' at 0x7ffc70682930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ee6ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024108689412524555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410869, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39ede0; to 'JaxprTracer' at 0x7ffa3c39f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f0e2040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022817449423594035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2290>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d7740; to 'JaxprTracer' at 0x7ff7132d4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41b14c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02414572021480387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201210>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c18ef20; to 'JaxprTracer' at 0x7ffa3c18f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x888c2950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003256292184799818
34, epoch_train_loss=0.003256292184799818
Epoch 35
Epoch 35 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020896284799830613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02089628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f07a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4ed2b0; to 'JaxprTracer' at 0x7ffa4c4ef6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23758450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01885110288992008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0188511, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252b20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f3ab0; to 'JaxprTracer' at 0x7ffb402f3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57926a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007769610833090095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00776961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa690>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073d3f0; to 'JaxprTracer' at 0x7ffbb073eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a21b4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013000502288706077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0130005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e53d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f66b0; to 'JaxprTracer' at 0x7ffb707f7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22c0cd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019902997739016937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.019903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0b90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706ac6d0; to 'JaxprTracer' at 0x7ffbd074abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27270700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023474230514965864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02347423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748b80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d477e110; to 'JaxprTracer' at 0x7ff9d477cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c3b3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021159975901319857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629a90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074c1d0; to 'JaxprTracer' at 0x7ffbd074dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d03e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022191753462630966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402ac770; to 'JaxprTracer' at 0x7ffb402ae0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd34ff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021770664043274556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8630>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50631c10; to 'JaxprTracer' at 0x7ffb705b2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c94a300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0222962111261659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70617de0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70764e00; to 'JaxprTracer' at 0x7ffb70767790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc03c530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019235057732989082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01923506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3600>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b03600; to 'JaxprTracer' at 0x7ff712b03bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53654520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022470078988264502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252480>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050cb80; to 'JaxprTracer' at 0x7ffb503f9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5098adc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022199010706892813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9df0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70669cb0; to 'JaxprTracer' at 0x7ffc7066b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73c9e110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025104872752998594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4c50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0344ef0; to 'JaxprTracer' at 0x7ffaf0347600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f68350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022916979170918835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0890>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa854df80; to 'JaxprTracer' at 0x7ffaa854d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99f5ba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02153947701097638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748330>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf077ca40; to 'JaxprTracer' at 0x7ffbb02ef6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8da3fde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0225135896173261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7060>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0600180; to 'JaxprTracer' at 0x7ff9b06031f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d30ed10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021717861655688172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d920>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0743970; to 'JaxprTracer' at 0x7ffbb0741170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94e899e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023735574677237248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286dd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0381620; to 'JaxprTracer' at 0x7ffbb03831a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9736ab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017693622813470127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01769362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833deb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137949f0; to 'JaxprTracer' at 0x7ff713796bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e80b990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019610322203725217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01961032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3480>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0169350; to 'JaxprTracer' at 0x7ffbb0169260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b05d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024936317347786476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02493632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476720>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502a9440; to 'JaxprTracer' at 0x7ffc502a85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f588840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024018780391251073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166a70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c705a80; to 'JaxprTracer' at 0x7ffa4c705080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26fcf590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02354701026865932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02354701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61abf0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb015ad40; to 'JaxprTracer' at 0x7ffbb015bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dda7690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02385925438367749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ee70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73f880; to 'JaxprTracer' at 0x7ffcb04a4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8104da80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0226565710566091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1e10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704584f0; to 'JaxprTracer' at 0x7ffa7045b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa8cc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023890847484671546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746b70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0758fe0; to 'JaxprTracer' at 0x7ffaf03598f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ee303d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0030877718513584998
35, epoch_train_loss=0.0030877718513584998
Epoch 36
Epoch 36 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021175037190535206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9003b920; to 'JaxprTracer' at 0x7ffbd019fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ac76c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018962491908356766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01896249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6770>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0349ad0; to 'JaxprTracer' at 0x7ff7d034bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x492c4f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008001617193107007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00800162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4130>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07122a0; to 'JaxprTracer' at 0x7ffcb0710c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e83a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013187586251836496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01318759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6185a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711909bc0; to 'JaxprTracer' at 0x7ff71190af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c2ab60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02003791462788571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02003791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477410>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a5a480; to 'JaxprTracer' at 0x7ff713a59b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78e12560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023749936912591137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250500>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001e90; to 'JaxprTracer' at 0x7ffc70669b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ee0b780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021490101321306777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e95e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48440cc0; to 'JaxprTracer' at 0x7ffb48442430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c8e24d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022428004807656776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9000>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907166b0; to 'JaxprTracer' at 0x7ffc90714270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88688fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02178230488506085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5710>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c259350; to 'JaxprTracer' at 0x7ffa4c25a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79ec8de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022455952019870166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200cf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0414f40; to 'JaxprTracer' at 0x7ffcb0417fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3526fa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01939081791861111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01939082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0040>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90076de0; to 'JaxprTracer' at 0x7ffc90074630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58b83b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02259607569384181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146020>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455dc60; to 'JaxprTracer' at 0x7ffc10595cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63fd7180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022349378241126747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d310>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304c7c90; to 'JaxprTracer' at 0x7ffcf00a6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cbd09e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025398989061640738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02539899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166250>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44235990; to 'JaxprTracer' at 0x7ffa44237290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23390d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023115508172758717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02311551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e38c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074bce0; to 'JaxprTracer' at 0x7ffbd074ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7d4ce00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02170222265765575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482530a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9059a840; to 'JaxprTracer' at 0x7ffb9059ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34724620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022622440364756823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea5d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae015d300; to 'JaxprTracer' at 0x7ffae015ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84048f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02186353668331234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7800>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073f4c0; to 'JaxprTracer' at 0x7ffbb073c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a3b1630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02394898038665964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748e30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0065df0; to 'JaxprTracer' at 0x7ff7d0067ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36f725e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017849347714780393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01784935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01efa30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa82f22f0; to 'JaxprTracer' at 0x7ff70c1e1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14ffd530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01995196242871544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01995196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057de40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50435990; to 'JaxprTracer' at 0x7ffb50436de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ebf7a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025223303835202507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0252233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b130>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7030ff10; to 'JaxprTracer' at 0x7ffc7030cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x954b4ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02413774843653379, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b33f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03b7650; to 'JaxprTracer' at 0x7ffbb03b6520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84934120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023766426774001728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0b60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0293ec0; to 'JaxprTracer' at 0x7ffcb0292750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a743910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023936364410428984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3dc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0182570; to 'JaxprTracer' at 0x7ffae0182b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65340b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022738009576522524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251380>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0213830; to 'JaxprTracer' at 0x7ffae0210e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x707bcf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023976053456417627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907520c0; to 'JaxprTracer' at 0x7ffb907523e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d92a8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003017935140475949
36, epoch_train_loss=0.003017935140475949
Epoch 37
Epoch 37 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021280857897444314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1350>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502a8fe0; to 'JaxprTracer' at 0x7ffc502a9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d4c520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019007814264462828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01900781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0080>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03bbab0; to 'JaxprTracer' at 0x7ffbd03ba7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40d44b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008200781146297345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00820078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522900>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ed760; to 'JaxprTracer' at 0x7ff7d07eeed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d07d360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01324554301088235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01324554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0c70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42c44f0; to 'JaxprTracer' at 0x7ffcf00e0220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18675100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02006630639022385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e240>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026bec0; to 'JaxprTracer' at 0x7ffb7026b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b8f29d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023819401874947205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0238194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef530>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0162ac0; to 'JaxprTracer' at 0x7ff7b0161f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bc2e960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021615320897377457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506286a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100eb330; to 'JaxprTracer' at 0x7ffc100e8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1385e5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022489986061101648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1f60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48230130; to 'JaxprTracer' at 0x7ffb482318a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3010abf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02159190937692631, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02159191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4100>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707be2f0; to 'JaxprTracer' at 0x7ffbd035e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x863f1c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02249765429584995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf5f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30646980; to 'JaxprTracer' at 0x7ffc30645210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10cd3840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019399585930934313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01939959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3a20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a7060; to 'JaxprTracer' at 0x7ff7119b6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c7814b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02259269896584941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3550>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b0720; to 'JaxprTracer' at 0x7ffbd05b1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d621b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02236524173820519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520d90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03d9850; to 'JaxprTracer' at 0x7ffbd05b1da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x628f0cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025463199364385253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0254632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b05e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07041d0; to 'JaxprTracer' at 0x7ff70be61990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63b92cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02314504359366064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02314504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d5a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d011e340; to 'JaxprTracer' at 0x7ff7d011f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x498f3270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021737317740443247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bf40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a943b0; to 'JaxprTracer' at 0x7ff713a953f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5288af60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022595816864094318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3fe0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f17420; to 'JaxprTracer' at 0x7ff713f14220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64fdb280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02189044195139769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e4c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44073ab0; to 'JaxprTracer' at 0x7ff9f44d81d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a713b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023943283293886456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285090>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb020d440; to 'JaxprTracer' at 0x7ffbb020cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92cf07f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017827489471888076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01782749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253080>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a68e0; to 'JaxprTracer' at 0x7ff712b38ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6113ef90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0201051194463254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02010512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0e10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9062c770; to 'JaxprTracer' at 0x7ff709202110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9da568e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02529220183575278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0252922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fa60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503ccef0; to 'JaxprTracer' at 0x7ffb503cc4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ee6b2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02405248282631205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02405248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604cf0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e7240; to 'JaxprTracer' at 0x7ffbd05e60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x650e3a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023823339858109634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618f30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3013e9d0; to 'JaxprTracer' at 0x7ffc3013c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c27b490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023824905870363268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e1d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73fd80; to 'JaxprTracer' at 0x7ffa4c73c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x755517e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022663297892487982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144cd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100be2f0; to 'JaxprTracer' at 0x7ffc100bd5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x935be900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023861664646170663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a50c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3e76f0; to 'JaxprTracer' at 0x7ffa3c3e7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9359e810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003027100534449625
37, epoch_train_loss=0.003027100534449625
Epoch 38
Epoch 38 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021181649670765183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9b80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711eabb50; to 'JaxprTracer' at 0x7ffbb0331fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ea08840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018957395032133683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0189574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9c20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf074eed0; to 'JaxprTracer' at 0x7ffbf074e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a035550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008378480926187882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00837848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902122e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0376480; to 'JaxprTracer' at 0x7ff9b0377470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x799d8910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013130469706851168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01313047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a490>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a6fc0; to 'JaxprTracer' at 0x7ffb482a50d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13743100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019984253328590447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01998425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e11c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db7920; to 'JaxprTracer' at 0x7ff712db7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x657edd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0236832596684573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285810>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01072e0; to 'JaxprTracer' at 0x7ffaf0105530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45ac4120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02146473111817615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b03d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c0f5bc0; to 'JaxprTracer' at 0x7ffa3c0f78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f27aa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022371809045389508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04a4720; to 'JaxprTracer' at 0x7ffcd04a6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c5eac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021858766413253808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062bda0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30644d60; to 'JaxprTracer' at 0x7ffc30645580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e7dcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022387514157054894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4390>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703f58f0; to 'JaxprTracer' at 0x7ffa703f6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11be8a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01923912730762791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01923913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9550>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482315d0; to 'JaxprTracer' at 0x7ffb705b2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f38ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022558459697978147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142021c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0745260; to 'JaxprTracer' at 0x7ffcb0744630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7caf2030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022236299851703688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021cbf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf066d850; to 'JaxprTracer' at 0x7ffaf066d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d487aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025310883969850182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605f10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01bb970; to 'JaxprTracer' at 0x7ffcf020ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa231d870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02298028725766171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482503f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cb2cf0; to 'JaxprTracer' at 0x7ff713cb0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12ec2400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021644570084878512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea560>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa447c2660; to 'JaxprTracer' at 0x7ffb703f1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968a1a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022624141993284046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b01c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b4270; to 'JaxprTracer' at 0x7ffb905b6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9688d3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021786700737648275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506293f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71334ea70; to 'JaxprTracer' at 0x7ff71334e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a3fbd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02390540727746183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee540>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07e0130; to 'JaxprTracer' at 0x7ff9b07e0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67da2f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01780986195062909, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01780986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c520>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e7bf0; to 'JaxprTracer' at 0x7ff7b03e54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb554d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01993467862880772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01993468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6d80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702e3600; to 'JaxprTracer' at 0x7ffc702e3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29e139a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025133043565771167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b3a50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502aae30; to 'JaxprTracer' at 0x7ffc502aba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770a7cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024155141274411714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2710>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076a6b0; to 'JaxprTracer' at 0x7ffb7076a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd0d660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02370552935338342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523ec0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04d6570; to 'JaxprTracer' at 0x7ffb5039ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x969c73d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02394613907891368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc200>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01f5210; to 'JaxprTracer' at 0x7ffae01f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f7dc4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022724624840030253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02272462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8d30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b7dd0; to 'JaxprTracer' at 0x7ffb400b4e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424c1d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023987537486612743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a14a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48420f40; to 'JaxprTracer' at 0x7ffb484213f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x787d7470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002890986558417345
38, epoch_train_loss=0.002890986558417345
Epoch 39
Epoch 39 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021000105988365513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901441c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0348950; to 'JaxprTracer' at 0x7ff7d0349ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x790551c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01888680345625584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0188868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111460>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70373920; to 'JaxprTracer' at 0x7ffb70370c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64a26430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008488867535806074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00848887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0fc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30300400; to 'JaxprTracer' at 0x7ffc303028e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11b64df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012965725946154713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01296573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c17a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74c400; to 'JaxprTracer' at 0x7ffa4c74fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ca7ff50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01988621085039831, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01988621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e56c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f44356c0; to 'JaxprTracer' at 0x7ff9f44367f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93cb5e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02348297906116907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02348298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef330>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c214630; to 'JaxprTracer' at 0x7ffa4c215fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e046f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021223775053990514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02122378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ea980>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f42520; to 'JaxprTracer' at 0x7ff7d0077f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6108f770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022195635210254923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0740>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4028fe20; to 'JaxprTracer' at 0x7ffb4028d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65d2cb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021791897466202935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4764e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd038b560; to 'JaxprTracer' at 0x7ffbd038a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93a8f640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02227224620647872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616e70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c27d8f0; to 'JaxprTracer' at 0x7ffa4c27c090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a9f1e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019056145789235368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01905615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901455b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa447169d0; to 'JaxprTracer' at 0x7ffa447178d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x477eb7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02246316068931059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113500>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050f880; to 'JaxprTracer' at 0x7ffbf050e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa29593f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02210290425562384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f38d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703f0ef0; to 'JaxprTracer' at 0x7ffb703f16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66bf7bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025086223730221742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02508622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c36c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907449a0; to 'JaxprTracer' at 0x7ffc90747d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b9d6990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02280524459380281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4cf0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9060db70; to 'JaxprTracer' at 0x7ffc9060dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72905420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021536043511169844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee080>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e5c10; to 'JaxprTracer' at 0x7ffbf03e4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e8f230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02255231814569583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3a60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c60d440; to 'JaxprTracer' at 0x7ffa3c60e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x385198b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021680013613478717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746b30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f44d9f80; to 'JaxprTracer' at 0x7ff71264f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3ed210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023724596948668113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9e20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9020ef20; to 'JaxprTracer' at 0x7ffb9020cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82aa6270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017613264638214637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01761326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7a00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0618220; to 'JaxprTracer' at 0x7ff7b0618f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5775f110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01967755153768105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01967755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251e10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f0ea0; to 'JaxprTracer' at 0x7ffb402f3010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d1384f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024909335213205874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02490934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0777e50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0342160; to 'JaxprTracer' at 0x7ffbb0342110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84108d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02403086187951935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02403086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706069c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703c5c60; to 'JaxprTracer' at 0x7ffaa85f9120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8604eab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023531106739042955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101677a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0382ca0; to 'JaxprTracer' at 0x7ffc3055c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52260e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023854523541987183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d9f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04dfec0; to 'JaxprTracer' at 0x7ffcd04df2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77167830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022636557601660848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049da60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73dd00; to 'JaxprTracer' at 0x7ff7b0156de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f528c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023869549591848803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201710>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b058a930; to 'JaxprTracer' at 0x7ffbd0732ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x954ff720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0028853502343347257
39, epoch_train_loss=0.0028853502343347257
Epoch 40
Epoch 40 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02094185144778639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e140>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50613830; to 'JaxprTracer' at 0x7ffb50612c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c0f0d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01896430444028917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0189643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa020>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05a7e70; to 'JaxprTracer' at 0x7ffc70458090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88b14d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008634421587946797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00863442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213cb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c64b010; to 'JaxprTracer' at 0x7ff70c648450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61bcfa50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012902239479186808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01290224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f14c20; to 'JaxprTracer' at 0x7ff713f14310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a14b4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019990090895599173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01999009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0b00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00872e0; to 'JaxprTracer' at 0x7ffaf00876a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83a09a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023516068534170563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02869c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03955d0; to 'JaxprTracer' at 0x7ffc706698f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77a0fe60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02114787801683472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0bc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0211030; to 'JaxprTracer' at 0x7ffae0212d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x948fc170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022189449017672974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3ee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa445902c0; to 'JaxprTracer' at 0x7ffa44590d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30103d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022155269666631217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31160>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a7a10; to 'JaxprTracer' at 0x7ffc702a5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbfa7060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02244405820530574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2530>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0414fe0; to 'JaxprTracer' at 0x7ffbb01c8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5546030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019063243113387245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01906324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833d940>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4abba0; to 'JaxprTracer' at 0x7ffa4c4aa430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ce41050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02265587950852261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7a50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1051d6c0; to 'JaxprTracer' at 0x7ffc1051e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x974da990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02223236924526814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d560>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505bd9e0; to 'JaxprTracer' at 0x7ff9d477ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2871ed40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0251456177155787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101670d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486ee5c0; to 'JaxprTracer' at 0x7ffb486ed2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89e7af90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02291119660072437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229112, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775650>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ecea0; to 'JaxprTracer' at 0x7ffb40540b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55620160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02168232430600138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d42e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e38310; to 'JaxprTracer' at 0x7ff711e3b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x370b93c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02276097027500907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276097, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b00a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71334fec0; to 'JaxprTracer' at 0x7ff7d0064d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20bb9030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02181087088901009, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32750>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50374720; to 'JaxprTracer' at 0x7ffb50377470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75145e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023858065282354766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749fc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128cf1a0; to 'JaxprTracer' at 0x7ffcf03a3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8c8d320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01765479879514046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0176548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec4a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07424d0; to 'JaxprTracer' at 0x7ffbb0740d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8c5e3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01961099934494277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.019611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049afa0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ada80; to 'JaxprTracer' at 0x7ff7d07acd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5223d870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024954820397984103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02495482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b22d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503fa430; to 'JaxprTracer' at 0x7ffb503facf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99b3d100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024258628255039872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1fb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c313fb0; to 'JaxprTracer' at 0x7ffa3c3109f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76af1b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023530502017750032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523810>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0340810; to 'JaxprTracer' at 0x7ffbb0341670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x494cb040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024153832287294494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdc50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a4310; to 'JaxprTracer' at 0x7ffc101a48b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65331160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02286851881656202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2900>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4024e3e0; to 'JaxprTracer' at 0x7ffb4024e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x935a4920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02411498591867831, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111da0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705cff10; to 'JaxprTracer' at 0x7ffb705cfb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c7ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0028459948947617457
40, epoch_train_loss=0.0028459948947617457
Epoch 41
Epoch 41 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020944441950654976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5a80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067fd80; to 'JaxprTracer' at 0x7ffcb067f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3008d550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019043475927164186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01904348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057ca70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014d0d0; to 'JaxprTracer' at 0x7ff7b014d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58b50490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008697883436248458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00869788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8eb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c197240; to 'JaxprTracer' at 0x7ffa3c1949f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13107530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012939867065687288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01293987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0250>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30303100; to 'JaxprTracer' at 0x7ffc30303f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a8c7170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02012326404257261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02012326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049bbc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504e4900; to 'JaxprTracer' at 0x7ffc504e6480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65f8db10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023587405059383348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed4c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1016fce0; to 'JaxprTracer' at 0x7ffc1016dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x305f47d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02118606862895396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476160>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048cea0; to 'JaxprTracer' at 0x7ffc5048db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22e484c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022224915635185968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e630>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1051e2a0; to 'JaxprTracer' at 0x7ffc1051f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5f82e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021214755188548706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506290f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505eacf0; to 'JaxprTracer' at 0x7ffc505ea750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5affb610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022625421993337336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cce40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15c090; to 'JaxprTracer' at 0x7ffa3c15f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46824190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01912612634566296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01912613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5f50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41d4a90; to 'JaxprTracer' at 0x7ff9f41d7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84d9dc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022601241522140096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057fad0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa5210; to 'JaxprTracer' at 0x7ff9f41d7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc3b550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02238581872991985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa870>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87d5ee0; to 'JaxprTracer' at 0x7ffaa87d6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15b8f840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025237012231481015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02523701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1650>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b034c0; to 'JaxprTracer' at 0x7ff71334f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x579a1be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023073207387250463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b2f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a22c50; to 'JaxprTracer' at 0x7ff713a20fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38acd770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021855155997755834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748cb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab057c450; to 'JaxprTracer' at 0x7ffab057cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30da8690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022540560382781554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f2a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c225530; to 'JaxprTracer' at 0x7ffa4c225670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6dcd220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0219474540806175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1e10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0698360; to 'JaxprTracer' at 0x7ff70c1ce840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x557c7460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023664183106107083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9270>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ed41d0; to 'JaxprTracer' at 0x7ff711ed6660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48a449c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017310533314936278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01731053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287a00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c413380; to 'JaxprTracer' at 0x7ff711eab1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b916210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019731009211499288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1200>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01acef0; to 'JaxprTracer' at 0x7ffbb01ae110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dd50490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025061829350865834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101652b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0178310; to 'JaxprTracer' at 0x7ffcf0179bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x651fc1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023714737911052674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61bed0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076a980; to 'JaxprTracer' at 0x7ffb7076bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35bb99f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023555429174210524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049cd50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf062e7a0; to 'JaxprTracer' at 0x7ffaf062e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x408c1b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023598354250806163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210a80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7069b920; to 'JaxprTracer' at 0x7ffa7069b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x939a1200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022484643219237876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7ec0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018c310; to 'JaxprTracer' at 0x7ffbb0243600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d9396c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02348823966099053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02348824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa680>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0385670; to 'JaxprTracer' at 0x7ffaf03854e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x859f5ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0029218401859687393
41, epoch_train_loss=0.0029218401859687393
Epoch 42
Epoch 42 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021122392481690556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acb8a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a59df0; to 'JaxprTracer' at 0x7ff713a5bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27430870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019030354760379772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01903035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3330>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502aba10; to 'JaxprTracer' at 0x7ffc502a8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f7fa650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008862003671818388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.008862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3720>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50278400; to 'JaxprTracer' at 0x7ffc502789f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f49cf40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013076552087676453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01307655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a3c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e0720; to 'JaxprTracer' at 0x7ffbd06e1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8da0a170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02013880709611876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02013881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252d90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03449a0; to 'JaxprTracer' at 0x7ffaf0346b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd4d4c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023909724209251085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7240>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c172430; to 'JaxprTracer' at 0x7ff70c173f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59809920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02130294782952758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02130295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fe70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707bfec0; to 'JaxprTracer' at 0x7ffb707bc180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e0392a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022478639354578688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e850>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa811fc40; to 'JaxprTracer' at 0x7ffaa811e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79d94820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022606251080248732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8650>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033a4d0; to 'JaxprTracer' at 0x7ffb7073d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x498669e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02268792712587249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30320>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70681df0; to 'JaxprTracer' at 0x7ffc70682cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25ad3520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01923311044600642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01923311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acb750>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304c6ca0; to 'JaxprTracer' at 0x7ffc304c6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45bbd6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0229511948627364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1710>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505bf790; to 'JaxprTracer' at 0x7ffb505bc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4774c7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022494557400764635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f640>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904ed990; to 'JaxprTracer' at 0x7ffc1016c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x150548a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025640524495947864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02564052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706041a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b5580; to 'JaxprTracer' at 0x7ffb905b5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61237230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023211358691719013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02879b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01e51c0; to 'JaxprTracer' at 0x7ff7b01e7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8431a210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02193988696844921, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629cb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02c5260; to 'JaxprTracer' at 0x7ffcb02c5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa791f4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023075881211246322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063dda0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712373790; to 'JaxprTracer' at 0x7ff712371ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x980b76b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022049698404851107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eb750>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1965c0; to 'JaxprTracer' at 0x7ffa3c195da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac3d4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024320860066585747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02432086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d150>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71418cb80; to 'JaxprTracer' at 0x7ffb903b9ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e0b7ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017843487867002267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01784349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504982e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c2660; to 'JaxprTracer' at 0x7ffcd04a4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989f0870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019788347513821525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01978835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0960>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d016c0; to 'JaxprTracer' at 0x7ff713d01e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f4c190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025403588234958748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02540359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1560>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d44e0680; to 'JaxprTracer' at 0x7ff9d44e2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bc898b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024675311036489716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02467531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc1e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b03774c0; to 'JaxprTracer' at 0x7ffc50647ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e05c1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02375567188303351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02375567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9d60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be34f40; to 'JaxprTracer' at 0x7ff70be36b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86e56820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02460510367454539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0246051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334340>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0762e80; to 'JaxprTracer' at 0x7ffbb0760040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38a407a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02321226036246076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0455530; to 'JaxprTracer' at 0x7ffaa8727920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ed0b290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024505503284482654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0245055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901454d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f42128e0; to 'JaxprTracer' at 0x7ff9f4212d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74fed610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.003219910892888948
42, epoch_train_loss=0.003219910892888948
Epoch 43
Epoch 43 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02102224039877192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02102224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101109c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70373dd0; to 'JaxprTracer' at 0x7ffb70371c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d181cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018871030846066453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01887103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250470>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905999e0; to 'JaxprTracer' at 0x7ffb9059ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d1340f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008811136883585103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00881114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e36a0; to 'JaxprTracer' at 0x7ffab04d7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74b87130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01306824090239955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334bd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30193100; to 'JaxprTracer' at 0x7ffc30190450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76b51f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019976826759768255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bfba0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706af880; to 'JaxprTracer' at 0x7ffc706ae020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69f1ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023782921524669175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a01e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009e610; to 'JaxprTracer' at 0x7ffcf009e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad3d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021158363625077288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f3f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01ff7e0; to 'JaxprTracer' at 0x7ffbd01fdad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfcb91e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022379274774878492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec940>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06b0180; to 'JaxprTracer' at 0x7ffae06b0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2630e240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02112933018986514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4757f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa854ce00; to 'JaxprTracer' at 0x7ffaa854d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa22821a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02248904408855867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706141e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711926ca0; to 'JaxprTracer' at 0x7ff7119245e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x774c74c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01908119521333648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0190812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111710>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06f28e0; to 'JaxprTracer' at 0x7ffae06f2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x774abe60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02251062968462186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253e40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07553f0; to 'JaxprTracer' at 0x7ffab07561b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e3cd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02228007582949266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5ee0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0741df0; to 'JaxprTracer' at 0x7ffbb02ed440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76fc5e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02546731836577589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02546732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03341a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a5170; to 'JaxprTracer' at 0x7ffc307a4a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1835c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023019140142178155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521fd0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711c2a700; to 'JaxprTracer' at 0x7ff713001260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f3dc370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02175555858864652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1530>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa83a6570; to 'JaxprTracer' at 0x7ffaa83a5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19d9b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02246871422607733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec120>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44322750; to 'JaxprTracer' at 0x7ffa443210d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fb3a4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021843282973740115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474e70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d0a90; to 'JaxprTracer' at 0x7ffbb039dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6e87240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02379714071002662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02379714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ef60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713edfd80; to 'JaxprTracer' at 0x7ff713edcf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97edfcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017279677949550005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01727968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629100>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f418abb0; to 'JaxprTracer' at 0x7ff9f418af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56449c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01969167326338563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01969167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6df0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07e2980; to 'JaxprTracer' at 0x7ff9b07e39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f7feef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025250779397292533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02525078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286870>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4866aca0; to 'JaxprTracer' at 0x7ffb48668ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa454a150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023724353002539632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250a70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134e04a0; to 'JaxprTracer' at 0x7ff7134e0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1719c420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02359242823854411, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605030>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02f4810; to 'JaxprTracer' at 0x7ffab02f4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f2eee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023536166922919956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619520>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7045b880; to 'JaxprTracer' at 0x7ffb70458e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551f4b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02239642377079701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d0f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90229b70; to 'JaxprTracer' at 0x7ffc30711210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465b7ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023437971546413753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02343797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b321b70; to 'JaxprTracer' at 0x7ff70b323e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e652990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0028878863719559505
43, epoch_train_loss=0.0028878863719559505
Epoch 44
Epoch 44 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021002818503514598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101641c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1cd3f0; to 'JaxprTracer' at 0x7ff70c1cd9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17601bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018805785666754397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01880579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9b70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4452a480; to 'JaxprTracer' at 0x7ffa4452a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564b9f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008856176078607017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00885618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3c10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5027bbf0; to 'JaxprTracer' at 0x7ffc50279ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec3bd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013030516001251553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01303052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607710>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1122a0; to 'JaxprTracer' at 0x7ffa3c110040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445979e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019914398938204594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0199144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285820>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0269c10; to 'JaxprTracer' at 0x7ffcd02689f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33125cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023756844953251928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02375684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e9e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07044f0; to 'JaxprTracer' at 0x7ffbb0706b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8439f310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021077399797098904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0210774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744c50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903e1c60; to 'JaxprTracer' at 0x7ffb903e2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f9d5970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022355346434613364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50563060; to 'JaxprTracer' at 0x7ffb505622a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x547295e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021755255167379604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f6c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f6f70; to 'JaxprTracer' at 0x7ffbd06f7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15338150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022407443052686337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146e40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046bba0; to 'JaxprTracer' at 0x7ffc505e9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bbc1750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018966998633294596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.018967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833da20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100eaf20; to 'JaxprTracer' at 0x7ffc100e8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0b8d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022552526559798333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0777050>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd8db0; to 'JaxprTracer' at 0x7ff713cda340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a652e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022194153678451248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ff40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7a60; to 'JaxprTracer' at 0x7ffc902b5bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f00f540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025450271468262738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02545027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251a20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f5800; to 'JaxprTracer' at 0x7ff9d42efd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62c38840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022922513453884245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6070>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0658180; to 'JaxprTracer' at 0x7ffaf065b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ea8150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021703206433215105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c8d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30300270; to 'JaxprTracer' at 0x7ffc30302b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ab3b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022614883792332403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706faf20; to 'JaxprTracer' at 0x7ffc706f8b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57671570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021756331346232224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d440>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067cbd0; to 'JaxprTracer' at 0x7ffcb067f100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84bcb030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023943724761097126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a04c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9017f010; to 'JaxprTracer' at 0x7ffb9017cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3717b100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017420386658701985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01742039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2e50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15ccc0; to 'JaxprTracer' at 0x7ffa3c15d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8021980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019551540763494357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01955154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520f60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10597330; to 'JaxprTracer' at 0x7ffc10594ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38231d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025209007925675646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02520901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa0e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70373470; to 'JaxprTracer' at 0x7ffb70373560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b201a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02409452424148543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334a80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3dd5d0; to 'JaxprTracer' at 0x7ffa3c3ddad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64ca5440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02355881444658423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359cea0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05ef880; to 'JaxprTracer' at 0x7ff7d05efa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e63e6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023918038786631162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e62b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c410ef0; to 'JaxprTracer' at 0x7ffa4c410810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c2807e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022642141239153864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702502a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3013c2c0; to 'JaxprTracer' at 0x7ffc3013ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8eab6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023848043461513917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d56d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10355f30; to 'JaxprTracer' at 0x7ffbf05b9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e88ef50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0026471266230780107
44, epoch_train_loss=0.0026471266230780107
Epoch 45
Epoch 45 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021057924712021062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a84a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0343150; to 'JaxprTracer' at 0x7ffbb0342480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654ab130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0188031901882902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01880319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb450>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10597f60; to 'JaxprTracer' at 0x7ffc10597c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x209ced30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008900388653789996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00890039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250ea0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e27a0; to 'JaxprTracer' at 0x7ffcf00e3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e9f19b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01302492049469669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01302492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4254360; to 'JaxprTracer' at 0x7ff9d4257ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf141720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019899481496129353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01989948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8780>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03b8900; to 'JaxprTracer' at 0x7ff7b03b9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26f37d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023784298343276288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2530>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae068ab10; to 'JaxprTracer' at 0x7ffae068b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9828180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02109862215321998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02109862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1960>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70253060; to 'JaxprTracer' at 0x7ffc702519e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x983a4420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02237595941810941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0239ee0; to 'JaxprTracer' at 0x7ffbd023be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61aec580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022511282536533853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166640>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055c400; to 'JaxprTracer' at 0x7ffb4055ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x898699a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022384627347524746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cdc30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa811bf10; to 'JaxprTracer' at 0x7ffaa811aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cdfe050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018905313450261054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01890531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9750>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b01e90; to 'JaxprTracer' at 0x7ff712b036f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x479994f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02266839133334353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb090>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70452ac0; to 'JaxprTracer' at 0x7ffb704516c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c99770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02217312233737669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253740>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1721b0; to 'JaxprTracer' at 0x7ff70c170db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9289ad50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025497767013020214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02549777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057c7f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae015e610; to 'JaxprTracer' at 0x7ffaf0347290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465c08f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022887428111722067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc610>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a4d10; to 'JaxprTracer' at 0x7ffb482a7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa58e5050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02170106286985031, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c31f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4424dd50; to 'JaxprTracer' at 0x7ffa4424f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65f04170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022837811977930614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02283781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee910>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50678c20; to 'JaxprTracer' at 0x7ffc506780e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb4d890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021736194475567433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101647d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0243970; to 'JaxprTracer' at 0x7ffcb0241940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d524550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02417556262077124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201ce0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502a9df0; to 'JaxprTracer' at 0x7ffc502abba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41407800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017659137208984023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01765914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476c50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a0680; to 'JaxprTracer' at 0x7ff713d03b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12d11440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01951711744373362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01951712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6e90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50644220; to 'JaxprTracer' at 0x7ffc50644ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23307880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025234133858461905, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02523413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628bd0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a7a10; to 'JaxprTracer' at 0x7ffc505e8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33505370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024563312229396513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02456331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252f80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d011dad0; to 'JaxprTracer' at 0x7ff7d011cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0635100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023591516052296407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8680>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8359490; to 'JaxprTracer' at 0x7ffaa8358f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f16780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024401523382965043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605b50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702e2840; to 'JaxprTracer' at 0x7ffc702e3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956f1a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022970299286285467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021df90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d7fb0; to 'JaxprTracer' at 0x7ffbb03d4cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7da35180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024371674484531362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02437167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7ba0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87def70; to 'JaxprTracer' at 0x7ffaa87df0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3f05c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002854542945777141
45, epoch_train_loss=0.002854542945777141
Epoch 46
Epoch 46 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021059589390341367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4d60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c48b8d0; to 'JaxprTracer' at 0x7ffa4c488770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa6ad80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018764923111990857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01876492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2ef0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9078fb50; to 'JaxprTracer' at 0x7ffb9078d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ed7230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008826476277992221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00882648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021eaa0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a5a070; to 'JaxprTracer' at 0x7ff713a5a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a3b260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013021295695970844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0130213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706059b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400e90d0; to 'JaxprTracer' at 0x7ffb400ebba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6db5d300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019800220042522125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01980022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287ee0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90173510; to 'JaxprTracer' at 0x7ffb90173880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64088760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02368853578592562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063dda0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f424a070; to 'JaxprTracer' at 0x7ff9f42481d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89b563a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021092301463082917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0210923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07444d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd053c860; to 'JaxprTracer' at 0x7ffbd053e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2338fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02229893090403639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70640c20; to 'JaxprTracer' at 0x7ffa70643ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98340090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02136328800831073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed2b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10139f30; to 'JaxprTracer' at 0x7ffc10138ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0ff160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022279908691193888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7f70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a41d0; to 'JaxprTracer' at 0x7ffbf011bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3451ec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018778129439275267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01877813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6930>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713370090; to 'JaxprTracer' at 0x7ff713370590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3849f140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0223863784897316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1550>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8727a10; to 'JaxprTracer' at 0x7ffaa8727e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533bfa50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02206188971670091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e050>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904ef1f0; to 'JaxprTracer' at 0x7ffc904ec3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c914110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025364881751554606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02536488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea490>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd042ad40; to 'JaxprTracer' at 0x7ffb505bdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc15980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0227471435644305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628a00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074b740; to 'JaxprTracer' at 0x7ffbd074bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1288c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021577917954172538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4771d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712373150; to 'JaxprTracer' at 0x7ff712373ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68fcbfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022443338909408975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746710>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03bb240; to 'JaxprTracer' at 0x7ffbd03ba8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36136fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02163926343289111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee160>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70710f90; to 'JaxprTracer' at 0x7ffb707109a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf0c4860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02377868298246796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2110>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab057c6d0; to 'JaxprTracer' at 0x7ffab057dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x181a5470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017231447102652023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01723145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498b70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d2520; to 'JaxprTracer' at 0x7ffc70434900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f6ac5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01956026016562505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01956026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bef30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c1990; to 'JaxprTracer' at 0x7ff7137c2750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696bfde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02512816232015981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02512816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522c70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073d850; to 'JaxprTracer' at 0x7ffcf04127a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x491cf820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02381938426685374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486faef0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b39350; to 'JaxprTracer' at 0x7ff712b3a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bb4bc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023512096385029917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e0f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06dc950; to 'JaxprTracer' at 0x7ffaf06dfa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69dafe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023623447654507475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359dd60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e6e30; to 'JaxprTracer' at 0x7ff7b03e7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e96a880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02239903703752467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253c30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4024dc60; to 'JaxprTracer' at 0x7ffab04d6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53ceacb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02355467052348874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10110ab0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125cc8b0; to 'JaxprTracer' at 0x7ff7125cc720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74ff8350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0027329416450537583
46, epoch_train_loss=0.0027329416450537583
Epoch 47
Epoch 47 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021241277158528814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e32a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c101440; to 'JaxprTracer' at 0x7ffa3c103a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x226d4090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018895008097750195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01889501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9440>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07130b0; to 'JaxprTracer' at 0x7ff713797060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e61e100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008863491066107192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00886349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02faea0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707646d0; to 'JaxprTracer' at 0x7ff9d4324f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a00870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01310576273069147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01310576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d560>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70709bc0; to 'JaxprTracer' at 0x7ffc1051c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0a475d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019907450400188573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01990745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8900>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01eaa20; to 'JaxprTracer' at 0x7ffcf01e8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fd512a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023854565825903087, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2680>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7740; to 'JaxprTracer' at 0x7ffc902b5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dafacc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02129639936952628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212964, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a25c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30468360; to 'JaxprTracer' at 0x7ffc3046b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cccf440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02242836871198899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1020>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb034da80; to 'JaxprTracer' at 0x7ffbb034ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448e1dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021833806406835056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164970>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d473bd30; to 'JaxprTracer' at 0x7ff9d47388b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96413210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022444167616409005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706166b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1013aca0; to 'JaxprTracer' at 0x7ffc10138fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8905a1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01885633047354837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01885633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1570>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076b880; to 'JaxprTracer' at 0x7ffb70769c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x103ef590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0226069052824375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a86a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0379940; to 'JaxprTracer' at 0x7ffbf037a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b5b160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02221476815371572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fba10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303cd990; to 'JaxprTracer' at 0x7ffc303cea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d046d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025555025664994444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02555503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d1a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001df0; to 'JaxprTracer' at 0x7ff713000310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1f38350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022912418045924896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb560>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03444a0; to 'JaxprTracer' at 0x7ffaf0346020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfe38d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021730387644815996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0910>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85cbc40; to 'JaxprTracer' at 0x7ffaa85c8770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20f16fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022707176456395178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1230>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907dec00; to 'JaxprTracer' at 0x7ffc907dd620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f2803b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02177821765521272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b13a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39f7e0; to 'JaxprTracer' at 0x7ffa3c3d5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61461c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024046615330041824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e550>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f46ba980; to 'JaxprTracer' at 0x7ff9f46b9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39178dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01744690234268565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0174469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747e60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44715df0; to 'JaxprTracer' at 0x7ffa44717290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39044670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019764911471713366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201b30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0754810; to 'JaxprTracer' at 0x7ffab0757e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b22b170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025315867717853636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f1e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400476a0; to 'JaxprTracer' at 0x7ffb50437600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a8b570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024175328243666874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287be0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026bf10; to 'JaxprTracer' at 0x7ffb4059c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x905a1450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023669880482768454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250f30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0410ef0; to 'JaxprTracer' at 0x7ffcf0413650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x585a3e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02402406636015265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706060f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f4e00; to 'JaxprTracer' at 0x7ffb905f6750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d120850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022708302188689296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6186f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9078fec0; to 'JaxprTracer' at 0x7ffb9078e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1777fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023934815437472372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021fb30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf055e070; to 'JaxprTracer' at 0x7ffc30332200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f3bd140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0024939393367895573
47, epoch_train_loss=0.0024939393367895573
Epoch 48
Epoch 48 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021330474938957684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901461e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf033ae80; to 'JaxprTracer' at 0x7ffbf033a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f7b6090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018970928756466273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0340>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15e7a0; to 'JaxprTracer' at 0x7ffa3c15dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dacf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008860337461106305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00886034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb120>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf052b510; to 'JaxprTracer' at 0x7ffbf052a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x186f2320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01312250997835068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01312251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b760>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0698630; to 'JaxprTracer' at 0x7ffcb0698900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9739cd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019970184574420107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476170>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0781b70; to 'JaxprTracer' at 0x7ffc70619260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d0e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02391132514620219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5c10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c2179c0; to 'JaxprTracer' at 0x7ffa4c2148b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12fccc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021395738608716314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02139574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0c30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100cdad0; to 'JaxprTracer' at 0x7ffc100ccea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e836b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022464584603697157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1040>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0478770; to 'JaxprTracer' at 0x7ffcd0479cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341593b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022043632484835235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049bce0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0609350; to 'JaxprTracer' at 0x7ffcb060bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x181f3d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02255503366994684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3340>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3dd440; to 'JaxprTracer' at 0x7ffc30398ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x593ed730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01884095362884835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01884095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33990>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046a4d0; to 'JaxprTracer' at 0x7ffc30469940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5edc2080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022728844694067607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02272884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbf40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44133920; to 'JaxprTracer' at 0x7ffa44133290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86b7e0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02229950516798373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253aa0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706af7e0; to 'JaxprTracer' at 0x7ffc706ac040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fda2b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025616767399170008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e790>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707bf380; to 'JaxprTracer' at 0x7ffb707be200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b8f0e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0230107865532716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745980>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0596ed0; to 'JaxprTracer' at 0x7ffbb0594f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11a9f970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021828642302987505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6a90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0105850; to 'JaxprTracer' at 0x7ffaf0107380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2376f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02285335643911484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2970>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c258ae0; to 'JaxprTracer' at 0x7ffa4c25be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e89880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021862610551815997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498ff0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70765fd0; to 'JaxprTracer' at 0x7ffb707658f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x253859a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02415802936916913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305228d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704362a0; to 'JaxprTracer' at 0x7ffc10597650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x437228d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01751012067358479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01751012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9ee0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42b18a0; to 'JaxprTracer' at 0x7ff9d42b30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77aee020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019891666617690967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01989167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336480>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b05e0; to 'JaxprTracer' at 0x7ffbd05b1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6050e9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02538755699310905, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02538756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359cf50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70711b70; to 'JaxprTracer' at 0x7ffb70711620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa75e0d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02432933027003057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02432933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252390>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c450720; to 'JaxprTracer' at 0x7ffa4c452d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f9319e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02373959237030214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c06d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30644360; to 'JaxprTracer' at 0x7ffc30647f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8006370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024226087200081466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a590>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444b9620; to 'JaxprTracer' at 0x7ffa444b9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33729f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022862799051380712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d910>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4024df30; to 'JaxprTracer' at 0x7ffb4024f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74cca8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024102671043203846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0d90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10131760; to 'JaxprTracer' at 0x7ffc10133330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d088f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0025116392707956086
48, epoch_train_loss=0.0025116392707956086
Epoch 49
Epoch 49 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02117493851382225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61bdb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123d3100; to 'JaxprTracer' at 0x7ff7123d3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67aa830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01891888670672694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01891889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774c90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0052750; to 'JaxprTracer' at 0x7ffcf0052e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37870b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008763977304275535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00876398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e870>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0157420; to 'JaxprTracer' at 0x7ffae0154540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84bb4100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012996901247430958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0129969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c13a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907b3420; to 'JaxprTracer' at 0x7ffc907b23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39ad1300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019899819384052216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01989982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e100>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01e64d0; to 'JaxprTracer' at 0x7ff7b01e5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c619d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02369114617607745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337c50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c2e30; to 'JaxprTracer' at 0x7ffaa85c0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e176650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0212531783805436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bee50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70681c60; to 'JaxprTracer' at 0x7ffc70680e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87daed30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022279064993104825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0480>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05f0860; to 'JaxprTracer' at 0x7ffcb05f0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d00260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021151059697661165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a03c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055da80; to 'JaxprTracer' at 0x7ffb4055d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4631b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022509227846077874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6ce870>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ee020; to 'JaxprTracer' at 0x7ff9d42eeed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bd9a510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018629300945916184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0186293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61b9c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705da700; to 'JaxprTracer' at 0x7ffb705dbce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x430df8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022528656266949727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07768d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5060aa70; to 'JaxprTracer' at 0x7ffb5060b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa85f5190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02220217093283239, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e270>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4452a750; to 'JaxprTracer' at 0x7ffa44529ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b20f970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025359757540167786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02535976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c24c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0143ce0; to 'JaxprTracer' at 0x7ffaa8325620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f246380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022904138833604145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359eb50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a5620; to 'JaxprTracer' at 0x7ffcd0269580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa09cff30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02176131878461854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbbc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5067b380; to 'JaxprTracer' at 0x7ffcd0208cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e5d25a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02255746513786195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2b50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400e9b20; to 'JaxprTracer' at 0x7ffb400e9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75ef9df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021799995256258278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147530>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f445ff10; to 'JaxprTracer' at 0x7ff9f445d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48510170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023743654226641358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b10f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0674950; to 'JaxprTracer' at 0x7ff7b06754e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa20ec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017063444641358658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01706344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166f50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70371620; to 'JaxprTracer' at 0x7ffb70370e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56377fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019809527073787223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01980953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5df0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf020a020; to 'JaxprTracer' at 0x7ffcf020b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68100cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.0251665198659298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02516652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746920>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135248b0; to 'JaxprTracer' at 0x7ff7135268e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b9afd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023706225543593862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475820>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a7010; to 'JaxprTracer' at 0x7ffb703c70b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x684086f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023574953020276894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02357495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d260>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71264c5e0; to 'JaxprTracer' at 0x7ff71264f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7f1900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023621308405136127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629690>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076bf10; to 'JaxprTracer' at 0x7ffb7076b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f7b57f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02242035561801624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287600>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05ae520; to 'JaxprTracer' at 0x7ff7b05ae110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x629bfbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023436410995753963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02343641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e89b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906483b0; to 'JaxprTracer' at 0x7ffb906484f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x695e8cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002540257355341638
49, epoch_train_loss=0.002540257355341638
Epoch 50
Epoch 50 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021065341867248486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4108b0; to 'JaxprTracer' at 0x7ffa4c413290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fbde3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01906243892727089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01906244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c420>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9020ddf0; to 'JaxprTracer' at 0x7ffb9020cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e03c630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008788237826653148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00878824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac98a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713065da0; to 'JaxprTracer' at 0x7ff713064fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25f50d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012672388216723184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01267239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c790>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100bf560; to 'JaxprTracer' at 0x7ffc100bd990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59f9c650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020068675767389316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c3f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a6020; to 'JaxprTracer' at 0x7ffb482a4bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96433160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023622601977570316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0236226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef9d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407007c0; to 'JaxprTracer' at 0x7ffb40700bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eb9a280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021241913293178556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6430>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05e51c0; to 'JaxprTracer' at 0x7ff7b05e6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51848530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022244572702470496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0361850; to 'JaxprTracer' at 0x7ffbb0362de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95008a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02231488021502602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71374fdd0; to 'JaxprTracer' at 0x7ff71374f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x834ec30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022662906777159843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504993a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06b3880; to 'JaxprTracer' at 0x7ffae06b3e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec38500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01861070862582501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01861071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200f00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f72e0; to 'JaxprTracer' at 0x7ffb707f4b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62905cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02281512452392706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833ee70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b67a60; to 'JaxprTracer' at 0x7ff711b67dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca23ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022320377390514547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287ab0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f43b50; to 'JaxprTracer' at 0x7ff7125b1710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33d2e170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025336898274949143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0253369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e310>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01eb740; to 'JaxprTracer' at 0x7ffcf01eaa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f24f280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023040034797585977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02304003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07471e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45391c0; to 'JaxprTracer' at 0x7ff9d4538590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94080b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02198983282217132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167a50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03fc0e0; to 'JaxprTracer' at 0x7ffaf03ff6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3befddd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02292315884929087, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3070>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07610d0; to 'JaxprTracer' at 0x7ffbb0761490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ca916b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021897303869432984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2860>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0381800; to 'JaxprTracer' at 0x7ffbb0380d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35765a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02402455029876402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523040>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193c9a0; to 'JaxprTracer' at 0x7ff71193c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8e82c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017308444780388527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01730844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f89f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074f060; to 'JaxprTracer' at 0x7ffbd074e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d8024b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019766764839972657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057ea50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0716bb0; to 'JaxprTracer' at 0x7ffbd0715990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x263c4610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025132896085757774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c520>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44529670; to 'JaxprTracer' at 0x7ffa4452b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a377f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024420649495302496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02442065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251020>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b86570; to 'JaxprTracer' at 0x7ff712b84f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572618a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023601774852817507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c13e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903bb060; to 'JaxprTracer' at 0x7ffbd023aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e1a7700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024398294436225636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02439829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074be30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137e8f90; to 'JaxprTracer' at 0x7ff7137e8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b4450b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022963741393668375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049da50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444baed0; to 'JaxprTracer' at 0x7ffa444bad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86724aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024251940626910932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5530>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10534cc0; to 'JaxprTracer' at 0x7ffc10535120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f453680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0025161638484656828
50, epoch_train_loss=0.0025161638484656828
Epoch 51
Epoch 51 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021064254528324836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0e00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05ed8f0; to 'JaxprTracer' at 0x7ff7d05efa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41525aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019009630373572017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01900963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61bd20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41af790; to 'JaxprTracer' at 0x7ff70c1cf600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32882be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008707915240767937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00870792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775070>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4073bb00; to 'JaxprTracer' at 0x7ffb40738040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dfd3f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012782518648323917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01278252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a8a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10597330; to 'JaxprTracer' at 0x7ffc10594ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e81e250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019970440913348673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702536b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c00e0; to 'JaxprTracer' at 0x7ffc102c08b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x230af160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02358885692998091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03346c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b7d30; to 'JaxprTracer' at 0x7ffc902b76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa35cffb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021233132792619482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521fd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0243e70; to 'JaxprTracer' at 0x7ffbb0241670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ce23c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022225638716597364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402af510; to 'JaxprTracer' at 0x7ffb402af1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a39bfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021896745961158363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1ef0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4a9440; to 'JaxprTracer' at 0x7ffa4c4ab8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82a3220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022612713774935556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70615a80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f415ab60; to 'JaxprTracer' at 0x7ff9f4158220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40fb6000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018545221097064093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01854522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2970>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b397b0; to 'JaxprTracer' at 0x7ff712b38860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d5c31b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022718916203403536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618a70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f70860; to 'JaxprTracer' at 0x7ff713f70180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d712c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022251356313073647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07770c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf019fc40; to 'JaxprTracer' at 0x7ffbf019fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40178490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025303942022712793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074ab70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02e9030; to 'JaxprTracer' at 0x7ffab02ea3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1881e230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02295471688588021, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250280>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c113fb0; to 'JaxprTracer' at 0x7ffa3c110f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fd5be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02191076376604863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03355d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f467d6c0; to 'JaxprTracer' at 0x7ff9f467dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84332960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022793631057219224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bda00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa835bec0; to 'JaxprTracer' at 0x7ffc1073a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e434270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021851548077684208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e80c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e7f6f0; to 'JaxprTracer' at 0x7ff711e7c310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa360d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023874572741086498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f44db6a0; to 'JaxprTracer' at 0x7ff9f44d8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5734cb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017113338087765186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01711334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6760>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0065440; to 'JaxprTracer' at 0x7ff7d0066ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f721fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019762573194148106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1a20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a2c00; to 'JaxprTracer' at 0x7ffc304c5e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x945c7130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025099536813192058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02509954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef5b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0097ba0; to 'JaxprTracer' at 0x7ffaf0094cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64f39f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02416674751243954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a6a20; to 'JaxprTracer' at 0x7ffa3c1614e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42692ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023576206700655387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02357621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475d00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b01170b0; to 'JaxprTracer' at 0x7ff9b0117a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x553f0110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02413354699199501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063eec0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0239d00; to 'JaxprTracer' at 0x7ffbd023b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf0673c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02277157374310126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252d60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703c5300; to 'JaxprTracer' at 0x7ffb703c59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa218f0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02396704825170493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285840>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07bf830; to 'JaxprTracer' at 0x7ff9b07bf970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa02bc180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0022628103754080615
51, epoch_train_loss=0.0022628103754080615
Epoch 52
Epoch 52 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021207521849581797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049a1a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f46b8360; to 'JaxprTracer' at 0x7ff713a99bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x332ddae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0188917793445502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01889178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f070>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701b8a90; to 'JaxprTracer' at 0x7ffb701b8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9b2930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008617486909291837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00861749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062a0b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4424d260; to 'JaxprTracer' at 0x7ffa4424eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2517a780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013023006534668135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01302301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d700>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30302d40; to 'JaxprTracer' at 0x7ffc30301490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a094bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019853893166554407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01985389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1d60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1736f0; to 'JaxprTracer' at 0x7ffb506104a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5096c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02372231079454733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e540>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703c6610; to 'JaxprTracer' at 0x7ffa703c58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2c5a930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02136402670755889, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1500>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407a4d60; to 'JaxprTracer' at 0x7ffb407a5850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a4144f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022343023957281286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0193b00; to 'JaxprTracer' at 0x7ffbd0190090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e17f830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021244210217183788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523c10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa440734c0; to 'JaxprTracer' at 0x7ffa440713a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be1bc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022521953967766958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112c70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055f420; to 'JaxprTracer' at 0x7ff712d832e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25ae9b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018581972475659826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01858197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499c60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011a6b0; to 'JaxprTracer' at 0x7ffbf011bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x286486e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02256250118524613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833d530>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02eba60; to 'JaxprTracer' at 0x7ffa7036f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f94bec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022186157336795916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d340>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009f6f0; to 'JaxprTracer' at 0x7ffcf009fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b110880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02543423827268559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442ad940; to 'JaxprTracer' at 0x7ffa442acf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84afc9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022923800692237564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164cb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707bce50; to 'JaxprTracer' at 0x7ffb707bff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e0efad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021797900001851278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021ecb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f9a840; to 'JaxprTracer' at 0x7ff712f991c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76aa1e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022597370730525253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0bf0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707672e0; to 'JaxprTracer' at 0x7ffa3c1603b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6568dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021800170568216964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02180017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521d10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74ff10; to 'JaxprTracer' at 0x7ff713795b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x983c210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023798633905352702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02379863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359dae0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105614e0; to 'JaxprTracer' at 0x7ffc10562cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ce87e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01699707453489002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702501c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ce660; to 'JaxprTracer' at 0x7ff70c1cdb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80e8c9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01993901555054048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01993902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0cd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a3d80; to 'JaxprTracer' at 0x7ffa7065e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20526dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02522816678724005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748f00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab070aa20; to 'JaxprTracer' at 0x7ffab0709260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x357175e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023824566451497865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab1a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4073a7a0; to 'JaxprTracer' at 0x7ffb40738900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38232960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02366713128003634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776d20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100cf3d0; to 'JaxprTracer' at 0x7ffc100cf790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e65b7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023719353755168076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6040>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b5120; to 'JaxprTracer' at 0x7ffc100ce430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c5cf660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022470224197404045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3c00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0777d30; to 'JaxprTracer' at 0x7ffcb07753a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a21090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023554665695011072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e38a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703c7c90; to 'JaxprTracer' at 0x7ffc3030ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e4c0eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002346703650032088
52, epoch_train_loss=0.002346703650032088
Epoch 53
Epoch 53 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02142242633026711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02142243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250990>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70174220; to 'JaxprTracer' at 0x7ffb70174e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc55ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01894547863043829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01894548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea350>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41ac220; to 'JaxprTracer' at 0x7ff9f41aff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674b2f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008635784636073188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00863578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0570>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a65c0; to 'JaxprTracer' at 0x7ffab04a5940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x969e0760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013144234681088274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01314423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5650>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0292160; to 'JaxprTracer' at 0x7ffcb02909f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ecd2b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019913077065495124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01991308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9df0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90473ab0; to 'JaxprTracer' at 0x7ffc904732e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d044060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023935754792376678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3de0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73f420; to 'JaxprTracer' at 0x7ffa4c73c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15bd4aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021528998258464705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336a80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b1f80; to 'JaxprTracer' at 0x7ffbd05b22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x318ed9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022539607955997378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa7d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b06004a0; to 'JaxprTracer' at 0x7ff9b06018a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f6e390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02236183477001153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901472e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705c4f40; to 'JaxprTracer' at 0x7ffa705c4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2918b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02261334542080489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf900>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44071df0; to 'JaxprTracer' at 0x7ffa44072430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6168bd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01869324816345832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01869325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482504a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01589a0; to 'JaxprTracer' at 0x7ffbb015b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x183fa500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02281871282251431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea300>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1236f0; to 'JaxprTracer' at 0x7ffa3c121ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9710e930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02226719325282362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1460>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050d2b0; to 'JaxprTracer' at 0x7ffbf050dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfe3b680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02568474226991129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02568474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775970>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf035b600; to 'JaxprTracer' at 0x7ffbd05e5120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x767bb700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023034775277075446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02303478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749d40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128728e0; to 'JaxprTracer' at 0x7ff712871da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31bd5450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021900208091481303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251da0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90055850; to 'JaxprTracer' at 0x7ffc90054db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x136e1b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022968829903307994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb8c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486ecc70; to 'JaxprTracer' at 0x7ffb486ee2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a01c210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021862994276522742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145510>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d061abb0; to 'JaxprTracer' at 0x7ff712404ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56319920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024284396648057042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0242844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c14d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf062f0b0; to 'JaxprTracer' at 0x7ffaf062f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7df5a940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01745821088125195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01745821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607480>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90744680; to 'JaxprTracer' at 0x7ffc704a5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84f28b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020056423716191246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02005642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d260>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137e8590; to 'JaxprTracer' at 0x7ffb70721d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45bc9b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025446449060083424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02544645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d01da0; to 'JaxprTracer' at 0x7ff713d009f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8194960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024601929862860823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02460193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4a60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90199850; to 'JaxprTracer' at 0x7ffb9019b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2c17a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023876319326671034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407dec0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a3790; to 'JaxprTracer' at 0x7ff70c5a0e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab87060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02448330075089318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0244833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476bc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e59e0; to 'JaxprTracer' at 0x7ff9f415aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab65720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02300732997822287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02300733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f23b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3adb20; to 'JaxprTracer' at 0x7ffa4c4de7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87912840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02439444909335337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02439445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c9f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123b9f80; to 'JaxprTracer' at 0x7ff7123b9df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d538dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.00253648728888885
53, epoch_train_loss=0.00253648728888885
Epoch 54
Epoch 54 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021215128116945068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b37f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db74c0; to 'JaxprTracer' at 0x7ff712db4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33268f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01877607845014702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01877608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504997e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055a980; to 'JaxprTracer' at 0x7ffb40559c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x302cd180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00850246539784191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00850247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3cc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44593ec0; to 'JaxprTracer' at 0x7ffa44590680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3534d280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013043397052214814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0130434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407fce0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30616bb0; to 'JaxprTracer' at 0x7ffc30616610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x701f8ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01976655978995232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10165680>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a5030; to 'JaxprTracer' at 0x7ffc506a55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12f22900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023715683339275744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2bc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04fe570; to 'JaxprTracer' at 0x7ffcd04fc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa17cd590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021275629192430066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7960>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0379b70; to 'JaxprTracer' at 0x7ffcb04a49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ab634d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022353931361945346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4740>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90664720; to 'JaxprTracer' at 0x7ffc90664810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc91300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021381997767973226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb4d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705b1850; to 'JaxprTracer' at 0x7ffb705b2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8099fc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022466118394818203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0b70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ec180; to 'JaxprTracer' at 0x7ffc70063bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6320b400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01855708666323892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01855709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2650>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706fc270; to 'JaxprTracer' at 0x7ffc10504220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66caa040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022509119254219685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049bc40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90229530; to 'JaxprTracer' at 0x7ff9b0602840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65196cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02209736483920139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0830>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b5800; to 'JaxprTracer' at 0x7ffc902b6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ca22d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02542102332945576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e260>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7070b150; to 'JaxprTracer' at 0x7ffb905b7330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa97c6a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022862573542570177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166720>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90754e50; to 'JaxprTracer' at 0x7ffb7070ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d859900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021758096713819272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606a90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf029bd80; to 'JaxprTracer' at 0x7ffcf029aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa04bd530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022556299572436673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901475e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae068a570; to 'JaxprTracer' at 0x7ffae0688cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f81a0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021706202488777013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9240>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87956c0; to 'JaxprTracer' at 0x7ffaa87944f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10651700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02383291020104964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02383291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359f700>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04572e0; to 'JaxprTracer' at 0x7ffcd0455a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9092b720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016993089103463217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702516f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf020a700; to 'JaxprTracer' at 0x7ffcf020b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39ae15b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019825414071670423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01982541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749b30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ede250; to 'JaxprTracer' at 0x7ff713edefc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f7c8d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025194821330570508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902115a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068ccc0; to 'JaxprTracer' at 0x7ffc3068c090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x973a0c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023926625135191615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775940>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70175120; to 'JaxprTracer' at 0x7ffc902dd440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d419400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023673429594482966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e1b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9078cb80; to 'JaxprTracer' at 0x7ff713d03b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6c7ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02377317987070685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618b30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e38bd0; to 'JaxprTracer' at 0x7ff711e387c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f11550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022468261845100385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e26c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c100220; to 'JaxprTracer' at 0x7ff7125aa610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e925e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02365915066388499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acb980>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0407150; to 'JaxprTracer' at 0x7ffbd0407290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465c4eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0022581239044327877
54, epoch_train_loss=0.0022581239044327877
Epoch 55
Epoch 55 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02115326025081054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2f50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f9fd0; to 'JaxprTracer' at 0x7ffcb01fa160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3522d2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01873190038073485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0187319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253a10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076abb0; to 'JaxprTracer' at 0x7ffb707689a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566c23c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008485857561633748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00848586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9280>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41cc770; to 'JaxprTracer' at 0x7ff9f41cf100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b01260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012958928090345784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01295893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61abf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70767e70; to 'JaxprTracer' at 0x7ffb707670b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf85bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019743691891334455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01974369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab6d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50435a80; to 'JaxprTracer' at 0x7ffb50435cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89af45c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023667631254448377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2930>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f4e50; to 'JaxprTracer' at 0x7ffb707f4360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25a75aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02116408723694576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02116409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335690>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70152480; to 'JaxprTracer' at 0x7ff9b0117420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6850bf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022318867280351037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336710>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125b23e0; to 'JaxprTracer' at 0x7ff7125b16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f5ce1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02185417557760449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc5e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904a6750; to 'JaxprTracer' at 0x7ffc904a4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94b62350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0224599185249276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70617c00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713559670; to 'JaxprTracer' at 0x7ff71355bb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dea9500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01853822513415266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01853823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2bb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709203ec0; to 'JaxprTracer' at 0x7ffc704d3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f67690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022577700733857183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482515d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ecea0; to 'JaxprTracer' at 0x7ffbb02ed990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e67530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02208283798004051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb430>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050d350; to 'JaxprTracer' at 0x7ffbf050c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c3e19d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025366534330748258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02536653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7890>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e7d30; to 'JaxprTracer' at 0x7ffc300e65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ed885e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022852177754250223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab760>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444b9620; to 'JaxprTracer' at 0x7ffa444b9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c5db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021777103601854864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253aa0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01844a0; to 'JaxprTracer' at 0x7ff7b0185d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x683db940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022677443813722387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa880>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50633880; to 'JaxprTracer' at 0x7ffb506320c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54090170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021690183561170095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf420>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44592340; to 'JaxprTracer' at 0x7ffa44590ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x905a1580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02391355445599896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5250>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c64ab60; to 'JaxprTracer' at 0x7ff70c6496c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e70300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017081866216719758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01708187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607450>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193d580; to 'JaxprTracer' at 0x7ff71193c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x204e4630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019685091594939825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01968509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0130>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48275940; to 'JaxprTracer' at 0x7ffb48274ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e605400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02512833091606644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02512833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166850>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b5f2e0; to 'JaxprTracer' at 0x7ffcf017b240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f0194e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02420516272826624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07444c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0209120; to 'JaxprTracer' at 0x7ffaa811df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49615d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023647296713855678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0236473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c260>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e7650; to 'JaxprTracer' at 0x7ff7141e6070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c24440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024067574370995406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475d10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0382430; to 'JaxprTracer' at 0x7ff7137c0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4450470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022664526870736685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266453, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f0460>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062d8a0; to 'JaxprTracer' at 0x7ffc3068dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b960240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023974409533525514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4ea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab06cd440; to 'JaxprTracer' at 0x7ffab06cd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95a5dc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0021565889011640046
55, epoch_train_loss=0.0021565889011640046
Epoch 56
Epoch 56 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021232344240428268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01bb3d0; to 'JaxprTracer' at 0x7ff7b01bbe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x422b9970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01883102384078875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01883102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01edf20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f46ba610; to 'JaxprTracer' at 0x7ff9f46b8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x361fb0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008484344248817402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00848434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33710>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90797920; to 'JaxprTracer' at 0x7ffc907962a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f02de90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012996291757587259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01299629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c2d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0339800; to 'JaxprTracer' at 0x7ffbf0339b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c89c0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01981088003843122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01981088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164670>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01ac860; to 'JaxprTracer' at 0x7ffbb01ad9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c76d020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023764645985668062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606080>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb484417b0; to 'JaxprTracer' at 0x7ffb48443240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4082a440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021251159864020784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bffc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0359210; to 'JaxprTracer' at 0x7ffaf035b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75231470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022408842371374315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bd840>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c706ac0; to 'JaxprTracer' at 0x7ffa4c707970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7521ea50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022189803599409596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b35e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a6700; to 'JaxprTracer' at 0x7ffc702a76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8445f570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022624090226861557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6ea0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035c950; to 'JaxprTracer' at 0x7ffbd035d850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68082360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018617914906365718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01861791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142025f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39fdd0; to 'JaxprTracer' at 0x7ffa3c39d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90595c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022747399491602666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec8d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713525260; to 'JaxprTracer' at 0x7ff7135260c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e189f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022198986367542486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063dad0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44131e40; to 'JaxprTracer' at 0x7ffa44133e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8649cb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02548663586037924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02548664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745560>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0103560; to 'JaxprTracer' at 0x7ffbf0103920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa43f15a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02297325285632171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3760>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102f5080; to 'JaxprTracer' at 0x7ffc102f7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e5b630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021892628493298233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706040d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105950d0; to 'JaxprTracer' at 0x7ffc10594180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15a3e700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022851963118328364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be930>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0688b30; to 'JaxprTracer' at 0x7ffae0688f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4041010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02179633646681101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3820>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c225760; to 'JaxprTracer' at 0x7ffc502ab510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa759f620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024083437567900705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d200>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0793e70; to 'JaxprTracer' at 0x7ffab0790590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a8e8cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017206994654794677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01720699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3870>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c27ef20; to 'JaxprTracer' at 0x7ff713cb0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76697a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019782195299683194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0197822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213c40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9060ee30; to 'JaxprTracer' at 0x7ffc5023b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56685740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025247447345554466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02524745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775d70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44322ca0; to 'JaxprTracer' at 0x7ffa44320270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f4aced0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02445793915024237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f420>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455df80; to 'JaxprTracer' at 0x7ffa4455cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1311e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023736269268837148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a6f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01d9120; to 'JaxprTracer' at 0x7ffbf01d8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83351a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024336344289565985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02433634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0ba0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e40e0; to 'JaxprTracer' at 0x7ff7141e7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42db37f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022869991015334948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253400>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060a110; to 'JaxprTracer' at 0x7ffcb06085e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f010d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0242353382891672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f3b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137d22f0; to 'JaxprTracer' at 0x7ffbb0382430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a4374f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002209196296555188
56, epoch_train_loss=0.002209196296555188
Epoch 57
Epoch 57 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02119255511855461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9ca0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf029b510; to 'JaxprTracer' at 0x7ffcf029bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x995ae3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018959783750449658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01895978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2180>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100cf150; to 'JaxprTracer' at 0x7ffc100cff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x610f71c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00838187741283509, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00838188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628780>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10127fb0; to 'JaxprTracer' at 0x7ffc101244f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa23c7030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012942473859810856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01294247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1170>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907550d0; to 'JaxprTracer' at 0x7ffb907543b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62d95f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019816408538151625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01981641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f0c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50375120; to 'JaxprTracer' at 0x7ffb50375c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x669ff270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02370281825653117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0920>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3052fd80; to 'JaxprTracer' at 0x7ff9b07483b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52efc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02130322677682811, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02130323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c490>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705c4cc0; to 'JaxprTracer' at 0x7ffbb073dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f812a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022358719619174395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336fa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d80040; to 'JaxprTracer' at 0x7ff712d807c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73f50a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021086491833482244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fbe60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ee930; to 'JaxprTracer' at 0x7ff9d42edf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b6e3700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02281641516756508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6ccb30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a6ca0; to 'JaxprTracer' at 0x7ffc702a4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e148260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01859912666690517, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01859913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbe90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa80dc450; to 'JaxprTracer' at 0x7ffaa80ddf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41abc8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022649656479815927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3f20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407a78d0; to 'JaxprTracer' at 0x7ffb407a52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680ee080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022246641267562137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629040>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b00b7290; to 'JaxprTracer' at 0x7ff9b00b7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85b17ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02542267126301775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0420>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0706070; to 'JaxprTracer' at 0x7ffcd0707600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a023740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023012769391744115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049dc30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128732e0; to 'JaxprTracer' at 0x7ffa444bbe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41fc5b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02192021725367502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02192022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0820>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30615c60; to 'JaxprTracer' at 0x7ffc30616570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c9f3d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022559912137950094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334910>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50630040; to 'JaxprTracer' at 0x7ffb50631120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44aef370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021845460856549676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749b70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119b5a80; to 'JaxprTracer' at 0x7ff7119b4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4303c3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02373622103877642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdda0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442ae890; to 'JaxprTracer' at 0x7ffc702e08b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x804314c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016779370170227036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01677937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520500>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c1440; to 'JaxprTracer' at 0x7ff7137c36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e8d3930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019900164900512336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01990016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606da0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44529120; to 'JaxprTracer' at 0x7ffa4452b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d3b4310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02523364283615096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02523364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2050>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10139760; to 'JaxprTracer' at 0x7ffc1013b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf873850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023781234994128153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746860>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402af560; to 'JaxprTracer' at 0x7ffb402ad170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2eff00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023674287407038398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6010>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7130033d0; to 'JaxprTracer' at 0x7ff713003a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e08ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023652220166457683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10562de0; to 'JaxprTracer' at 0x7ffc10561940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49aa88f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022394136431456456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e190>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e6e80; to 'JaxprTracer' at 0x7ff712153ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c1fadc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023467364893524786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02346736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32270>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c6b7920; to 'JaxprTracer' at 0x7ffa3c6b7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e9d68e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0023436011433140853
57, epoch_train_loss=0.0023436011433140853
Epoch 58
Epoch 58 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0212722228436327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013c0e0; to 'JaxprTracer' at 0x7ffbf013e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5910b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01908842620651289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01908843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b2d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8797ab0; to 'JaxprTracer' at 0x7ffaa8794900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53b99250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008422463807545048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00842246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407fc20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9020cef0; to 'JaxprTracer' at 0x7ffb9020cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1584ba30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012932727200741255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01293273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101674e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486edad0; to 'JaxprTracer' at 0x7ffb486eec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3411d330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0199324299956122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01993243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523060>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a5a80; to 'JaxprTracer' at 0x7ffc506a58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e0d70e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023773325806922874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d3d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb069b6a0; to 'JaxprTracer' at 0x7ffcb069b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa467fbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02137323457838609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02137323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02878e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa80dc720; to 'JaxprTracer' at 0x7ffaa80decf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e453b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022442539476063034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02856c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d2430; to 'JaxprTracer' at 0x7ffc704d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x646896f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022171018232459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252870>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3039a5c0; to 'JaxprTracer' at 0x7ffc30398720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5862dac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02296408236391325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2860>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00c36a0; to 'JaxprTracer' at 0x7ffaf00c3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x353d6df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01863771263163744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01863771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2120>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705b1940; to 'JaxprTracer' at 0x7ffb705b2e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a7eef00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022925696196417197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b410>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9022bc40; to 'JaxprTracer' at 0x7ffc9022bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x489d8dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022356812296158227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4490>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa82f13a0; to 'JaxprTracer' at 0x7ffaa82f2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b2bfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025509691524344413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0320>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70682980; to 'JaxprTracer' at 0x7ffc70680bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ac38d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023113264630784225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02311326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6e00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505eaf20; to 'JaxprTracer' at 0x7ffc505eb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x646a0cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02208560089865332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e920>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae068b100; to 'JaxprTracer' at 0x7ffbf07af0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445a4a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02292357525131236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286d90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3bf6f0; to 'JaxprTracer' at 0x7ffa3c3bf240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c3ec360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02193984560054713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253670>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c1300; to 'JaxprTracer' at 0x7ffa442c31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f828030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024082391031071397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07746b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704521b0; to 'JaxprTracer' at 0x7ffb70453ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f223a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017111701762020495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0171117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ea90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44590040; to 'JaxprTracer' at 0x7ffa44591ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7624a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019903512884639665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01990351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6183b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0190d60; to 'JaxprTracer' at 0x7ffbd01920c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x103f2370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025308528790874887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e35c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c195bc0; to 'JaxprTracer' at 0x7ff711bcc9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f38a9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02449392678706294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482503c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c311850; to 'JaxprTracer' at 0x7ffa3c313920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a49f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02378378601487112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062baf0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a8d10; to 'JaxprTracer' at 0x7ff7125ab970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6156e9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024387640769856354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833df40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45712b0; to 'JaxprTracer' at 0x7ffb40703510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99c05e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02291819182114272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ebc80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0600f40; to 'JaxprTracer' at 0x7ff9b07ea1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5745d0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024257806875355444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e95c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106e49f0; to 'JaxprTracer' at 0x7ffc106e4f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x778f3690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0022314721526813476
58, epoch_train_loss=0.0022314721526813476
Epoch 59
Epoch 59 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021086259336075292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c6f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90075b70; to 'JaxprTracer' at 0x7ffc90076c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x735d210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018816472117802626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01881647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a86a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3068cc70; to 'JaxprTracer' at 0x7ffc3068d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743e54a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008318633011725987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00831863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8250>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713edf920; to 'JaxprTracer' at 0x7ff71264fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57406ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012790541233772572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01279054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628ab0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d50d0; to 'JaxprTracer' at 0x7ff7128d4900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25a12190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019710026696567812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2af0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442efe70; to 'JaxprTracer' at 0x7ffa442ecfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x762a0ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023557223575230345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7120>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3055eac0; to 'JaxprTracer' at 0x7ffc3055cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x579a8bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02107178642512261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213fe0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303605e0; to 'JaxprTracer' at 0x7ffc30361f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dce4650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02226129953027817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3e80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0747c90; to 'JaxprTracer' at 0x7ffcb0745990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e0d52a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021759436282652592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d2e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf037b2e0; to 'JaxprTracer' at 0x7ffbf0378ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62b9c830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02266687770221886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614c50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d3470; to 'JaxprTracer' at 0x7ff9b05d3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16f81000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018459126340520236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01845913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063dd40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a7f10; to 'JaxprTracer' at 0x7ffc101a4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31bef60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022662877520136095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab0c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e3b240; to 'JaxprTracer' at 0x7ff711e391c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4547b7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022133078044798145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8610>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48442200; to 'JaxprTracer' at 0x7ffb48441990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa56b7a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0252399032812005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0252399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628ca0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07069d0; to 'JaxprTracer' at 0x7ffcd0704c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7c96b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022908036902365838, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0eb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf04132e0; to 'JaxprTracer' at 0x7ffcf0413f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ca17660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02188052346716089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02188052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049dfc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb034cdb0; to 'JaxprTracer' at 0x7ffbb034c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x413d6660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02268179270929422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c15e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d38d0; to 'JaxprTracer' at 0x7ffb50561c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83011dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021742899020130504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5660>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0184ea0; to 'JaxprTracer' at 0x7ff7b0185da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b24d770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02378300046287483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.023783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287740>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05284a0; to 'JaxprTracer' at 0x7ffbf052a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e3018c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01683856057398422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01683856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145960>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b5d530; to 'JaxprTracer' at 0x7ffb70721440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x286827e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
eC.__call__, rho shape: (11536, 16)/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019620724471073516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01962072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e9c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033a6b0; to 'JaxprTracer' at 0x7ffc30338cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5afb0d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025035688808661454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02503569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5ee0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3bf7e0; to 'JaxprTracer' at 0x7ffa3c3bec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0d6fb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024172656953369287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522790>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42b05e0; to 'JaxprTracer' at 0x7ffa440b18f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a05a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023607812451009354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604b50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a6840; to 'JaxprTracer' at 0x7ffc702a5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61f25490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02404760467974027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747f90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d43276a0; to 'JaxprTracer' at 0x7ff9d43253a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96635830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022637498687905825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5690>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c0f6840; to 'JaxprTracer' at 0x7ffa3c0f5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x435d780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023925038084607844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e790>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3fe020; to 'JaxprTracer' at 0x7ffa3c3fde90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c626bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002067785571768265
59, epoch_train_loss=0.002067785571768265
Epoch 60
Epoch 60 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021203394939829825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201bd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd022ade0; to 'JaxprTracer' at 0x7ffbd022b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c9ad70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018824883986455498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01882488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec650>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd038a890; to 'JaxprTracer' at 0x7ffbd038a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6815130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008283596011647729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0082836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747900>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0728860; to 'JaxprTracer' at 0x7ff7d0729a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6fee280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012902708444224144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01290271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607200>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a58f0; to 'JaxprTracer' at 0x7ff9d45a4bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfd45e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01968843398320018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01968843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4190>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900cad40; to 'JaxprTracer' at 0x7ffbb01ae390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x120e76f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02365375717600475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f91e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48442ac0; to 'JaxprTracer' at 0x7ffb484421b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x854b5ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021195694777826308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359f710>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70177f10; to 'JaxprTracer' at 0x7ffb701753a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x357bcdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022359329522844272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fef0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360040; to 'JaxprTracer' at 0x7ffbb0362cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51a4c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02161581497027881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e380>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7045b0b0; to 'JaxprTracer' at 0x7ffb70459260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d15f2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022682228723065623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253820>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07d76f0; to 'JaxprTracer' at 0x7ff9b07d6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b0041f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018464106743894093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01846411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142016d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b6c50; to 'JaxprTracer' at 0x7ff7d07679c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x849b1950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022646200902069286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ecf20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705da660; to 'JaxprTracer' at 0x7ffb705d8130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7901ef50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022127357896450955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747c70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f44f0; to 'JaxprTracer' at 0x7ffb707f55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35246b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025342283961651214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02534228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522ce0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026b600; to 'JaxprTracer' at 0x7ffb70269080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7dad90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022922427553005022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021cb00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50454c20; to 'JaxprTracer' at 0x7ffc50456a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49b6cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021871087060234457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9e60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0710950; to 'JaxprTracer' at 0x7ffcb0710b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x554cdeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02264555178915971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264555, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0335ce0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0676980; to 'JaxprTracer' at 0x7ff7b0674860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ff014c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021738859925916277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f5b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701baac0; to 'JaxprTracer' at 0x7ffb701b8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1956c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023821427183648266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776d70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c64ad40; to 'JaxprTracer' at 0x7ff70c649d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5384fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01681881152065756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01681881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6070>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa854cc70; to 'JaxprTracer' at 0x7ff71289a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc2db80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01970340685177929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01970341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b18c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a6a20; to 'JaxprTracer' at 0x7ffc704a61b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x958b30c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02514582491483606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252c90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70710ef0; to 'JaxprTracer' at 0x7ffb70712890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x491c2840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024140527536007584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f4a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf052bd80; to 'JaxprTracer' at 0x7ffbf0528d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10a16be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023706889590202607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3f30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7070a160; to 'JaxprTracer' at 0x7ffb7070a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c975bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023969495464996167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0239695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ebdf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907b1da0; to 'JaxprTracer' at 0x7ffc907b0720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c35e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022575453323964993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab860>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7030df30; to 'JaxprTracer' at 0x7ffc7030f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f4e86f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0238727595569976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b21d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10344360; to 'JaxprTracer' at 0x7ffc103442c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bd8f220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0019849851293990274
60, epoch_train_loss=0.0019849851293990274
Epoch 61
Epoch 61 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021488407104264973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02148841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eb800>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f8fe0; to 'JaxprTracer' at 0x7ffb70769da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31103710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019009908990090946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01900991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618360>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90389440; to 'JaxprTracer' at 0x7ffb9038be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6978ed50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008333918067214043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00833392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9d50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f2480; to 'JaxprTracer' at 0x7ffcf01eb5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aa6bd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013065850973758673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e76b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d59e0; to 'JaxprTracer' at 0x7ff7128d7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6de2ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019784835407067207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01978484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e540>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0100860; to 'JaxprTracer' at 0x7ffbf01023e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc4160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02393296861775748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2c60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d011e570; to 'JaxprTracer' at 0x7ff7d011db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51a350f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021545770537213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02154577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774950>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd026b880; to 'JaxprTracer' at 0x7ffcd026a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f25d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02261994716559028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0777a70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90473ab0; to 'JaxprTracer' at 0x7ffc90473f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566ed740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0220782885664219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c14f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7021d760; to 'JaxprTracer' at 0x7ffb7021c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x953162e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022887226081895282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cd300>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d2200; to 'JaxprTracer' at 0x7ff9b07d4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34fdca20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018564024389386303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01856402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8680>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c706070; to 'JaxprTracer' at 0x7ffa4c705d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28b79250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02287148911830267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619630>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b00b5850; to 'JaxprTracer' at 0x7ff9b00b6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63f2b300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02225944230011951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f96a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a6d40; to 'JaxprTracer' at 0x7ff713a20ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8f00540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025659542501931365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e87e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7063a160; to 'JaxprTracer' at 0x7ffb7063b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e57cc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023064396009691016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629680>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045a070; to 'JaxprTracer' at 0x7ffc7045b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e93b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021984741823688366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2180>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907df1f0; to 'JaxprTracer' at 0x7ffab0304720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80f184f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022886567132411488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0777040>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bf98f0; to 'JaxprTracer' at 0x7ffc30301940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x686e54e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021867425678261127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2d10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40519440; to 'JaxprTracer' at 0x7ffb40519120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5573eb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024175441162515507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748970>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab057c4a0; to 'JaxprTracer' at 0x7ffab057f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74ffd910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017084381367176132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01708438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d800>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304c4bd0; to 'JaxprTracer' at 0x7ffc304c4a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c3cde30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01995426650048368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01995427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0a30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057e480; to 'JaxprTracer' at 0x7ffb4057cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f4df9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025472143599180316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02547214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9a00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504cf330; to 'JaxprTracer' at 0x7ffc504ce160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e98ed30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024545758623111827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02454576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146e90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701bbc40; to 'JaxprTracer' at 0x7ffb701b9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39aee4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023973894447717296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520c90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ef6f0; to 'JaxprTracer' at 0x7ffbb02ed580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd0c4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024341190317163777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02434119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604ea0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033a200; to 'JaxprTracer' at 0x7ffaf0394090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa8eb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02285763020957347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101650e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70372ca0; to 'JaxprTracer' at 0x7ffb70373fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77024430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02428880245618057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0242888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744410>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b5c0e0; to 'JaxprTracer' at 0x7ff712383a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c8d690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0021597871275538024
61, epoch_train_loss=0.0021597871275538024
Epoch 62
Epoch 62 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021238090116156357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e13c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0582700; to 'JaxprTracer' at 0x7ff7d0583a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x588861f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01882858295013383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01882858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112550>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70453e70; to 'JaxprTracer' at 0x7ffb70450810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69df8f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008251847875037209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00825185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604bf0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06f28e0; to 'JaxprTracer' at 0x7ffae06f27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b648c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012903691956908922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01290369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901446a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90750180; to 'JaxprTracer' at 0x7ff712873830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1854eb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019632229655028317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01963223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b3bd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907154e0; to 'JaxprTracer' at 0x7ffc90715f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dc24600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02364508051049756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02364508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b950>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a5d00; to 'JaxprTracer' at 0x7ffb482a44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62799a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021225187679294055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02122519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e6d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf074d990; to 'JaxprTracer' at 0x7ffbf074eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x941b2e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022364338809103743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f960>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360ae0; to 'JaxprTracer' at 0x7ffbb0363f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c6aa50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021139277054476435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774600>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0351620; to 'JaxprTracer' at 0x7ffcf03536f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d8862f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022679702700023372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211000>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03ee390; to 'JaxprTracer' at 0x7ffc704fd3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x366027c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018359929540127936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01835993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0d00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904709a0; to 'JaxprTracer' at 0x7ffc90472430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69099790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022563747240101937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01edb40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442349f0; to 'JaxprTracer' at 0x7ffa44236bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56b80a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02209945327815209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc480>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07d9670; to 'JaxprTracer' at 0x7ffbb07d9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aafd5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025324883080712644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e670>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b5080; to 'JaxprTracer' at 0x7ffb905b4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x402913e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022900342538824572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286680>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01009f0; to 'JaxprTracer' at 0x7ffbf01015d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5819ec90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021826727662346567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0930>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503cca40; to 'JaxprTracer' at 0x7ffb503cc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e006b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02251192940669436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f150>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa80a4090; to 'JaxprTracer' at 0x7ffaa80a5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a2455c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02171701375668177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3750>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf062eca0; to 'JaxprTracer' at 0x7ffaf062ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa68440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023697405972173537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0710>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4866a660; to 'JaxprTracer' at 0x7ffb4866b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10c9c180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01661786296067605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01661786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062bdd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7042f2e0; to 'JaxprTracer' at 0x7ffa7042f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b90b330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019715156303659054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c370>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01f7150; to 'JaxprTracer' at 0x7ffae01f6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a435df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02515585287832443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02515585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2f20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7021dcb0; to 'JaxprTracer' at 0x7ffb7021c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987e8550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02388306983461324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e56c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073ce00; to 'JaxprTracer' at 0x7ffa44322ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84319210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02377280338498025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9710>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711909df0; to 'JaxprTracer' at 0x7ffbd038b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2879a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02366344031907155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c320d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0632250; to 'JaxprTracer' at 0x7ffb701b89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x253b13b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02234859263037209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a050>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c2a20; to 'JaxprTracer' at 0x7ffc10373b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84d45500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02358862447370856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1620>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503bae30; to 'JaxprTracer' at 0x7ffb503bad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57b996b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0021628659464749856
62, epoch_train_loss=0.0021628659464749856
Epoch 63
Epoch 63 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02130768651564022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02130769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0d40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906ce390; to 'JaxprTracer' at 0x7ffc906cc5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41e67710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018889300663422228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0188893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac8310>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44717e20; to 'JaxprTracer' at 0x7ffa44717970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f0c5130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008367837439454892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00836784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a6810>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15f7e0; to 'JaxprTracer' at 0x7ffa3c15f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x373a3b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01285939138151422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01285939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30d10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d473a840; to 'JaxprTracer' at 0x7ff9d473a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d182450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019713326823880592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4300>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074a340; to 'JaxprTracer' at 0x7ffbd0748a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1f57100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023669913102982876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c380>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42ecb80; to 'JaxprTracer' at 0x7ff9d42ed260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf89bc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02118605898524695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1da0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0159080; to 'JaxprTracer' at 0x7ffc900e0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8533c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022409230929551896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2450>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30362070; to 'JaxprTracer' at 0x7ffc30362de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x850b4d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022325892289301052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e61f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407d06d0; to 'JaxprTracer' at 0x7ffb407d3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7f9ab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022708605598012424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706175b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05958f0; to 'JaxprTracer' at 0x7ffbb0595210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b301580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01836449730635303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0183645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b09e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa440b1580; to 'JaxprTracer' at 0x7ffa440b1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3058b420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02280855461133801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acab90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074cd60; to 'JaxprTracer' at 0x7ff712125ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc3b9700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022170032281031572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4920>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0104220; to 'JaxprTracer' at 0x7ffaf01053a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x430e8d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025344481863819723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02534448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c1c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907dcdb0; to 'JaxprTracer' at 0x7ffc907dd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60032480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02295973578600825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e99a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0293150; to 'JaxprTracer' at 0x7ff9b0734ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x513cfe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021933667884298846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251710>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014e110; to 'JaxprTracer' at 0x7ffcf014f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c3a9d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022899780356172173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02289978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2fc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013e0c0; to 'JaxprTracer' at 0x7ffbf013d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x652e4da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021783001790704793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5250>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00a4900; to 'JaxprTracer' at 0x7ffcf00a74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64303f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024028428261755382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4a70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0744810; to 'JaxprTracer' at 0x7ffbf0747920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b920c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016994175333409436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d6b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c64a520; to 'JaxprTracer' at 0x7ff70c648cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4b0dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019637811257934772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01963781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0680>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d008f240; to 'JaxprTracer' at 0x7ff7d008cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d8effe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025145024147893054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b970>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503cc7c0; to 'JaxprTracer' at 0x7ffb50434540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46225980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02462483154685766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c200>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70922b470; to 'JaxprTracer' at 0x7ff70922a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8219f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023876432829921652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b07b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101a75b0; to 'JaxprTracer' at 0x7ffc101a7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626a5860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02443205745001966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147d20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e39080; to 'JaxprTracer' at 0x7ff711e3bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28b7c460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0229010902497618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf560>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907b3fb0; to 'JaxprTracer' at 0x7ffc907b1800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884a9e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02443393144171792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305215e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701ac900; to 'JaxprTracer' at 0x7ffa701ace00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x872ee740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0020785622734106734
63, epoch_train_loss=0.0020785622734106734
Epoch 64
Epoch 64 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02131488436487357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1db0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7021fc90; to 'JaxprTracer' at 0x7ffb7021f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265f3240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01897353167135785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec3d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713503bf0; to 'JaxprTracer' at 0x7ff713503240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d072c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008360471147966637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00836047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d3b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900383b0; to 'JaxprTracer' at 0x7ffc90038540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44cd0c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01279625882369967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01279626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074b4d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442d81d0; to 'JaxprTracer' at 0x7ffa442d8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f04c230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019838230788300104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01983823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ed50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486edc10; to 'JaxprTracer' at 0x7ffb486ed990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89e7d930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02362856494140105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e76c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30303dd0; to 'JaxprTracer' at 0x7ffc303034c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd3aa4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021236477321191865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07749c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a21df0; to 'JaxprTracer' at 0x7ff713a20540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x410654b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022368327734212247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0b40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0050d60; to 'JaxprTracer' at 0x7ffcf00508b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x742c2cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021613295401056016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629eb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3016a890; to 'JaxprTracer' at 0x7ffc3016b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c5c5e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022800988276990255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3960>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506459e0; to 'JaxprTracer' at 0x7ffc904a49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539b8cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018369417996102335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01836942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0570>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05ed0d0; to 'JaxprTracer' at 0x7ff7d05ee390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ecf42b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022704484782497043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049a3d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036cd60; to 'JaxprTracer' at 0x7ffa4c74f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x174c6170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022246616892224614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b24b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02ead90; to 'JaxprTracer' at 0x7ffcf02e9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3665f240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02532281458511249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749c70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c1710; to 'JaxprTracer' at 0x7ffaa85c22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5eb780b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023080065888284654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049cb00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70458db0; to 'JaxprTracer' at 0x7ffa7045a2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6ceba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02205211990409238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e70e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0381da0; to 'JaxprTracer' at 0x7ff7119d0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e64b930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02266489045467538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3580>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706fe480; to 'JaxprTracer' at 0x7ffc706fd530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x727f4bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02182244955716466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2690>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c1940; to 'JaxprTracer' at 0x7ffaa8767510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x760ceb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023815794210861108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6e50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486e1940; to 'JaxprTracer' at 0x7ffc900747c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x804c94d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016709956758625497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01670996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ff70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906cc400; to 'JaxprTracer' at 0x7ffc906cd670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a6e2750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01975349971760459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0197535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31bb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01c2de0; to 'JaxprTracer' at 0x7ffcf01c20c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a635040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025147665062303145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619d30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b6cf0; to 'JaxprTracer' at 0x7ffb905b76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cdf1340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024200757489670693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f4a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701755d0; to 'JaxprTracer' at 0x7ffb70177b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6a90a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023888453461819167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acbc50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907879c0; to 'JaxprTracer' at 0x7ffb90786cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da2d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02396708051408294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250ac0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70668fe0; to 'JaxprTracer' at 0x7ffc7066a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be7cde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02255588437129876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02255588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2260>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c489710; to 'JaxprTracer' at 0x7ffa4c488bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a8a3950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023974163954690677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744830>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707461b0; to 'JaxprTracer' at 0x7ffb70746020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2cbc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018835353631223818
64, epoch_train_loss=0.0018835353631223818
Epoch 65
Epoch 65 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021446483852055186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02144648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf5f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0361490; to 'JaxprTracer' at 0x7ffbb0361580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20da7500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018804183714355823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01880418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336690>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0583ab0; to 'JaxprTracer' at 0x7ffc505bb7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa08bed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00840099627372666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.008401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3540>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7042fdd0; to 'JaxprTracer' at 0x7ffb7042fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85dfa070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013035962523254258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01303596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167c40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128cd3a0; to 'JaxprTracer' at 0x7ff7128cfc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a39cc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019610121441131032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01961012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9790>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442eeac0; to 'JaxprTracer' at 0x7ffa442ed760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec7f5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02377726205705405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab420>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42eede0; to 'JaxprTracer' at 0x7ff9d42ef2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13651c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021320957254400974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02132096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506293e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123d18f0; to 'JaxprTracer' at 0x7ff7123d35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a1e910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022491601635631464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062ba80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e7e110; to 'JaxprTracer' at 0x7ff711e7d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b395110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021461138053092972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1360>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44072b10; to 'JaxprTracer' at 0x7ffa44072d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x156c12e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022642039165816093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cc900>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0792480; to 'JaxprTracer' at 0x7ffc303cdc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d5b8810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018367323798910037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01836732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc740>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4073a750; to 'JaxprTracer' at 0x7ffb4073b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f7cba90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02262611346125481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334900>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ac4c20; to 'JaxprTracer' at 0x7ff713ac72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d2ff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022114452919988602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b39d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85934c0; to 'JaxprTracer' at 0x7ffaa8590720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61a9db00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02550275012205782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550275, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9a50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4865fbf0; to 'JaxprTracer' at 0x7ffb4865f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x678f1c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02293905496140018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02293905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619b60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90667bf0; to 'JaxprTracer' at 0x7ffc90664270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x318fdb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02181891497681711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aadf0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442da2f0; to 'JaxprTracer' at 0x7ffa442dba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb475e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02264433390352567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b860>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf065a3e0; to 'JaxprTracer' at 0x7ffaf065a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39feaf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02172358809150767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2180>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a6a70; to 'JaxprTracer' at 0x7ff7121af8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e51ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023902893073477916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5f90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482a6ac0; to 'JaxprTracer' at 0x7ffb482a5440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67e86330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016798372792498885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01679837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e40b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b06185e0; to 'JaxprTracer' at 0x7ff7b061af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c654550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019782033052870438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01978203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474460>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0689940; to 'JaxprTracer' at 0x7ffae068b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86250830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025307649388860553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d6e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ef290; to 'JaxprTracer' at 0x7ff7d07ec680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa64273a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024168225994194582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3ed0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03e4590; to 'JaxprTracer' at 0x7ffbf03e6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4fcc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024000978952675403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286b40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0045ad0; to 'JaxprTracer' at 0x7ffcb060aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4df240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02389424543309872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359f3f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d43b0; to 'JaxprTracer' at 0x7ff7128d5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74605240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022497852732864834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d490>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0450bd0; to 'JaxprTracer' at 0x7ffcf04508b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c828990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023922241549792597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145dd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02ce930; to 'JaxprTracer' at 0x7ffb9042bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e4e4da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018538750127476357
65, epoch_train_loss=0.0018538750127476357
Epoch 66
Epoch 66 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021577130049127306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1040>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5039cae0; to 'JaxprTracer' at 0x7ffb5039f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12f4e140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018786843002938643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01878684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed640>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0151ee0; to 'JaxprTracer' at 0x7ffb7021f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xda82ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008503586574828059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00850359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0a60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713008770; to 'JaxprTracer' at 0x7ff713008a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6c7cff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01317119681759444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0131712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d9d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0709300; to 'JaxprTracer' at 0x7ffab0708040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b8a5fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019618620039082983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01961862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5d00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04789f0; to 'JaxprTracer' at 0x7ffcd0478400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47c9e5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02386016295719821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0104b30; to 'JaxprTracer' at 0x7ffaf0106110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53da57d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021359813601088403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a36c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0630950; to 'JaxprTracer' at 0x7ff9b0633c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce62120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02257464321625758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b5b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0103330; to 'JaxprTracer' at 0x7ffbf01021b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45ae56e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02213641227309547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9f00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0596ac0; to 'JaxprTracer' at 0x7ffbb0594680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b9f85a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022634868981957768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3050>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41d4860; to 'JaxprTracer' at 0x7ff9f41d53a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x842ac0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01841866796115224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01841867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1450>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d008f0b0; to 'JaxprTracer' at 0x7ff711bfdc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60184870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022729650720153014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02272965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049ac80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b6430; to 'JaxprTracer' at 0x7ffc902b7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x729bd2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022121605401663857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284090>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f5490; to 'JaxprTracer' at 0x7ffb707f6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x974c67f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025613057720921116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f760>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137eb650; to 'JaxprTracer' at 0x7ff7137e9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x624eb5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02297786650209058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7ca0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44242d40; to 'JaxprTracer' at 0x7ffa44240e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88abb8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02184361003926195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250710>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42c7060; to 'JaxprTracer' at 0x7ff9d42c7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7459e000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022828980650740235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700a8900; to 'JaxprTracer' at 0x7ffa447154e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82663430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02171542163600939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8060>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c195c60; to 'JaxprTracer' at 0x7ffa3c194c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b273d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02416041922634473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d750>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902df290; to 'JaxprTracer' at 0x7ffbb0169df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x398bfee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01709529646088963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac99a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02eb8d0; to 'JaxprTracer' at 0x7ffbf0583f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ed94720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019791454862561054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c3d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504e5ee0; to 'JaxprTracer' at 0x7ffc504e7510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d95e570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025400750700595418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02540075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166bc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05ed530; to 'JaxprTracer' at 0x7ff7d05eede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfed990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024626969441856043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1e40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121524d0; to 'JaxprTracer' at 0x7ff712150360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d828300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024124111744141537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8380>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd042b880; to 'JaxprTracer' at 0x7ffcd0428c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8631ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02433099223503852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02433099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e400>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442d9df0; to 'JaxprTracer' at 0x7ffa442db420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x805b68e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022785474491435607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4ab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30616ca0; to 'JaxprTracer' at 0x7ffc30617330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49548ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024433166639024617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211fc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd070d120; to 'JaxprTracer' at 0x7ffc10372610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74bdae60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0020198584002480034
66, epoch_train_loss=0.0020198584002480034
Epoch 67
Epoch 67 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021312687852806544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746f30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90455710; to 'JaxprTracer' at 0x7ffc90455b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x797f1730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01861320374235294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0186132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30523f00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505bdfd0; to 'JaxprTracer' at 0x7ffb505bfbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58915010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008434541682395044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00843454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc880>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd038b920; to 'JaxprTracer' at 0x7ffbd0389df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cba6ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013064688105966931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336270>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4473d30; to 'JaxprTracer' at 0x7ff713a5ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de2c7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01949238847245567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01949239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b17e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70765210; to 'JaxprTracer' at 0x7ffb707668e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5395a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023571643504984478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02357164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acad40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0065710; to 'JaxprTracer' at 0x7ffa3c3d41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79835c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021087154035787224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618980>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a7a10; to 'JaxprTracer' at 0x7ffcb04a4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10f2b360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022261808490971584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61b4b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf033a250; to 'JaxprTracer' at 0x7ffbf033bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448a8d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021201521818325825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e04d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a5580; to 'JaxprTracer' at 0x7ffc307a5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d61d000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022481259241186397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614e80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903e03b0; to 'JaxprTracer' at 0x7ffb903e3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b8e38b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018272344962849216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01827234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744540>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9060df80; to 'JaxprTracer' at 0x7ffcf00a7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x433996d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02244078779326096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520280>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05aad40; to 'JaxprTracer' at 0x7ff7b05a8450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c8e1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0219992250295249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be910>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0417f10; to 'JaxprTracer' at 0x7ffcb0416cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5874fa00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025307431293057438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c620>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90752160; to 'JaxprTracer' at 0x7ffb90751fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x224913b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022868900684973225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251ac0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bad210; to 'JaxprTracer' at 0x7ff711baf4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x135e8df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021710975664891503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac8c00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab070a160; to 'JaxprTracer' at 0x7ffab0708360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82817bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022457775016589736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6198b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705b05e0; to 'JaxprTracer' at 0x7ffc900398a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cc89540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021586120660738787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0b50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44234860; to 'JaxprTracer' at 0x7ffa442377e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d5dc4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023701978014313726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3300>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7042ca90; to 'JaxprTracer' at 0x7ffa7042c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22815fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016671912335651483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01667191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714203a30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706fd3a0; to 'JaxprTracer' at 0x7ffc706fcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b28e8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019635148957723798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01963515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250c40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906cd4e0; to 'JaxprTracer' at 0x7ff7119254e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c10ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02513017416512546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776e00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713009620; to 'JaxprTracer' at 0x7ff71300a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f3ba4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02395674443510819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7a20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7030f7e0; to 'JaxprTracer' at 0x7ffbf0101da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aa7b6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023916975554434564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7330>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703c4720; to 'JaxprTracer' at 0x7ffa703c71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3173bef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023678021879468436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049dcf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073d9e0; to 'JaxprTracer' at 0x7ffa44593150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e28ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02228437109375339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074bb20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07dbc90; to 'JaxprTracer' at 0x7ffa4455fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3aa4f3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02373685757221551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286a00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7045dd50; to 'JaxprTracer' at 0x7ffb7045de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa63d7520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.002084428502780629
67, epoch_train_loss=0.002084428502780629
Epoch 68
Epoch 68 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021449272047590277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02144927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1d60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504e5f30; to 'JaxprTracer' at 0x7ffc504e4b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x453eb290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01877765279136318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01877765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec8e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050d670; to 'JaxprTracer' at 0x7ffbf050e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32074520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008578859671317376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00857886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0280>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4424e160; to 'JaxprTracer' at 0x7ffa4424fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62841de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013176938660052224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01317694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7f80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06bb6f0; to 'JaxprTracer' at 0x7ffcb06bb010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fbba850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01960646579303602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482516e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd020a250; to 'JaxprTracer' at 0x7ffae0211f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a630920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023725734466739586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32800>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0290b80; to 'JaxprTracer' at 0x7ffcd02909a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f9d7840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021286456191712128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4f90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903b82c0; to 'JaxprTracer' at 0x7ffb903b85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4726980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022367674125491083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e62e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70251fd0; to 'JaxprTracer' at 0x7ffc70251620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa471b700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02209273284141056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eabc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7069aa70; to 'JaxprTracer' at 0x7ffa7069a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5267bed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02270761758339371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102abd40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121242c0; to 'JaxprTracer' at 0x7ff712126d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x501d7f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01837542946421976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01837543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c13c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41d5c60; to 'JaxprTracer' at 0x7ffc702e22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80d54220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02275133543978929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b1c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e1ad0; to 'JaxprTracer' at 0x7ffc900e3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5957a8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02215482908939334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4be0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73dd50; to 'JaxprTracer' at 0x7ffa4c73d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52045660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025511186133231875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02551119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0777740>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03ba840; to 'JaxprTracer' at 0x7ff7b03b8270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4954fee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02303777234895776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02303777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714203680>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02c72e0; to 'JaxprTracer' at 0x7ff9f41cf970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d0d090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021857078058422394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32060>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be35ad0; to 'JaxprTracer' at 0x7ff70be34680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6602e890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022831212910607218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02283121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e51f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128cfbf0; to 'JaxprTracer' at 0x7ffc3052ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2836860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021728754487567635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8d00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018d490; to 'JaxprTracer' at 0x7ffcf018fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c631510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02408327094312879, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252ba0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb482489a0; to 'JaxprTracer' at 0x7ffa701504a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a6b9670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017045065616499967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01704507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166380>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0746cf0; to 'JaxprTracer' at 0x7ffbf0747470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa821cc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01979726997412626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2270>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90412e30; to 'JaxprTracer' at 0x7ffc904127a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d3ad5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025347584150255398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02534758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e1e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c0270; to 'JaxprTracer' at 0x7ffa442c0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e631320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024574171486840518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02457417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334f40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c25bc90; to 'JaxprTracer' at 0x7ffa4c25b420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cabf040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024113453754303515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606af0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f7d80; to 'JaxprTracer' at 0x7ffb905f6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ef5e900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02433298412208815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02433298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520b00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74cd10; to 'JaxprTracer' at 0x7ffaf0094090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89eefc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022764898254320497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e570>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0240c70; to 'JaxprTracer' at 0x7ffcb0241a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c725da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024417928369433642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747310>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71306b150; to 'JaxprTracer' at 0x7ff71306b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x967647e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018817851666841979
68, epoch_train_loss=0.0018817851666841979
Epoch 69
Epoch 69 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021368972390554544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212c20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b01588b0; to 'JaxprTracer' at 0x7ff9b015b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3029e390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01880180794513234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01880181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c630>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907d3880; to 'JaxprTracer' at 0x7ffb907d1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10594a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008554197119722542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0085542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06beeb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b39120; to 'JaxprTracer' at 0x7ff712b38130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2991b1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013168231863025376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01316823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c3f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128cf100; to 'JaxprTracer' at 0x7ff70c1cc770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc01560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019603231025066514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4a10>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5057f0b0; to 'JaxprTracer' at 0x7ffb5057c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2108c070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023707039998231396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb9b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30361300; to 'JaxprTracer' at 0x7ffc303639c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8428540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02128052579071132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10164160>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00c0900; to 'JaxprTracer' at 0x7ffaf00c3a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa17b3090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022269228356450354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252f40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d2160; to 'JaxprTracer' at 0x7ff9b05d2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44db8de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021489300800128456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e930>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05949a0; to 'JaxprTracer' at 0x7ff713558a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15e051a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022796185630465274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6ce110>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703f7b50; to 'JaxprTracer' at 0x7ffa703f64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dfc1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01834656111730128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01834656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212900>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455ce50; to 'JaxprTracer' at 0x7ffa4455d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb26c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02269256343584428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f970>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a1c10; to 'JaxprTracer' at 0x7ffcf03a31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2280ecb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022181875382783652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144d60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0290c20; to 'JaxprTracer' at 0x7ffcd0291fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29e16350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02550602592381347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021cd80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07207c0; to 'JaxprTracer' at 0x7ff712898450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x255a50b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023073081495419298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5300>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71356c3b0; to 'JaxprTracer' at 0x7ffc100bf1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x491e6b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021858341865877897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f84a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d44e1da0; to 'JaxprTracer' at 0x7ffc706f8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f950f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022679255010916437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702513f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036efc0; to 'JaxprTracer' at 0x7ffa7036fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c14ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02174956271062833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3d10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b03753a0; to 'JaxprTracer' at 0x7ff9b03745e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82625600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02392297015618148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1c80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70669490; to 'JaxprTracer' at 0x7ffc7066a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10788df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016819941214380008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01681994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d6c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486e1530; to 'JaxprTracer' at 0x7ffb486e14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b6f24d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019850250539899708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01985025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e89f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02eb6a0; to 'JaxprTracer' at 0x7ffab02ebf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94266870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02537813186744659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02537813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32e00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03b9b20; to 'JaxprTracer' at 0x7ff7b03bb6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x249a0400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024192281245995068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3390>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0456610; to 'JaxprTracer' at 0x7ffcd0457d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e246c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024091973617326703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482511d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906b2390; to 'JaxprTracer' at 0x7ffc906b2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x432e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023964278048655488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4db0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060bfb0; to 'JaxprTracer' at 0x7ffcb060a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c936b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02249792350314689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474eb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d008e660; to 'JaxprTracer' at 0x7ff7d008ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x136d7150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024003423869107587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7820>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ccc20; to 'JaxprTracer' at 0x7ff7d07cca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x435ea80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0017343380757222544
69, epoch_train_loss=0.0017343380757222544
Epoch 70
Epoch 70 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021215448852687165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cdbba0; to 'JaxprTracer' at 0x7ff713cd9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33b5f910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018746024127290723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01874602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049bcb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025fd30; to 'JaxprTracer' at 0x7ffcb025ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fe04290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008551196415706902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0085512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252cd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900cad90; to 'JaxprTracer' at 0x7ffc900c8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b38bee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0131154064653076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01311541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142022a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c453a60; to 'JaxprTracer' at 0x7ffcf02089a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa20400d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019591081248744854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01959108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7dc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123ac9a0; to 'JaxprTracer' at 0x7ff7123aefc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79fc4b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023650450255520903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619350>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713373c40; to 'JaxprTracer' at 0x7ff7133704a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425e2510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021090894964076037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02109089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1d30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442aef70; to 'JaxprTracer' at 0x7ffa442aee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356575e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022156232143345053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e37c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903bad90; to 'JaxprTracer' at 0x7ffb903ba610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72bc8f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021569924891937414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02156992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0fe0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307ec5e0; to 'JaxprTracer' at 0x7ffc307ec090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38826800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02278504792128903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628750>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c503b0; to 'JaxprTracer' at 0x7ff713c535b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4377d6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01829377608364828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01829378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486faa70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71300a340; to 'JaxprTracer' at 0x7ff7d07ad760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5655e280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022695873829266088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498610>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f70180; to 'JaxprTracer' at 0x7ff713f71e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62754a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022171021729858475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250620>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb067d2b0; to 'JaxprTracer' at 0x7ffcb067efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77ca6c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025447011902554967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02544701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33f90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05d4d10; to 'JaxprTracer' at 0x7ff7b05d4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61648ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02305129070567391, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c8d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70767a60; to 'JaxprTracer' at 0x7ffb707640e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e850eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021865739860804388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c619200>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07d5c10; to 'JaxprTracer' at 0x7ff711bcdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84369130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022705946392138927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e17e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0344720; to 'JaxprTracer' at 0x7ffaf0346340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f8bbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021736241837650553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2b30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b3a700; to 'JaxprTracer' at 0x7ff712b39990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9caa7460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023904678466273598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336170>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01ba2a0; to 'JaxprTracer' at 0x7ff7b01ba7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2f86e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016781418902654194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01678142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5f50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073bc40; to 'JaxprTracer' at 0x7ffc900772e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6d72e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019754878666009116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520e90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c447600; to 'JaxprTracer' at 0x7ffa4c4454e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13ad4330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02530343021402418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c710>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4436b60; to 'JaxprTracer' at 0x7ff9f4436840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d1be3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02420833278046595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901452d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf017acf0; to 'JaxprTracer' at 0x7ffcf0179120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e90a790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024022912400499676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d9d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3013f0b0; to 'JaxprTracer' at 0x7ffa4424ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65f3ead0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024016622323807593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b2960>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c3560; to 'JaxprTracer' at 0x7ffaa85c0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32553cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022527748540236252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a650>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050c630; to 'JaxprTracer' at 0x7ffbf050eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9d46a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02404331834406237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6f80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b239b20; to 'JaxprTracer' at 0x7ff70b239990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b139d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0016984897292912071
70, epoch_train_loss=0.0016984897292912071
Epoch 71
Epoch 71 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021170780833426165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0293740; to 'JaxprTracer' at 0x7ff7d0767970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33b4790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018792219386546388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01879222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be920>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906ce700; to 'JaxprTracer' at 0x7ffc906cfba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd57d370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008583081229167254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00858308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213ab0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0634360; to 'JaxprTracer' at 0x7ff7b06372e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b22c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013115582600085331, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01311558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1cd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70152d90; to 'JaxprTracer' at 0x7ffa70152020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ca5dd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019644838419527053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01964484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901447a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0115a80; to 'JaxprTracer' at 0x7ff9b0117b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b646c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02368715653849906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305232e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90599cb0; to 'JaxprTracer' at 0x7ffb9059a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a1f89b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02105742131756358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c080>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5023a110; to 'JaxprTracer' at 0x7ffc50239c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2224c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022177938892927046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833db90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9019a020; to 'JaxprTracer' at 0x7ffb9019a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e463f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02206142052803845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166000>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c52020; to 'JaxprTracer' at 0x7ff713c52840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe5a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02286962253029121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616760>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f42a20; to 'JaxprTracer' at 0x7ff713f40d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75f47b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018299983616050494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01829998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07446b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8765800; to 'JaxprTracer' at 0x7ffaa87678d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43ac7d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022840570391488554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdf20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90664770; to 'JaxprTracer' at 0x7ffc906655d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e664680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022227871371959123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211990>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713372ed0; to 'JaxprTracer' at 0x7ff9f41590d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3979f2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025495720569468132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02549572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057cc30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40045e90; to 'JaxprTracer' at 0x7ffb901de480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x204efc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023093642093761992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02309364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145320>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073c9f0; to 'JaxprTracer' at 0x7ffbd0741080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47752240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021939990877033716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521cc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713500ef0; to 'JaxprTracer' at 0x7ff713500310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa15286e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022906152555068834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fdb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444b8e00; to 'JaxprTracer' at 0x7ffa444bb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x386e26f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021794685784513435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10167a10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39c900; to 'JaxprTracer' at 0x7ffa3c39d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cb76640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024069407006251976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ffa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf02e9760; to 'JaxprTracer' at 0x7ffcf02e8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x417a7300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016929782796134576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01692978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2b70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f8b30; to 'JaxprTracer' at 0x7ffcb01fb830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x135abb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019754351741912136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac8500>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70187c90; to 'JaxprTracer' at 0x7ffa70185bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31c90bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02533435407056795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02533435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61bc30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0240450; to 'JaxprTracer' at 0x7ffcb0242d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f910190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024529355053951738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02452936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3f70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7130021b0; to 'JaxprTracer' at 0x7ff713003330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a0546d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024063391389745264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5e00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304fcc70; to 'JaxprTracer' at 0x7ffc304fd260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78c7d530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024364065985000658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a05e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07436f0; to 'JaxprTracer' at 0x7ffc7066b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x478fcda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022784834699494636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251ab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf050ee80; to 'JaxprTracer' at 0x7ff71238c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa73a430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024400512605921354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01172e0; to 'JaxprTracer' at 0x7ffaf0117150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x872ecf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018111668400044056
71, epoch_train_loss=0.0018111668400044056
Epoch 72
Epoch 72 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021043823175237886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2c80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ec4a0; to 'JaxprTracer' at 0x7ff7d07ee520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425cc350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018791439054475514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01879144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2c60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10747d80; to 'JaxprTracer' at 0x7ffc10746390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b99fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008488687200408167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00848869, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3f10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a5b20; to 'JaxprTracer' at 0x7ffaa87955d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e3cab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013062222109356685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01306222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0f80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504349a0; to 'JaxprTracer' at 0x7ff713edfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x818807f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019599567852605068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01959957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac8c40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b49a30; to 'JaxprTracer' at 0x7ff711b4a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11b03820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023609960450939042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ea40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04657b0; to 'JaxprTracer' at 0x7ffcb0466cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa68be190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021010356168089283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02101036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8340>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074db20; to 'JaxprTracer' at 0x7ffbd074f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20820ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022113323816495736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02faa20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06f3d80; to 'JaxprTracer' at 0x7ffae06f3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e989d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02112229683783487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0211223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4fa0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4455fb50; to 'JaxprTracer' at 0x7ffa4455f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e598350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022874202622862678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0660>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44071990; to 'JaxprTracer' at 0x7ffaa80de610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968bbd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018217291480406766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01821729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1960>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06dca40; to 'JaxprTracer' at 0x7ffaf06de1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d6d56a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022664379334662175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee640>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b015b4c0; to 'JaxprTracer' at 0x7ff9b0158c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f341d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02218269198502074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142004d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048f420; to 'JaxprTracer' at 0x7ffc30710b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2501d940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025409967640681035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02540997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407ec20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d011cc70; to 'JaxprTracer' at 0x7ff7d011e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf88710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02303039753636776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c350>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4539ad0; to 'JaxprTracer' at 0x7ff9d4538540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43e0c1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02187817212657747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e610>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4324ea0; to 'JaxprTracer' at 0x7ff9d43263e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31301590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022622973857679345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa4f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ecfe0; to 'JaxprTracer' at 0x7ffc100ef3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x864409a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02176517386327504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a56f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4254c70; to 'JaxprTracer' at 0x7ffa3c3bffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6da6c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023765744186750776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021da90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0045ad0; to 'JaxprTracer' at 0x7ff7d0044d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a9c8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016566707229945583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01656671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147890>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303ce610; to 'JaxprTracer' at 0x7ffc303cc770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x590c1a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019763878688491207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f6f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a5350; to 'JaxprTracer' at 0x7ffc303cc450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47afac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025264178029531518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02526418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1bc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8359c10; to 'JaxprTracer' at 0x7ffaa83584f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c565200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02393685499632717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90748410>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5017ddf0; to 'JaxprTracer' at 0x7ffb5017e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x751f0c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023991979126713647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02399198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c07c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307480e0; to 'JaxprTracer' at 0x7ffc30749c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x595bc960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023737098531910566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bd880>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074be70; to 'JaxprTracer' at 0x7ffbd0749120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c9e6390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022339125900046036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02233913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aba10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d01120; to 'JaxprTracer' at 0x7ff713d03100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x522a4610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02373678392898078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d24a90; to 'JaxprTracer' at 0x7ff712d24900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b1d6fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0019156113809765188
72, epoch_train_loss=0.0019156113809765188
Epoch 73
Epoch 73 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021297124853819627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7ab0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07d4590; to 'JaxprTracer' at 0x7ff9b07d54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbdbd690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01899459104967338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01899459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02863c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707232e0; to 'JaxprTracer' at 0x7ffb70721ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa49040a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008566251479101896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00856625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776aa0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a22de0; to 'JaxprTracer' at 0x7ff713a22bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0e5b600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013142426478486787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01314243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475490>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40518540; to 'JaxprTracer' at 0x7ffb40519b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bf45e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019739555628503234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ce00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713721120; to 'JaxprTracer' at 0x7ff713723830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e870250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023763090970592423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1700>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704fde90; to 'JaxprTracer' at 0x7ff71190bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x331823f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021254498587509947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70604a00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400e8590; to 'JaxprTracer' at 0x7ffb400ea5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53142390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02235211370797982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605a50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50426a70; to 'JaxprTracer' at 0x7ffc50427ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d39c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022074087314768304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833ee00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046b0b0; to 'JaxprTracer' at 0x7ffc3046ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63437e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023062174792812792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02306217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf2c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb903ba020; to 'JaxprTracer' at 0x7ffb903bbba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f03540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018297180908797374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01829718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d74b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90412980; to 'JaxprTracer' at 0x7ffc90412ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67432b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02297865904271075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02866f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c47b010; to 'JaxprTracer' at 0x7ff70c478fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36723e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022324511481880777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07777f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0618ae0; to 'JaxprTracer' at 0x7ffc9062db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86002400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025582553086810508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02558255, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c475850>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901de390; to 'JaxprTracer' at 0x7ffb901df380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f4e7a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023135589671329497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02313559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d050>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100e6930; to 'JaxprTracer' at 0x7ffc100e7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x990f0450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02202596897993038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2420>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10595760; to 'JaxprTracer' at 0x7ffc10597380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dae22e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023030017691309582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02303002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607530>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7030f470; to 'JaxprTracer' at 0x7ffc7030e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x235d8f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021915679328487533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e4f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa445935b0; to 'JaxprTracer' at 0x7ffa44593830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e8f41a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02414105535040203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e93a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be36890; to 'JaxprTracer' at 0x7ff70be354e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa09b5fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016949261860836347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01694926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9f90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d3d30; to 'JaxprTracer' at 0x7ffc105047c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67edcf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01991700162782939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.019917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9530>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48442570; to 'JaxprTracer' at 0x7ffb48443a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ae0410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025426498396010258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0254265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250d90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf074f6a0; to 'JaxprTracer' at 0x7ffbf074e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa67e0490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024619489733266824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e2a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303cf1a0; to 'JaxprTracer' at 0x7ffc303cf240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77adb7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024195470216751953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3250>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa835b060; to 'JaxprTracer' at 0x7ffaa8359fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d270df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024423482156519315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02442348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3710>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307489a0; to 'JaxprTracer' at 0x7ffc30748d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52feb470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02286943422482215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286943, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714202ae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e37e0; to 'JaxprTracer' at 0x7ffc502e25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfb3ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024461781218365185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5830>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0731fd0; to 'JaxprTracer' at 0x7ffbb0732110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfe3ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018926849636151546
73, epoch_train_loss=0.0018926849636151546
Epoch 74
Epoch 74 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021121280321782815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a36f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035c090; to 'JaxprTracer' at 0x7ffbd035f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x335b360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018836635521191348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01883664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3780>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9022b970; to 'JaxprTracer' at 0x7ffc90229850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cabeda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008454622048236413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00845462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1200>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703c6d90; to 'JaxprTracer' at 0x7ffb703c43b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9293bef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013017205826844907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01301721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252b20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03692b0; to 'JaxprTracer' at 0x7ffcf036ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59cc1b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019591638294339707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01959164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32d50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07455d0; to 'JaxprTracer' at 0x7ffcb07443b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88da8710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023518419281169014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305227f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904ed8a0; to 'JaxprTracer' at 0x7ffc904ed210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22bb67f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02097544807880446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605880>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44772fc0; to 'JaxprTracer' at 0x7ffa447732e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18b39cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022182593822455233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706063d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712372980; to 'JaxprTracer' at 0x7ff712371760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33af4a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021363128758348966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2f20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04d6070; to 'JaxprTracer' at 0x7ffab04d5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x843a38c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02281150733171164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618820>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407381d0; to 'JaxprTracer' at 0x7ffb407393f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d51c170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018114315649366858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01811432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1870>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700a9e90; to 'JaxprTracer' at 0x7ffc700a8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97abfe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022676146562643936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0e40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15ddf0; to 'JaxprTracer' at 0x7ffa3c15c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48f66400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022130951695275906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c9f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702e2f20; to 'JaxprTracer' at 0x7ffa4c727bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x867bccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02527963843060092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527964, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eacd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702e0b80; to 'JaxprTracer' at 0x7ffc504ce3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8630cfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02289920334843128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31fd0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04dc770; to 'JaxprTracer' at 0x7ffcd04de980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x205b5d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021856889948053074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522830>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1051f380; to 'JaxprTracer' at 0x7ffc1051dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3373f310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022708094350378138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606fa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b541d0; to 'JaxprTracer' at 0x7ffa703f7f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e866790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02174713551117771, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f36a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b9f3d0; to 'JaxprTracer' at 0x7ff711b9f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x805e1720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023749419910098466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d830>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902de4d0; to 'JaxprTracer' at 0x7ffc902de700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c6f91b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016603864078402992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01660386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1780>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a72e0; to 'JaxprTracer' at 0x7ffcb04a6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e168dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019712256896521053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf4a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd9e90; to 'JaxprTracer' at 0x7ff713cdb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a722e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025104759157575728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa020>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f14cc0; to 'JaxprTracer' at 0x7ff713f172e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54261140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02410029429300942, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e69d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c2a70; to 'JaxprTracer' at 0x7ffcf020a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e01e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02398974510229774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0990>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd022a200; to 'JaxprTracer' at 0x7ffbd0228cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x959987e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023865763933938734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285880>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05b1f80; to 'JaxprTracer' at 0x7ffbd05b3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62bf0410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02245484600644297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137edc10; to 'JaxprTracer' at 0x7ff7137ec770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ed0e930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023908446166233974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e6a20; to 'JaxprTracer' at 0x7ff9f420bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74de4af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0017121300878369353
74, epoch_train_loss=0.0017121300878369353
Epoch 75
Epoch 75 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021354792248521777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142015c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0211580; to 'JaxprTracer' at 0x7ffae02111c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15879cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01899505922956765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01899506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0f30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d011c4f0; to 'JaxprTracer' at 0x7ff7d011e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2113aad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008489858629718393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00848986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101114c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b074b0b0; to 'JaxprTracer' at 0x7ffa705c6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2394fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013084479567999107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01308448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212170>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907b0cc0; to 'JaxprTracer' at 0x7ffc907b2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb63300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01965860645770457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01965861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4751d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04ddd50; to 'JaxprTracer' at 0x7ffcb069bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42399a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023648933088109704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02364893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c5f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30192340; to 'JaxprTracer' at 0x7ffc30192d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43100ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021171587261773952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145540>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07759e0; to 'JaxprTracer' at 0x7ffcb0774810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68388950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02240102010411481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147790>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf077fce0; to 'JaxprTracer' at 0x7ffbf077db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x707c6ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02184303250043825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acb530>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709202fc0; to 'JaxprTracer' at 0x7ff7134e0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x174d3d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022906789868290544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70617520>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712342660; to 'JaxprTracer' at 0x7ff712341c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c8a8e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018142311224780917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01814231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142012a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa82f24d0; to 'JaxprTracer' at 0x7ffaa82f1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa194d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022841881790641037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2cd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41593a0; to 'JaxprTracer' at 0x7ffb50562ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b19180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02219538694505669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111110>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b50ae0; to 'JaxprTracer' at 0x7ff711b51fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447caa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025408528871514704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02540853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212b30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71374e840; to 'JaxprTracer' at 0x7ff71374c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa505fb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022917745943099446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4741e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014c4a0; to 'JaxprTracer' at 0x7ffcf014f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e47ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02191789998985614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0219179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049e890>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713503b00; to 'JaxprTracer' at 0x7ff713503f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fb26b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02292746156316217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147180>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03bb100; to 'JaxprTracer' at 0x7ffbd03bab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3671d5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021828644849762734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac94d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193eca0; to 'JaxprTracer' at 0x7ffb703c77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15df94b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023971911318065146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d020>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705eebb0; to 'JaxprTracer' at 0x7ffb705ecd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x684a1a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016829093148054215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01682909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522d20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c17e160; to 'JaxprTracer' at 0x7ffc90229bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e8ff610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019833899725544515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0198339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb390>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d31d00; to 'JaxprTracer' at 0x7ff712d30f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x500e9020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02521304744529794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02521305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32ca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d33d0; to 'JaxprTracer' at 0x7ffa3c6c8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a592020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024463997320418884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.024464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9b60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713008630; to 'JaxprTracer' at 0x7ff71300b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a8de3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024130033470471757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f99e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ebf10; to 'JaxprTracer' at 0x7ffc100eb010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x844760f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02421032229807061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02421032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c230>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3d0f90; to 'JaxprTracer' at 0x7ff70c3d0040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f80340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022732730415919958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0ef0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70640450; to 'JaxprTracer' at 0x7ffbd03edda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24ac9470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02428458856011012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02428459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407ef00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01c0ef0; to 'JaxprTracer' at 0x7ffbb01c1030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24aa1010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015847807506733902
75, epoch_train_loss=0.0015847807506733902
Epoch 76
Epoch 76 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02142022226329718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02142022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c33f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03884f0; to 'JaxprTracer' at 0x7ffbd0388db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c8bbc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019029927107967196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01902993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01efb10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00963e0; to 'JaxprTracer' at 0x7ffaf00948b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5afeca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008445378763271007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00844538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e140>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf019cae0; to 'JaxprTracer' at 0x7ff712b3a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa659b720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013095655722900638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01309566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9680>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48248d60; to 'JaxprTracer' at 0x7ffb4824b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f3d4d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019621313338042883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01962131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eaf70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44133010; to 'JaxprTracer' at 0x7ffa441316c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64f80770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02368075938302185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e3d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90057380; to 'JaxprTracer' at 0x7ffc900572e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f70fa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02121671076451807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8f10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4158810; to 'JaxprTracer' at 0x7ff9f415b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd6d3140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022458592510884855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f86c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0736840; to 'JaxprTracer' at 0x7ff9b0734860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x259afb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02142441916687839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02142442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc907487c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03b7790; to 'JaxprTracer' at 0x7ffbb03b7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67562660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022888577423824597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2870>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304daf20; to 'JaxprTracer' at 0x7ffc304d8770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89699510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018081882270552484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01808188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1cc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073f740; to 'JaxprTracer' at 0x7ffb7073d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x493a8b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02275908030560935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049a330>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074ae30; to 'JaxprTracer' at 0x7ffbd0749530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e540c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022160164119461645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ff20>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41cc8b0; to 'JaxprTracer' at 0x7ff9f41cd530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cb5230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025427207652505893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32f50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8725530; to 'JaxprTracer' at 0x7ffaa8726cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dd81730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0228343002578887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea060>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f41ae110; to 'JaxprTracer' at 0x7ff9f41ac5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x850f2520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02186955483180313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021eff0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0479350; to 'JaxprTracer' at 0x7ffa3c102e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d538990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022809041140605252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9b90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c121300; to 'JaxprTracer' at 0x7ffa3c122070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bbaa180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02181060005409441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749520>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf035a160; to 'JaxprTracer' at 0x7ffaf0359df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8376e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02388969079236196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2720>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07d7e70; to 'JaxprTracer' at 0x7ff9b07d5d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b25b210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016701580964472766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01670158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdfe0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10560680; to 'JaxprTracer' at 0x7ffc10563d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c67d840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019883108551827174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01988311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0339bc0; to 'JaxprTracer' at 0x7ffbf033a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3173a250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02522497408338133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211220>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3013c9a0; to 'JaxprTracer' at 0x7ff7123af470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa11cba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024224857049897575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0d30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193cae0; to 'JaxprTracer' at 0x7ff71193d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x455a5de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024127830076878607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d74d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db6b60; to 'JaxprTracer' at 0x7ff712db4bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7168c440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023932599058098254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0239326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482538c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70187650; to 'JaxprTracer' at 0x7ffa701852b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ce5e3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02254288763100398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a58c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304c5bc0; to 'JaxprTracer' at 0x7ffc304c74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x663887b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024004799114099754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776d80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00f9bc0; to 'JaxprTracer' at 0x7ffaf00fa8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74bbbb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015537709374967394
76, epoch_train_loss=0.0015537709374967394
Epoch 77
Epoch 77 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021417643581325353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02141764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3b60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02408b0; to 'JaxprTracer' at 0x7ffcb0240c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44dd5990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018994141180763476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01899414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e59f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07646d0; to 'JaxprTracer' at 0x7ff7d07641d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3918e370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008452028205479219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00845203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482537c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0317100; to 'JaxprTracer' at 0x7ff7d0314720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa87e9ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013073067694131725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01307307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0cf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3bf830; to 'JaxprTracer' at 0x7ffa3c3befc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x899bd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01960945012024397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5560>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03a2200; to 'JaxprTracer' at 0x7ffcf03a1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x675a2810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023679209909786936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1210>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c727830; to 'JaxprTracer' at 0x7ffa4c726200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2f43c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021137125075718674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07444c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf077d080; to 'JaxprTracer' at 0x7ffbf077d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc09990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022464236029031037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40553dd0; to 'JaxprTracer' at 0x7ffb40551a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5335700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021742665784117595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702523c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407396c0; to 'JaxprTracer' at 0x7ffb40739df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x256f9140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02281033901226768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf810>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01430b0; to 'JaxprTracer' at 0x7ffaf0143ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4769f870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018043229355921647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01804323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2b30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01c4040; to 'JaxprTracer' at 0x7ffbd01c6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b6f1490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022771745828299297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e49a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3052f060; to 'JaxprTracer' at 0x7ffc3052fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf850a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022144103123079472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253630>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706f8ae0; to 'JaxprTracer' at 0x7ffa4c214090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dd2ccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025397326089754427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02539733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284620>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0757e20; to 'JaxprTracer' at 0x7ffab0757970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67299370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022795325680248935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4d70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013f010; to 'JaxprTracer' at 0x7ffbf013ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47b9f830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02189123982500732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f1c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4234950; to 'JaxprTracer' at 0x7ff9f4237830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30bc8010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02288938831623025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144690>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48249c60; to 'JaxprTracer' at 0x7ffb4824b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4797d510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021795740704697378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486faad0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0745ee0; to 'JaxprTracer' at 0x7ff9d44e1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ac24f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023963318512032938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057d7a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10332c00; to 'JaxprTracer' at 0x7ffc10333010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d3d170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016780623126951492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01678062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f200>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf066c0e0; to 'JaxprTracer' at 0x7ffaf066d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9563f1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019799707198218542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166740>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0331120; to 'JaxprTracer' at 0x7ffbb0331210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38226eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025167608054155705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02516761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e91f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7133723e0; to 'JaxprTracer' at 0x7ffbb07d9c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25c02150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024407776048365696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e89b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70922b880; to 'JaxprTracer' at 0x7ff70922abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bbf0880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02408646515607989, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c9c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf00e1760; to 'JaxprTracer' at 0x7ffcf00e0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9470dce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02412666149889823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ce0c0; to 'JaxprTracer' at 0x7ff712db7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d91270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022679264498099084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049be30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a4c70; to 'JaxprTracer' at 0x7ff9d45a5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46171c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02421704811055504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02421705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed080>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70aeef920; to 'JaxprTracer' at 0x7ff9b07d6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e08f730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.001510056585427879
77, epoch_train_loss=0.001510056585427879
Epoch 78
Epoch 78 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021354411605433728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a74c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30766b10; to 'JaxprTracer' at 0x7ffc307668e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ddfcce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018979371011231493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f38d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901de020; to 'JaxprTracer' at 0x7ffb901dec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62684700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00842608155171662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00842608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499870>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7021f8d0; to 'JaxprTracer' at 0x7ffb7021f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50cfa9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013021799075429547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0130218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8250>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a7600; to 'JaxprTracer' at 0x7ffab04a6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35294ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019624510357590868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01962451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33360>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71374dad0; to 'JaxprTracer' at 0x7ff71374f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa653b640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02361417589327757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e160>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01b8450; to 'JaxprTracer' at 0x7ff7b01b8130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c682ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021049739468833033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251df0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ee390; to 'JaxprTracer' at 0x7ffbd03ee750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15a285c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022386379212656973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251470>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb05f03b0; to 'JaxprTracer' at 0x7ffcb05f1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x648e6a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021520079528117495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145290>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90752c50; to 'JaxprTracer' at 0x7ffb90751080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39736960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02279903268538502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774ce0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700a85e0; to 'JaxprTracer' at 0x7ffc700a8cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x351f0680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01799113499449376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01799113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4c10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb405514e0; to 'JaxprTracer' at 0x7ffb40550d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64331bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022709506857944994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f14d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307128e0; to 'JaxprTracer' at 0x7ffc307112b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58d08090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02215784976233893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b180>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71190b0b0; to 'JaxprTracer' at 0x7ffc906649f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa03f3df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025323793587863578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fd50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0706d40; to 'JaxprTracer' at 0x7ffa3c39d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22645400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022776114709013095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e93b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70063e20; to 'JaxprTracer' at 0x7ff9f41a3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba08b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02194893920863351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021cf20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b06351c0; to 'JaxprTracer' at 0x7ffa3c60df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d4f1a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02279751859902347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251310>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502a86d0; to 'JaxprTracer' at 0x7ffc502aaed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9413e4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0217968785106725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144a60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360860; to 'JaxprTracer' at 0x7ffbb03605e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e6caa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02386209551881903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0238621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049daa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d473aa20; to 'JaxprTracer' at 0x7ff9d473a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x896c8640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01665563251369121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01665563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2160>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0603ec0; to 'JaxprTracer' at 0x7ff9b06018f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0cfd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019757372040680392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5440>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124056c0; to 'JaxprTracer' at 0x7ff712406e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a087950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02509400678459953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02509401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10739210; to 'JaxprTracer' at 0x7ffc1073a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b889360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024251926538308564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902106a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055e200; to 'JaxprTracer' at 0x7ffb4055e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68ca2010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023987016955155874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b27e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0332c00; to 'JaxprTracer' at 0x7ffbb0333060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28740850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0239793602695625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6270>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10562840; to 'JaxprTracer' at 0x7ffcf029b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e58ac50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022561208998104865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a18e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00952b0; to 'JaxprTracer' at 0x7ffa442c31f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53c85ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02404807501187083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142029b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0078810; to 'JaxprTracer' at 0x7ff9b0078680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76140fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0014878509726941856
78, epoch_train_loss=0.0014878509726941856
Epoch 79
Epoch 79 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02151893049881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02151893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359ef80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01690d0; to 'JaxprTracer' at 0x7ffbb016ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7556df50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019055622602864492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01905562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fa60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04543b0; to 'JaxprTracer' at 0x7ffcd0454f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d6363f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008469410352905975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00846941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482522d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712124fe0; to 'JaxprTracer' at 0x7ff7121271f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x389bac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013128396149951396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0131284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02867f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d4540; to 'JaxprTracer' at 0x7ff7132d7380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x436efbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019727922982478427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01972792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf7e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8725da0; to 'JaxprTracer' at 0x7ff713ac50d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12dda910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02380180787450292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0d90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15f560; to 'JaxprTracer' at 0x7ffa3c15d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ed95540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02120949039427401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5f50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705d91c0; to 'JaxprTracer' at 0x7ffb705da660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356a7240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0225252025375424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4f10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70723dd0; to 'JaxprTracer' at 0x7ffb70722f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69b590c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021796315112926467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057ce70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a5b790; to 'JaxprTracer' at 0x7ffa7069abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfb3c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022940183416407346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616160>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be63ec0; to 'JaxprTracer' at 0x7ffb90753510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b138c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018068755374049363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01806876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359d5e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0743f10; to 'JaxprTracer' at 0x7ffbd07404a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x504672f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022839664479874743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02283966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e870>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0688ea0; to 'JaxprTracer' at 0x7ffae068a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ea94a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022283194457938152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251cb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71303bc90; to 'JaxprTracer' at 0x7ff71303bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6d61d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02556542077861756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02556542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286170>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0755170; to 'JaxprTracer' at 0x7ffab07541d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85bc5de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022889032879120343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdbc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71374c090; to 'JaxprTracer' at 0x7ff71374f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45621c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022109831539133505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0570>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf036aca0; to 'JaxprTracer' at 0x7ffcf036bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42a5b640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022931364000604897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02293136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d62a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03b8c70; to 'JaxprTracer' at 0x7ffbd057ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85d46de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021905027398157705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057ea70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf00871a0; to 'JaxprTracer' at 0x7ffaf0084bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3aeef9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024106107287206132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c220>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119d3a60; to 'JaxprTracer' at 0x7ff7119d1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f3160a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016812200923831743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0168122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521950>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703f4090; to 'JaxprTracer' at 0x7ffa703f4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f03cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019923455474284577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01992346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32950>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85935b0; to 'JaxprTracer' at 0x7ffaa8590310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d680e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02531107389918576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8f00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c407420; to 'JaxprTracer' at 0x7ff70c406430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c94df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024493683625881522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02faef0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d37e0; to 'JaxprTracer' at 0x7ffbb01d0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4e41b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024100345029097463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2460>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c140d10; to 'JaxprTracer' at 0x7ffcb02431a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36ef2b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024214998237257944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.024215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3e20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10331210; to 'JaxprTracer' at 0x7ffc102f71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x348d3190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022727586116666882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02272759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1240>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3046ae30; to 'JaxprTracer' at 0x7ffc3046a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84243620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024291256384680403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02429126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1350>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c46a890; to 'JaxprTracer' at 0x7ff70c46a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b8544d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015323237067032278
79, epoch_train_loss=0.0015323237067032278
Epoch 80
Epoch 80 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021257332951153753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e53a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70150900; to 'JaxprTracer' at 0x7ffa70150130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x108d3b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018498234109103253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01849823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111840>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf018f790; to 'JaxprTracer' at 0x7ff9d453b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa08d2860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008376069817912191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00837607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0920>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74fc40; to 'JaxprTracer' at 0x7ffa4c74f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f90b8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012989462417899174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01298946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e91b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06f5bc0; to 'JaxprTracer' at 0x7ffbd06f6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50f5d320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01938281657664969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01938282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9380>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a2020; to 'JaxprTracer' at 0x7ffc504cc4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f01f400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023426930885440542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702508d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c214f90; to 'JaxprTracer' at 0x7ffa4c2179c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40e42990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02091177050104819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4480>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c707d80; to 'JaxprTracer' at 0x7ffa4c706ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36af3910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02220982157780003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7560>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9062e610; to 'JaxprTracer' at 0x7ffc9062f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b02a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02113485958972113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1540>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e66b0; to 'JaxprTracer' at 0x7ff7b03e7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b7f0540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02250131468950613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144b20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06dfc90; to 'JaxprTracer' at 0x7ffaf06dc040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb4c8ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017903331889072997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01790333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e6510>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702a76a0; to 'JaxprTracer' at 0x7ffc702a6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64fe0e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022446927345360246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113300>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ea7a0; to 'JaxprTracer' at 0x7ffc10711670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d23b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02197728928389857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f92b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707644f0; to 'JaxprTracer' at 0x7ffb70767e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x983d3be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02524008530264427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02524009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c31a10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd060b600; to 'JaxprTracer' at 0x7ffbd0609d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x636861f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02262485353379848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e2d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90744bd0; to 'JaxprTracer' at 0x7ff9b07e0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ce2e620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021822164133332864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702532e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0052fc0; to 'JaxprTracer' at 0x7ffcf0053b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa007dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022581218019936542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d41d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d6700; to 'JaxprTracer' at 0x7ff7132d7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9559dcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021642697738774346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0ac0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70711b70; to 'JaxprTracer' at 0x7ffb707130b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x618623e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023696844549717086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf9c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05e63e0; to 'JaxprTracer' at 0x7ff7b05e6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad2a840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01648160494832117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0164816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aaf80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01f4e00; to 'JaxprTracer' at 0x7ffae01f78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4af4570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019685691416216414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01968569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213070>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48230090; to 'JaxprTracer' at 0x7ffb482308b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43bae140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02499011454428138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b1db0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c05e0; to 'JaxprTracer' at 0x7ffbd035ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d8ea630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023974986708935653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d6ee0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c6c9d50; to 'JaxprTracer' at 0x7ff7137ed620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b123a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023781688401211136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a32f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125aba60; to 'JaxprTracer' at 0x7ff7125a8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ef7be80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02371128200246345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f230>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e4c20; to 'JaxprTracer' at 0x7ffbd05e5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9dccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022299515473223796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b26c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709202f70; to 'JaxprTracer' at 0x7ff709203290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314789c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02373576356113619, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02373576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359fc80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b5e2fc0; to 'JaxprTracer' at 0x7ff70b5e3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9539db20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0019393913446111065
80, epoch_train_loss=0.0019393913446111065
Epoch 81
Epoch 81 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021667427872949254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02166743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c2780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0105b20; to 'JaxprTracer' at 0x7ffab02eb920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22fd9ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01886085555955126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01886086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acace0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4e5350; to 'JaxprTracer' at 0x7ffa4c4e49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x883c3c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00854585477270158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00854585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1e50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70710ef0; to 'JaxprTracer' at 0x7ffb70712bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3edc1e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0132206037085983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0132206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c070>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3126b0; to 'JaxprTracer' at 0x7ffa3c313920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x509f5010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019582241180780877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01958224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4ab0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85f8220; to 'JaxprTracer' at 0x7ff9b0708590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x781cc680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023849612377300735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102aa810>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50377fb0; to 'JaxprTracer' at 0x7ffb50375f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x357d97c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021366384134536516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049fb90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ebd30; to 'JaxprTracer' at 0x7ffc100e99e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41397240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022580984153108535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ee50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa440b1d50; to 'JaxprTracer' at 0x7ffa440b1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10ee5070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022292127754854004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10165d70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f467c270; to 'JaxprTracer' at 0x7ff9f467d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba48e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022911186562665185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6ce780>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907189a0; to 'JaxprTracer' at 0x7ffb9071be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dff7200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01812524684941474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01812525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c30e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0298860; to 'JaxprTracer' at 0x7ffcf0299210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6315a0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022945286837683685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acb070>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4256700; to 'JaxprTracer' at 0x7ff9d4254c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x704bd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022276173075969203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0f90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b516c0; to 'JaxprTracer' at 0x7ffb48669850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df87570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02574956717272024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02574957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1fc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009ee80; to 'JaxprTracer' at 0x7ff71289b420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x542a1b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022922695759788458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3f80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0368ae0; to 'JaxprTracer' at 0x7ffcf036b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x432619b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022081010935411486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab230>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39d7b0; to 'JaxprTracer' at 0x7ffa3c39d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x517a6fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023137577657998395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02313758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628ea0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057d6c0; to 'JaxprTracer' at 0x7ffb4057e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9589e250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02192060788804395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02192061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166480>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c74ec00; to 'JaxprTracer' at 0x7ffa4c74c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f360860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024360043140235092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f4c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505be4d0; to 'JaxprTracer' at 0x7ffb505bee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37bbfab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01707596011486282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01707596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477650>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f98950; to 'JaxprTracer' at 0x7ff712f98e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9c4cd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020102923527898078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02010292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021e310>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10594d60; to 'JaxprTracer' at 0x7ffc10597dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52898720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025477334364409982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02547733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607af0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07e1c60; to 'JaxprTracer' at 0x7ff9b07e3330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bd10670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024858179880748472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02485818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9e00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705c5210; to 'JaxprTracer' at 0x7ffa705c7740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ef0ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024181895141855096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f9d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b06741d0; to 'JaxprTracer' at 0x7ffae01f49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4db720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02461821910438351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa870>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8590720; to 'JaxprTracer' at 0x7ffaf03467f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6de87d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02299257423774299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02299257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334ad0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02f43b0; to 'JaxprTracer' at 0x7ffab02f5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7637f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024679362505434423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02467936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113560>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad9850; to 'JaxprTracer' at 0x7ff712ad96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65972290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0020538943592242668
81, epoch_train_loss=0.0020538943592242668
Epoch 82
Epoch 82 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02139499202172332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02139499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285350>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bf84f0; to 'JaxprTracer' at 0x7ff711bfae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2373b1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018721972759297403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01872197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb901479b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713065bc0; to 'JaxprTracer' at 0x7ff713067150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20945550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008453123252823273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00845312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7af0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c6c1e40; to 'JaxprTracer' at 0x7ffa4c6c0220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eccaf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012936618892838226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01293662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063fb40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb034f1a0; to 'JaxprTracer' at 0x7ff7d07ef5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7739e400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019494047054313395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01949405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9940>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd057ccc0; to 'JaxprTracer' at 0x7ffbd057c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57cf23c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02344232096113121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02344232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70250830>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b50c20; to 'JaxprTracer' at 0x7ff711b51a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d6a36b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02114153982916898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d55f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a7100; to 'JaxprTracer' at 0x7ff9d45a5a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74a76050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022221325205962525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3decf0; to 'JaxprTracer' at 0x7ffa3c3df510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3113b510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02114676223050307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628a40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01c5b70; to 'JaxprTracer' at 0x7ffbd01c7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f66b1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022823175246244432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e240>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712341da0; to 'JaxprTracer' at 0x7ff712343740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a37f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018003216252636855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01800322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf02870a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073c0e0; to 'JaxprTracer' at 0x7ffb7073e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b3ce770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022668991800873367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146f50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f7dd0; to 'JaxprTracer' at 0x7ffb905f4ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf1ffe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02221049052323678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4c50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d00b80; to 'JaxprTracer' at 0x7ffbf019c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c6f4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02536402876807098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02536403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ce30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10332c50; to 'JaxprTracer' at 0x7ffcd02d2110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa04a8a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022868089866047495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706049b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301920c0; to 'JaxprTracer' at 0x7ffc301924d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1385deb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02202590699626656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4764c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ec0e0; to 'JaxprTracer' at 0x7ffc100ec680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa447d970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02271960026443416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d69a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd9b20; to 'JaxprTracer' at 0x7ff713cdb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b952940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021843102528407873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062a5c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712370450; to 'JaxprTracer' at 0x7ff712371df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fc6ca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023782993224246877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02378299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bebc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44072ac0; to 'JaxprTracer' at 0x7ffa44073a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fa2eaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016528628459391653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01652863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0950>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad14e0; to 'JaxprTracer' at 0x7ff712ad2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20779720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020008283552701584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02000828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0230>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504552b0; to 'JaxprTracer' at 0x7ffc50454d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d78fa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025152774661888682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02515277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210f20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b03754e0; to 'JaxprTracer' at 0x7ffaa80a6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x545b35d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024061068946383702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7980>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07c9ee0; to 'JaxprTracer' at 0x7ff713a998a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3598d8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02392541495411373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4c60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442ef1f0; to 'JaxprTracer' at 0x7ff712f9b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x785af0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023843006826147387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833cb90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01d9f30; to 'JaxprTracer' at 0x7ffbf01db740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x592a5bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02241069573806163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b34f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01f76a0; to 'JaxprTracer' at 0x7ffc90794180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x483ae270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023820735127503462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b7a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70592e30; to 'JaxprTracer' at 0x7ffb70592f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81d2dc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.001578904147613912
82, epoch_train_loss=0.001578904147613912
Epoch 83
Epoch 83 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021418701985307258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306cf290; to 'JaxprTracer' at 0x7ffc70619850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13a2a980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018867459931034326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01886746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c05a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506782c0; to 'JaxprTracer' at 0x7ffc506780e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96b98f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008546582978209247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00854658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca0e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42b1760; to 'JaxprTracer' at 0x7ff7d0314ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6146c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01305879387134597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01305879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0f60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04df510; to 'JaxprTracer' at 0x7ffc70682d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa86e71e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01960518098855601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a18e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702e3d80; to 'JaxprTracer' at 0x7ffc702e1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x554988b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023483689665730594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02348369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab070>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901dc630; to 'JaxprTracer' at 0x7ffb901df2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f762fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021181286908298427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049ebe0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b00b4590; to 'JaxprTracer' at 0x7ff9b00b4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2242fa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02222563876426421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628b30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d33a10; to 'JaxprTracer' at 0x7ff712d32430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b16f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021714398582807277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747dc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a2bb0; to 'JaxprTracer' at 0x7ffcb07a0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62fbc6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02299404876451712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02299405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706158c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705b07c0; to 'JaxprTracer' at 0x7ffb705b2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf819b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01809815823746822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01809816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa2a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10747c90; to 'JaxprTracer' at 0x7ffc107440e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b95bfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022869790429122763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1070>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b4bd30; to 'JaxprTracer' at 0x7ff711b4a8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a6f8210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02234886398436546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca340>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0746c50; to 'JaxprTracer' at 0x7ffcb07447c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4134e670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025418297654828014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0254183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e8b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900563e0; to 'JaxprTracer' at 0x7ffc90055990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d64ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023021670274938243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02302167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5d90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902b4c70; to 'JaxprTracer' at 0x7ffc902b64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d09fbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022173120006488436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0550>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0306d90; to 'JaxprTracer' at 0x7ffab03070b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d1fdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02294033560159295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b1a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303cea20; to 'JaxprTracer' at 0x7ffc303cccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32e487d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021949126800053592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746c20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304fca90; to 'JaxprTracer' at 0x7ffc304fec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa61bd750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02397507976921122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4470>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d5ad0; to 'JaxprTracer' at 0x7ffbb03d4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bb25b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016744421125639612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01674442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4764d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70372ed0; to 'JaxprTracer' at 0x7ffb402f00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5010fc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02006545130560667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70252800>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02c6700; to 'JaxprTracer' at 0x7ffcb02c4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63ef83b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02521799949606855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.025218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605150>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141b7b00; to 'JaxprTracer' at 0x7ff7141b6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7baa830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024447894122105338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02444789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305231f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c0f5da0; to 'JaxprTracer' at 0x7ffb90787fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6efd9700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024013738032988494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ce90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3d60c0; to 'JaxprTracer' at 0x7ffa3c3d5300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551c83f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02426550499353139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0242655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fad70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb069a340; to 'JaxprTracer' at 0x7ffcb06989f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e9134c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022719456189986945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5950>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5039f2e0; to 'JaxprTracer' at 0x7ffb5039f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df88da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024254124572776575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776120>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70183380; to 'JaxprTracer' at 0x7ffb70183bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99cafa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0014027854562771766
83, epoch_train_loss=0.0014027854562771766
Epoch 84
Epoch 84 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021294612769208195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021c540>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3016a7f0; to 'JaxprTracer' at 0x7ffc30168c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x781e1900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01858197944163595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01858198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c33c50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c25c0; to 'JaxprTracer' at 0x7ffaa85c32e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22fbde10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008547416112108155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00854742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145970>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10561670; to 'JaxprTracer' at 0x7ffc10560860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a710d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013186310587813041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01318631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8e30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d79c0; to 'JaxprTracer' at 0x7ff7128d6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cabb7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019423933286480354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01942393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e8410>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07282c0; to 'JaxprTracer' at 0x7ff7d072b2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30d83110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023450891607787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4773b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907162a0; to 'JaxprTracer' at 0x7ffc90714d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ab8fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020994775599403274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02099478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744750>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10745fd0; to 'JaxprTracer' at 0x7ffc10745cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7acb9310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022140650897437716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744b80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05e60c0; to 'JaxprTracer' at 0x7ffbd05e7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70977b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021600029951156237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed6f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e6fc0; to 'JaxprTracer' at 0x7ff7b03e72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418d9a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022712846836093387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049b360>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400eb510; to 'JaxprTracer' at 0x7ffb400eb920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2c50cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018103185962107922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01810319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021fff0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0159da0; to 'JaxprTracer' at 0x7ff9b015b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44b7aae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02266767344046082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c326f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f445c270; to 'JaxprTracer' at 0x7ff9f445dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99b85a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022191870092323658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4210>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700622a0; to 'JaxprTracer' at 0x7ffc30361fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e4a9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025376026649069624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02537603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d2f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907dc9f0; to 'JaxprTracer' at 0x7ffc9060fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa74ca470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022932575110865692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02293258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606a20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713720a90; to 'JaxprTracer' at 0x7ff713723f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa505d550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02200206931692064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c476630>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07dd4e0; to 'JaxprTracer' at 0x7ffcb07dd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d84650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022790165971514193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07463b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70710090; to 'JaxprTracer' at 0x7ffa44236340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80e83ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02177481020138077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ecb10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01f6340; to 'JaxprTracer' at 0x7ffa3c194d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33aaa9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02392142088156136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc1c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706af2e0; to 'JaxprTracer' at 0x7ffc706af740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47755710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01674260323062753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0167426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8ff0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0344fe0; to 'JaxprTracer' at 0x7ffaf0344a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2ab420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01989998884336045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01989999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213210>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d453b920; to 'JaxprTracer' at 0x7ffc30749530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x988360a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025166440619200744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02516644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0af0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a5d00; to 'JaxprTracer' at 0x7ffc704a7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c058c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024365271450328376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e66f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb402f3a10; to 'JaxprTracer' at 0x7ffb402f3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85491e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02392790808871122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e24e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014f600; to 'JaxprTracer' at 0x7ff7b014fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfbd2990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024141977092820597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b1a80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055f380; to 'JaxprTracer' at 0x7ffb4055de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80a218e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022582878796008687, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a02d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c726de0; to 'JaxprTracer' at 0x7ffc5048ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3aa4df90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024158956198667297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87293f0; to 'JaxprTracer' at 0x7ffaa8729260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ca2b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0013893535470942938
84, epoch_train_loss=0.0013893535470942938
Epoch 85
Epoch 85 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0214342083631654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02143421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e360>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70372fc0; to 'JaxprTracer' at 0x7ffb70372840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34d029f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018792559380072498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01879256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e2080>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c406340; to 'JaxprTracer' at 0x7ff70c407f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314d7990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008586375209512186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00858638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0200>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c197a10; to 'JaxprTracer' at 0x7ffa3c195f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59514fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013327870956998457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01332787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3610>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a218a0; to 'JaxprTracer' at 0x7ff713a21350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6621160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01947864061145542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01947864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6a10>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ac4e00; to 'JaxprTracer' at 0x7ff713ac57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cc1630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023658695520221304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0236587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90211ac0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128cc3b0; to 'JaxprTracer' at 0x7ff7128ccb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3791fe80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021152224088705488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2c00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714127f60; to 'JaxprTracer' at 0x7ff714127920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be567c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022348667974902703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1370>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9036b6f0; to 'JaxprTracer' at 0x7ffb9036a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be5d1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021483519254209063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02148352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b7a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15fd30; to 'JaxprTracer' at 0x7ffa3c15fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d188830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022957526100053437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cf3a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70723150; to 'JaxprTracer' at 0x7ffb70721440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1d8770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01820819358222709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01820819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057cc10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0763a60; to 'JaxprTracer' at 0x7ffbb0760b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99dcaa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0227828009869159, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1410>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf074e390; to 'JaxprTracer' at 0x7ffbf074c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f0853f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022294260924509902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1040>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0465490; to 'JaxprTracer' at 0x7ffcb0467880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90937900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02561545302097969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e13e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa441321b0; to 'JaxprTracer' at 0x7ffa44130d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fd2fd60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023054780163156277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a11c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a2890; to 'JaxprTracer' at 0x7ffc9024f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7636dcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.0220505098678984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102abb00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b5030; to 'JaxprTracer' at 0x7ffb400b4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58d5e560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02281304191333176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c21f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07afd80; to 'JaxprTracer' at 0x7ff7d07ad0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x952c78e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021853840507769354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062a5c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47a0ae0; to 'JaxprTracer' at 0x7ff9d47a1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10cf31c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02406945465816601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744260>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703f7ce0; to 'JaxprTracer' at 0x7ffa703f67f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f16880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01682374094614996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01682374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5ec0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf014d620; to 'JaxprTracer' at 0x7ffcf014ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31bc7dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020064734540297918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4754a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70922b970; to 'JaxprTracer' at 0x7ff709228770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4011f7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025427739858249795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026b010; to 'JaxprTracer' at 0x7ffb7026abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79d5ebf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024389209278186667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9a40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706aca40; to 'JaxprTracer' at 0x7ffa3c17eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ae9780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02409791040563013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ec90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704a4540; to 'JaxprTracer' at 0x7ffc704a7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44d74520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024121365890882387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521190>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014ef70; to 'JaxprTracer' at 0x7ff7b014f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e615f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022566760074534967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337310>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901dcfe0; to 'JaxprTracer' at 0x7ffb901dd1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32908b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024139383875665357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e74e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0782b10; to 'JaxprTracer' at 0x7ffb703bd940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x989e2840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0014000180210501608
85, epoch_train_loss=0.0014000180210501608
Epoch 86
Epoch 86 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02129562507189735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287b10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c39c9f0; to 'JaxprTracer' at 0x7ffa3c39f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a0b48e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018732871004641792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01873287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c740>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c313ce0; to 'JaxprTracer' at 0x7ffa3c313e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10bcb3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008546775661793413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00854678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03374e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e3920; to 'JaxprTracer' at 0x7ffbd06e3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22feb150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013246947137840004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01324695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa52b0; to 'JaxprTracer' at 0x7ff713fa7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54335160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019412109333158557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01941211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c690>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0756750; to 'JaxprTracer' at 0x7ffab0757010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34ca1320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023552011295112495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b0ac0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0436200; to 'JaxprTracer' at 0x7ffcb0435e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa182840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020959453737207628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02095945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714202ed0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4158720; to 'JaxprTracer' at 0x7ff9f4159530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3110b6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022254608308785635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142002e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417e570; to 'JaxprTracer' at 0x7ff71417f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3081e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021415893685084276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02141589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10165500>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b070aa70; to 'JaxprTracer' at 0x7ff9b070a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa15f7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022901267994916045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482517b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0269b70; to 'JaxprTracer' at 0x7ffcd0268220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10a6a200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018133481245492557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01813348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287560>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10373560; to 'JaxprTracer' at 0x7ffc10372fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a8e85b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022716587515890257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359e070>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013fbf0; to 'JaxprTracer' at 0x7ffbf013ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x338eec20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022222180328039548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0336390>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be34e50; to 'JaxprTracer' at 0x7ff70be35f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a249230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025503350018896503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f2d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0153e20; to 'JaxprTracer' at 0x7ffbb0153510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e58f460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02296350986917098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70607bc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70680e50; to 'JaxprTracer' at 0x7ffaa83a7240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fdb620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021984629425811482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d57c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa811a250; to 'JaxprTracer' at 0x7ffaa811a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51773370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022740444349998137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b0c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0362c50; to 'JaxprTracer' at 0x7ffbb0361e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86401210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021782562846481845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02178256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f2730>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30645170; to 'JaxprTracer' at 0x7ffc30646a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8edd5a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023971909053682326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102abaa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0169e90; to 'JaxprTracer' at 0x7ffaf0105df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x691cc790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01673534687944739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01673535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc670>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100e5670; to 'JaxprTracer' at 0x7ff9f4435120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c59470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01991768747950272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01991769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4ae0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b48360; to 'JaxprTracer' at 0x7ffcf0050040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x766475d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02531044110997185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0d70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10745440; to 'JaxprTracer' at 0x7ffc107475b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a8ed950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02431821344294041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02431821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833db90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503cefc0; to 'JaxprTracer' at 0x7ffb503cc7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c176e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023991169392422955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02399117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0920>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04fc4a0; to 'JaxprTracer' at 0x7ffa442eebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f3ef280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024042982388056973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b11d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b014f470; to 'JaxprTracer' at 0x7ff7b014c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1707ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022497096726764813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1880>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02f7740; to 'JaxprTracer' at 0x7ffab02f46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cf4d250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02406483432843473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61ad20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b247c40; to 'JaxprTracer' at 0x7ff70b247ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f023200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0013496334656040326
86, epoch_train_loss=0.0013496334656040326
Epoch 87
Epoch 87 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021285852649467193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0b40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706acbd0; to 'JaxprTracer' at 0x7ff713d01260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x744e7f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01883584799944112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01883585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f250>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704fcc70; to 'JaxprTracer' at 0x7ffc704fc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dbe7230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008547139987300736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00854714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e3c80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713038720; to 'JaxprTracer' at 0x7ffc5067a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92cb0370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013173040866973297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01317304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9be0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44322930; to 'JaxprTracer' at 0x7ffa443214e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8efa730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019431059959485738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01943106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fd50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70680540; to 'JaxprTracer' at 0x7ffc70681da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d7e4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023500145423128047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90212a40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70765c10; to 'JaxprTracer' at 0x7ffb70765350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3104890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02091966213966274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0770>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47d8720; to 'JaxprTracer' at 0x7ff7132e8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a690360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022255526031452977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1520>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5039e7a0; to 'JaxprTracer' at 0x7ffb5039c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3774b7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021877225229942017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049cc40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d30860; to 'JaxprTracer' at 0x7ff712d319e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7df1e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022991253487960828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02299125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706145f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ce7a0; to 'JaxprTracer' at 0x7ffa4423d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c85a5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018079708260084294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01807971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c1400>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0774450; to 'JaxprTracer' at 0x7ff9b0774400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd1b680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022854599263202754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0228546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057fde0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf074f010; to 'JaxprTracer' at 0x7ffa444baf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81bc7a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02224314629515891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1a40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06b28e0; to 'JaxprTracer' at 0x7ffae06b1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x810e8ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025456443251835416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02545644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3790>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42c7150; to 'JaxprTracer' at 0x7ff9d42c4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f8ef170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02292507153479151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02292507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4b00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05a5d50; to 'JaxprTracer' at 0x7ff9b05a7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81ee3d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022009513558837242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be770>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ed760; to 'JaxprTracer' at 0x7ff7d0064bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74c42f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022915618727311085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1ad0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90158bd0; to 'JaxprTracer' at 0x7ffb9015bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b75a960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02181900121899985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c6f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10563920; to 'JaxprTracer' at 0x7ffc105601d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6833b140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024056508659182844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02405651, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142027c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707f70b0; to 'JaxprTracer' at 0x7ffaf066e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54388190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01684615246696266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01684615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7960>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06098f0; to 'JaxprTracer' at 0x7ffbd0609850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54cc5850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019878042341450502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01987804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1020>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128707c0; to 'JaxprTracer' at 0x7ff712870310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72d60790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025255387882749256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02525539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70606300>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048ef70; to 'JaxprTracer' at 0x7ffc5048d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36c5eab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024604578313592262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02460458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb760>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0377560; to 'JaxprTracer' at 0x7ff9b0374ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc8c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023981355371801294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f880>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10371800; to 'JaxprTracer' at 0x7ffae0155d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42269120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024352760247768755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02435276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522040>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44130d60; to 'JaxprTracer' at 0x7ffa44132610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x615ad220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022739743370738048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03354a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10710d10; to 'JaxprTracer' at 0x7ffc10711b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ac22230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024384586981984594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44eb5a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3c93a0; to 'JaxprTracer' at 0x7ff9d42ec220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cdf5f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0014069289336437842
87, epoch_train_loss=0.0014069289336437842
Epoch 88
Epoch 88 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02125037790615136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4440>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442c1990; to 'JaxprTracer' at 0x7ffa442c05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15f027f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018918289619942203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01891829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48253b20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c313790; to 'JaxprTracer' at 0x7ffa3c3136a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f7fb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00843193007031186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00843193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359f800>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e1e40; to 'JaxprTracer' at 0x7ffbd06e3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a3cab30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013076327998200098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01307633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522ac0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03b8bd0; to 'JaxprTracer' at 0x7ff7124049a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c508ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019408018426626046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01940802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e6d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121ac630; to 'JaxprTracer' at 0x7ff7121ad350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c740690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02336523879463082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02336524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745a40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d45a7c40; to 'JaxprTracer' at 0x7ffcb0435e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc007820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02092796166448421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02092796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01eeed0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300e4c20; to 'JaxprTracer' at 0x7ffc300e5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f2b12a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02218073864661438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee730>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf020a1b0; to 'JaxprTracer' at 0x7ffcf020b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a958550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021069621103928782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629fc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0741df0; to 'JaxprTracer' at 0x7ffbd07412b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73d17a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023078198408649605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61afe0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5039cae0; to 'JaxprTracer' at 0x7ffb5039fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9da8fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017962580428951266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01796258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d5810>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70175490; to 'JaxprTracer' at 0x7ffc902293a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bcc38b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022734611182375807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504995c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900ca020; to 'JaxprTracer' at 0x7ffc900c92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8267050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02219784963367723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32d20>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50239710; to 'JaxprTracer' at 0x7ffc5023a750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4150cb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025326066916392623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063c200>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87256c0; to 'JaxprTracer' at 0x7ffaa8725670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75168c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022817212940436288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605960>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9071b790; to 'JaxprTracer' at 0x7ffc506a42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ff40ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021964871654205388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07475c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48440590; to 'JaxprTracer' at 0x7ffb484402c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4542cf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022657041268074978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef150>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c73fe20; to 'JaxprTracer' at 0x7ffa4c73efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x952c8e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02180127990488589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02180128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628850>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0333f60; to 'JaxprTracer' at 0x7ffa3c196610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29fa6880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02375303631438834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02375304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bd4c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07042c0; to 'JaxprTracer' at 0x7ffbb0705c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d67f0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01649657418469204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01649657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8910>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707bc950; to 'JaxprTracer' at 0x7ffb707bc810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa31c6530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019905962045677666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01990596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902123e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae0183150; to 'JaxprTracer' at 0x7ffae01816c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68b89700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02515362703640249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02515363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a3e90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711eabe70; to 'JaxprTracer' at 0x7ff711ea8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a569640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024081702448358496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833cde0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf066d120; to 'JaxprTracer' at 0x7ffaf066d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f63cb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023889916566402682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b2d70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3d5ee0; to 'JaxprTracer' at 0x7ffa3c3d57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ec1f2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023800230270204996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713acaf10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e0ea0; to 'JaxprTracer' at 0x7ffc900e0d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bceebb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022346316431011894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f9300>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100eade0; to 'JaxprTracer' at 0x7ffa4c413e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fe70c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02379428835929497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02379429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057c330>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f443aed0; to 'JaxprTracer' at 0x7ff9f443ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fd8a380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015724355459599678
88, epoch_train_loss=0.0015724355459599678
Epoch 89
Epoch 89 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021599204168742992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111d60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03b7740; to 'JaxprTracer' at 0x7ffbd053d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x407a6560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01916466009671837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01916466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4ef0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486e2520; to 'JaxprTracer' at 0x7ffb486e1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37cab9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00852660774832571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00852661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5b10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7021d030; to 'JaxprTracer' at 0x7ffb7021fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51943af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013248659003484365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01324866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3150>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057f150; to 'JaxprTracer' at 0x7ffb4057e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x331ec6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01953622376643621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01953622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e02d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40703ba0; to 'JaxprTracer' at 0x7ffb40700130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa84f8210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02362587511490106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6b20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd074a020; to 'JaxprTracer' at 0x7ffbd0749e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x251dcde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021298482485535314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bce40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47db150; to 'JaxprTracer' at 0x7ff9d47da7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92f7c4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022530854792653075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be250>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706adad0; to 'JaxprTracer' at 0x7ffc706ada80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16ec0150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02208306411154345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f0a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504e6f70; to 'JaxprTracer' at 0x7ffc504e7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34496a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02329702387911753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02329702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cc600>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90074ae0; to 'JaxprTracer' at 0x7ffc90077100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eae6260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018069654580473094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01806965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112630>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073d2b0; to 'JaxprTracer' at 0x7ffbb073c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4888ca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02306397421859245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02306397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4471710; to 'JaxprTracer' at 0x7ff9f4471030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3126a8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022332491480883312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02233249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7c70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d4257830; to 'JaxprTracer' at 0x7ff9d4256d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa1f8090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02562475843340857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02562476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9000>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07287c0; to 'JaxprTracer' at 0x7ff713a23c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d2112a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022910654259567412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833ed50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd023ac00; to 'JaxprTracer' at 0x7ffbd0238810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x892db3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022102645160714984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb902118d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa811aca0; to 'JaxprTracer' at 0x7ffaa81190d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6164e0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02307161716052616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be710>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d05821b0; to 'JaxprTracer' at 0x7ff7d07ad620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a95b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021945243615187102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049da50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713064fe0; to 'JaxprTracer' at 0x7ff71193ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84850230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024227918525238347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1ff0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c2bb0; to 'JaxprTracer' at 0x7ffcb025e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x310d0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016998573670744366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01eff70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107396c0; to 'JaxprTracer' at 0x7ffc10739d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83e03460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02015693653049223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02015694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142018c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4435b20; to 'JaxprTracer' at 0x7ff9f4436bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89f0fe40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025432018258519644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0747d00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119d3510; to 'JaxprTracer' at 0x7ff7119d22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93e100a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024825696022250612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0248257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706068e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0746390; to 'JaxprTracer' at 0x7ffcb07467a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6bb700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02415740319937211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063ea50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa440722a0; to 'JaxprTracer' at 0x7ffb707bef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf4462f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02452418982627651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02452419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06ea340>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f162a0; to 'JaxprTracer' at 0x7ff713f15670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5871cd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022896091639490655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02289609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f9650>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab071efc0; to 'JaxprTracer' at 0x7ffab071c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26ffdd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02458266746152126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02458267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c30a90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d459c1d0; to 'JaxprTracer' at 0x7ff9d459c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424923f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0018004533306338023
89, epoch_train_loss=0.0018004533306338023
Epoch 90
Epoch 90 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02131992505204628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0284c10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7026ba10; to 'JaxprTracer' at 0x7ffb7026bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d18540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018596601267065527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0185966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48252dc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0292fc0; to 'JaxprTracer' at 0x7ffcb02909f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ce4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00835347679922476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00835348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fb490>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d44e3ab0; to 'JaxprTracer' at 0x7ffbb0158680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56381130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01313931221598476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01313931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063cf00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d6660; to 'JaxprTracer' at 0x7ffc3033ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x893f1ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019192310816470375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01919231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07478b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87d7650; to 'JaxprTracer' at 0x7ffaa87d7e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x177cd590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023256065835414296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02325607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5270>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71289a980; to 'JaxprTracer' at 0x7ff7121af1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29d74910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020859703731794403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0208597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4761f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85773d0; to 'JaxprTracer' at 0x7ffaa8574bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x204e15f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022195905158612732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474850>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4055d940; to 'JaxprTracer' at 0x7ffb4055fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41be4980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021247246582375378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506290e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0478130; to 'JaxprTracer' at 0x7ffcd047a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fed8d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022698882257884224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e420>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076c810; to 'JaxprTracer' at 0x7ffbd076e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x839b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017857664400835478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01785766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0287aa0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae07491c0; to 'JaxprTracer' at 0x7ffae0748bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7884bf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02248809246540499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48251d00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705ede90; to 'JaxprTracer' at 0x7ffb705ecc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d59a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021902115273083504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8d40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0608130; to 'JaxprTracer' at 0x7ffcb0608fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa2230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025219079727567522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02521908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063d480>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b03e6110; to 'JaxprTracer' at 0x7ff9d4570860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x504c9b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02251743044968281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0745e10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0243ba0; to 'JaxprTracer' at 0x7ffbf07e1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6861e4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021754265738353117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed4a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121258f0; to 'JaxprTracer' at 0x7ffa7042cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67466ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022515808561249684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d940>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7063b790; to 'JaxprTracer' at 0x7ffb7063bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d1d1fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021537670049322284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70253360>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711925210; to 'JaxprTracer' at 0x7ff7119258f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b8f8080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02371499165240621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213780>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713503920; to 'JaxprTracer' at 0x7ff7135008b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586768e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016600361132842256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01660036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8d70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb486e1080; to 'JaxprTracer' at 0x7ffb486e0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a5ff1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019759984413702508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833dcf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07751c0; to 'JaxprTracer' at 0x7ff9b0776d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x456fe520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024993255823666183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a02b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7065ed90; to 'JaxprTracer' at 0x7ffa7065c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54dd31a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024188890986176378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02418889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b0b20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001800; to 'JaxprTracer' at 0x7ff713001d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa67b3df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023858531035335945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca210>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f4235990; to 'JaxprTracer' at 0x7ff9f4237420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bc01480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023772504138033237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0360>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0746f20; to 'JaxprTracer' at 0x7ffcb0747150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c3d880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022277473986172105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a4820>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02c5f80; to 'JaxprTracer' at 0x7ffcb02c7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ea36e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023915253061390147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3350>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128f1990; to 'JaxprTracer' at 0x7ff7128f1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51e5f8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0017512787006999687
90, epoch_train_loss=0.0017512787006999687
Epoch 91
Epoch 91 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021623886320511418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146f80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c1490; to 'JaxprTracer' at 0x7ffc102c05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8842700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01882507555200899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01882508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111380>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0104ae0; to 'JaxprTracer' at 0x7ffaf0107010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d915710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008443429864980341, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00844343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e72d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a4d60; to 'JaxprTracer' at 0x7ffab04a5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c659c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013354512547222697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01335451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3b10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0376200; to 'JaxprTracer' at 0x7ff9b03744f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81f11c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019331788650553936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01933179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b05a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa854d800; to 'JaxprTracer' at 0x7ffaa854e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x983d9620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02358257364533148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4810>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71190b830; to 'JaxprTracer' at 0x7ff71190aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33fc6f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02118019070445948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bcd50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dde90; to 'JaxprTracer' at 0x7ff713371cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4371260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022546740690904635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bc0d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505e97b0; to 'JaxprTracer' at 0x7ffc505e8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73cf1260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02174593599037491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0f60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c15e070; to 'JaxprTracer' at 0x7ffa3c15d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6535d030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02294476063929687, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70614ea0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa444baa20; to 'JaxprTracer' at 0x7ffb707087c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x345c9650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018019810416406008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01801981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145c70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d33d0; to 'JaxprTracer' at 0x7ffbb01d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2289b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022745755334313146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101108a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e3880; to 'JaxprTracer' at 0x7ff713f72ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3627b1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022075355959759783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4140>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01fe390; to 'JaxprTracer' at 0x7ffa4c6c15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5631d530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02557772940139179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02557773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a3130>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf009ff10; to 'JaxprTracer' at 0x7ffcf009fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d96d640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022689245212243657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e1640>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb034d940; to 'JaxprTracer' at 0x7ffbb034da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x956de0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02191507413713623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8200>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100cf880; to 'JaxprTracer' at 0x7ffc303039c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54482460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022787228724526085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062a2f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3016ae30; to 'JaxprTracer' at 0x7ffc3016bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a7c2240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021703194060724556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b05c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0378c70; to 'JaxprTracer' at 0x7ffbf037b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x452f27a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02410206422958152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c4744b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442bf560; to 'JaxprTracer' at 0x7ffa442bd1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d1ad390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016935026032861514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01693503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ee210>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b05ab9c0; to 'JaxprTracer' at 0x7ff7b05aac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x992726e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020007616706789605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02000762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d75f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae06b1080; to 'JaxprTracer' at 0x7ffae06b1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95682ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025334347124360227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02533435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d07455d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0239ee0; to 'JaxprTracer' at 0x7ffbd023aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x390db280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02462562634366023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407d560>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712125fd0; to 'JaxprTracer' at 0x7ff712126d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33383b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024122390522079522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063e880>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44716480; to 'JaxprTracer' at 0x7ffa447154e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c9f7580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024182257407011503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02418226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eaf90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193e7f0; to 'JaxprTracer' at 0x7ff71193f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f101370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02259970403807203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02fa950>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d036f0; to 'JaxprTracer' at 0x7ff713d01670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81d4ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024352697422340912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0243527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc90749720>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701926b0; to 'JaxprTracer' at 0x7ffa70192c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x787d3aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0013918056650584862
91, epoch_train_loss=0.0013918056650584862
Epoch 92
Epoch 92 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02158525389941422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057e3e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713503a10; to 'JaxprTracer' at 0x7ff713501080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa12a5a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01888856540376053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01888857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c61a8e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4059fe70; to 'JaxprTracer' at 0x7ffb4059e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x232d61a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008438753424243035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00843875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520630>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf01c2070; to 'JaxprTracer' at 0x7ffcf01c21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa1725e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013287062808546935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01328706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e510>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d7970; to 'JaxprTracer' at 0x7ff7128d4c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4031c700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01940887299357267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01940887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7690>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb034d760; to 'JaxprTracer' at 0x7ffbb034f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x550cf780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02356850638832897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02356851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474420>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9024efc0; to 'JaxprTracer' at 0x7ffc9024e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee598b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0211326597497113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b560>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0465da0; to 'JaxprTracer' at 0x7ffa3c3d4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41f0d800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022527758249232494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628570>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711e7c680; to 'JaxprTracer' at 0x7ff711e7d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c3c3a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021399303691531903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bf360>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0059030; to 'JaxprTracer' at 0x7ffcf00586d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x543d33a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023077468426599357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70251d70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc907de520; to 'JaxprTracer' at 0x7ffc907dd260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3951f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018044272274274322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01804427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9b057f7e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9036b920; to 'JaxprTracer' at 0x7ffb90369170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b0c0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02281015065867233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb482516e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d47db650; to 'JaxprTracer' at 0x7ff9d47d8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425feb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02221168819370022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb430>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b074afc0; to 'JaxprTracer' at 0x7ff9b074a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34fe86e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025569380529686523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02556938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706067b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90666070; to 'JaxprTracer' at 0x7ffc90665260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54bdd520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022798879675476072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f21e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0097fb0; to 'JaxprTracer' at 0x7ffc106d7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4951c9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022027603788776346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477db0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01690d0; to 'JaxprTracer' at 0x7ffa4c48bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11a381b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022797587596469264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50629470>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03cc770; to 'JaxprTracer' at 0x7ffbb03ce8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x412658a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02184144637158298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bee00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b0184590; to 'JaxprTracer' at 0x7ff7b05e71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f46de40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02400785396986374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102abcf0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70668400; to 'JaxprTracer' at 0x7ffc7066b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74c7fa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016756582661243347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01675658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0080>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0745c10; to 'JaxprTracer' at 0x7ffbf0744130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e8a690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020016650019601345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02001665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3b50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a95850; to 'JaxprTracer' at 0x7ff713a97650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x751f120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02533986992965449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02533987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9c40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae042e390; to 'JaxprTracer' at 0x7ffae042fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e7e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024435784766438158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a2bc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02eccc0; to 'JaxprTracer' at 0x7ffbb02ef7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x642fe460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024122847529253783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5d30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b527a0; to 'JaxprTracer' at 0x7ff711b500e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62432000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02402679302576558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e21a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f445fa10; to 'JaxprTracer' at 0x7ff9f445fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd6e950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022528342563009823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101108f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0601260; to 'JaxprTracer' at 0x7ff9b0602660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4481a7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02413016929129088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359cc70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40254ae0; to 'JaxprTracer' at 0x7ffb40254c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d014ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0012617143284061928
92, epoch_train_loss=0.0012617143284061928
Epoch 93
Epoch 93 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02128668146887577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c0490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd023b790; to 'JaxprTracer' at 0x7ffbd0238860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e71b360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01882350049881291, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0188235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e890>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d42b33d0; to 'JaxprTracer' at 0x7ff9d42b0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bed9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008406971125977726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00840697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90144370>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c0f6390; to 'JaxprTracer' at 0x7ffa3c0f6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94c24ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01304004781795048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01304005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e1c10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907d0360; to 'JaxprTracer' at 0x7ffb907d0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c0c7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019477443126857393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01947744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa800>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c161080; to 'JaxprTracer' at 0x7ffbf07aefc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa203f5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023278264224770227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02327826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2e00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70643ce0; to 'JaxprTracer' at 0x7ffa70641210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x231946c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020758388560595926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02075839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8f90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713371580; to 'JaxprTracer' at 0x7ff713372cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf92910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0221836201736804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f161b0; to 'JaxprTracer' at 0x7ff713f146d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30e5f570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02139080345983149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10166ba0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70709da0; to 'JaxprTracer' at 0x7ffb7070b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80ebc4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023054052988147472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6ccf20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf029b380; to 'JaxprTracer' at 0x7ffcf0298950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39664fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017981971739127012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01798197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa703c3020>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3dc950; to 'JaxprTracer' at 0x7ffa3c3dff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cb10440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02279644555364794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f840>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4799e0; to 'JaxprTracer' at 0x7ff70c47a6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551164c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022268821815000943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90145940>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9024c770; to 'JaxprTracer' at 0x7ffbd01fc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33535020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025237641680399995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02523764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e21c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7121ac5e0; to 'JaxprTracer' at 0x7ff7121af060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39f0bef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02282786274915813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a0370>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4865d670; to 'JaxprTracer' at 0x7ffb4865fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d88950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02215305861716636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0370>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71264d5d0; to 'JaxprTracer' at 0x7ffc303026b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94ddeaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022782292964852943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213830>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035f3d0; to 'JaxprTracer' at 0x7ffbd035fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4455b0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02187981893873314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d72e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90173ec0; to 'JaxprTracer' at 0x7ffb90173330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696b44c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02376835142625583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50628110>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab02f5260; to 'JaxprTracer' at 0x7ffab02f6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x604bfd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01654413803635141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01654414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b23a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0722160; to 'JaxprTracer' at 0x7ffc50678d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6430d5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01975285964664727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01975286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c474c00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0240bd0; to 'JaxprTracer' at 0x7ffcb0243ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a957e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025006533475880874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02500653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f06b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7045aed0; to 'JaxprTracer' at 0x7ffb7045b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99be1670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024348859730619468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02434886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605670>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8590590; to 'JaxprTracer' at 0x7ffaa85902c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96add130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02393471783815567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746ea0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d2890; to 'JaxprTracer' at 0x7ff9b05d35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8280cbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024002046174766308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407f530>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ede40; to 'JaxprTracer' at 0x7ffbb02efab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x732c1610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02252827529287146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063f3a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d00900; to 'JaxprTracer' at 0x7ff713d036a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4b5760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024084007282637352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc305232e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a7e94e0; to 'JaxprTracer' at 0x7ff70a7e9df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x652c2780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0013552223860700157
93, epoch_train_loss=0.0013552223860700157
Epoch 94
Epoch 94 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021476579415104592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02147658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d5c00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab071f650; to 'JaxprTracer' at 0x7ffab071ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a0d1950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01893444131963168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01893444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021d3e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7063a340; to 'JaxprTracer' at 0x7ffb70638ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x671df780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008504078664414754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00850408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049a860>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4dd8a0; to 'JaxprTracer' at 0x7ffa4c4df1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eded0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013190254533355646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01319025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d07ec590; to 'JaxprTracer' at 0x7ff7d07ee160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49121ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01959301392567069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01959301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70605eb0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb016a610; to 'JaxprTracer' at 0x7ffbb016a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d04f6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023468856815178903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02346886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1fb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9024fbf0; to 'JaxprTracer' at 0x7ffc9024e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x812b1b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020943336065850523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714203590>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0454a90; to 'JaxprTracer' at 0x7ffcd0455c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b903b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02236001484976166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714201910>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a4680; to 'JaxprTracer' at 0x7ffcb04a49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b1f220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021995503367378974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0219955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210b80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a5a4d0; to 'JaxprTracer' at 0x7ff713a59ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e120c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02318778891972766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71359c410>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d80c70; to 'JaxprTracer' at 0x7ff712d831f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa06500f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018129359842708657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01812936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d7fe0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505eb650; to 'JaxprTracer' at 0x7ffc505e8400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7efd20c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02302454534098421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02302455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd021f610>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902dd300; to 'JaxprTracer' at 0x7ffc902dc5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ccd26e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022429079244134703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504990e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b03a60; to 'JaxprTracer' at 0x7ffc1013a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15105f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02543886803707841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c4e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d4e50; to 'JaxprTracer' at 0x7ff9b0667e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x310ae830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022996893934140224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02299689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01efd70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3d2d40; to 'JaxprTracer' at 0x7ff70c3d1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771c99a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022305457098735944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02230546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c3bc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0715670; to 'JaxprTracer' at 0x7ffbd07171a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38464470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02307613710332607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7142011b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f415b880; to 'JaxprTracer' at 0x7ff7d07416c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e4f4540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02202827800962072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213b70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c0f5030; to 'JaxprTracer' at 0x7ffa3c0f5260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32acc370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024071533682522656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02407153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0ba0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0414ea0; to 'JaxprTracer' at 0x7ffb4007aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a030d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016859811834614498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01685981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5d90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001e90; to 'JaxprTracer' at 0x7ff713000270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84bc5110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01988480061758834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0198848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ac9940>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48274a40; to 'JaxprTracer' at 0x7ffb482776a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d39c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02519710737504679, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1680>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb062fd30; to 'JaxprTracer' at 0x7ffbf0379670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7555e2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02480767672787043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02480768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5180>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb48419850; to 'JaxprTracer' at 0x7ffcb0292570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cdf4d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024128511711322204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02412851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e0260>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d061a570; to 'JaxprTracer' at 0x7ffcf01c1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a83bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02447319016117425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02447319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112ce0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d477f0b0; to 'JaxprTracer' at 0x7ff9d477ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b4ca80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022897647742846867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02289765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146430>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407013a0; to 'JaxprTracer' at 0x7ffae068b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d4a1530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02457261594285747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02457262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7f60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87dfe20; to 'JaxprTracer' at 0x7ffaa87dede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f53780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015892699083618787
94, epoch_train_loss=0.0015892699083618787
Epoch 95
Epoch 95 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021373604595975895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9074a610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c123c90; to 'JaxprTracer' at 0x7ffa3c123d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9aaa9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018488917122640967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01848892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833c820>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf011a660; to 'JaxprTracer' at 0x7ffbf0118b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ffad30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008421037600449974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00842104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101115a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b07e3880; to 'JaxprTracer' at 0x7ff9b07e13a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76339500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013262245104175716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01326225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb7d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf03531a0; to 'JaxprTracer' at 0x7ffb7021df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x208f97c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019310741964347476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01931074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e2700>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0452fc0; to 'JaxprTracer' at 0x7ffcf04533d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x624a6d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023361610099083833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02336161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a9bb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40526660; to 'JaxprTracer' at 0x7ffb40524e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8208a540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02082720615772293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02082721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101661e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07925c0; to 'JaxprTracer' at 0x7ffab07910d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cc9da20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02219827215079431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049f210>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9036abb0; to 'JaxprTracer' at 0x7ffb9036bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b9f62e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020854633814560968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02085463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714202210>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0550e00; to 'JaxprTracer' at 0x7ff712b013f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85afc8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022732557442523553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706150e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fb3100; to 'JaxprTracer' at 0x7ff712fb3880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa770fcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018061770576235845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01806177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e8230>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae01154e0; to 'JaxprTracer' at 0x7ffcf0209440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1fa0360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022507773833278354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833d8e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0630e50; to 'JaxprTracer' at 0x7ff9b0633a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x442e55b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022135930161325167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10111420>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0245580; to 'JaxprTracer' at 0x7ffc30468d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ad2c4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02534430982071541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02534431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fa5c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072bd80; to 'JaxprTracer' at 0x7ff713cb1760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d66fea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02278350661555189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e23e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa6ac0; to 'JaxprTracer' at 0x7ff713fa5df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11ac0e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022017373586865344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102a8730>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3039a7f0; to 'JaxprTracer' at 0x7ffc30398f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b93a2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02250918831714946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d610>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025d300; to 'JaxprTracer' at 0x7ffcb025de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x972739f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02172731017041189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714200250>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4059e430; to 'JaxprTracer' at 0x7ffb4059cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8365bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023709658380985064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062b0a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf0053c40; to 'JaxprTracer' at 0x7ffcf0051300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cfdd1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016522125756366086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01652213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ef4a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb407bcb80; to 'JaxprTracer' at 0x7ffab0306bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e9156c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01978578355882603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01978578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3ff0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa445293a0; to 'JaxprTracer' at 0x7ffa4452ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73c49410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025103796288231048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706056c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90746890; to 'JaxprTracer' at 0x7ffc90745210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6382b910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024068221038088877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0744160>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119d3100; to 'JaxprTracer' at 0x7ff7119d1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41b903b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023974549103901496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e96a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713fa6750; to 'JaxprTracer' at 0x7ff713cd8ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d2d9780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02360745180968302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049afa0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0243dd0; to 'JaxprTracer' at 0x7ffbb0243380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a7bbf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022187398495906355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb48250eb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713558130; to 'JaxprTracer' at 0x7ff71355a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87d9fe60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023746761690095423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c618230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712380a90; to 'JaxprTracer' at 0x7ff70c1a78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5438e5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0017819765184029631
95, epoch_train_loss=0.0017819765184029631
Epoch 96
Epoch 96 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021773060053070566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90147a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd035ce00; to 'JaxprTracer' at 0x7ffbd035fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d9d020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01877222720901814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01877223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d4da0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06de480; to 'JaxprTracer' at 0x7ffaf06dc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ebff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008564245641853511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00856425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc5049acd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7065ccc0; to 'JaxprTracer' at 0x7ffa7065c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a3c40e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013557496628748372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0135575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e94b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40044090; to 'JaxprTracer' at 0x7ffb40047010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8b71c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0194511851635013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01945119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706079b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c101300; to 'JaxprTracer' at 0x7ffa3c1016c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc065d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023694482288473095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c0e20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a37e0; to 'JaxprTracer' at 0x7ff70c1a36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x673971f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02125428100639438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06be950>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71289b470; to 'JaxprTracer' at 0x7ff712898590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2ae17d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02260719162504112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bdbd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0457ba0; to 'JaxprTracer' at 0x7ffcd0455d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51cf5f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021685322761835307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4423fb50; to 'JaxprTracer' at 0x7ffa4423d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccce170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023018656691994287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90210ed0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905f4a90; to 'JaxprTracer' at 0x7ffb905f5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f1303f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018247143167716147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01824714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90146270>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905b7d80; to 'JaxprTracer' at 0x7ffb905b4e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d84eba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02282473582915866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0286380>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c413ec0; to 'JaxprTracer' at 0x7ffa4c4128e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88585150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02229359043045276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50498aa0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03d8ef0; to 'JaxprTracer' at 0x7ffbf03d8040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa82aac80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025722624762590577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02572262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7d0746640>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0665620; to 'JaxprTracer' at 0x7ff9b06654e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38018cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022953004334436134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f06e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0087f10; to 'JaxprTracer' at 0x7ffaf0086fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x333aed90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022170732287740528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c2170>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a23a60; to 'JaxprTracer' at 0x7ffb70720360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11a3ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02285990803087014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bd570>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303393f0; to 'JaxprTracer' at 0x7ffc30339da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ac7d900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021874239516761693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049c890>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07a0680; to 'JaxprTracer' at 0x7ffcb07a1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa705bde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02419374618388269, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1080>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0238900; to 'JaxprTracer' at 0x7ffbd0238450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d088e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01703190031422284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5350>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5067bab0; to 'JaxprTracer' at 0x7ffc50678680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c3df640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020104809979197703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02010481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70668220; to 'JaxprTracer' at 0x7ffc30484900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551ec00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02547391351542282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02547391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fb2b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa87241d0; to 'JaxprTracer' at 0x7ffaa87267f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4112ade0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02472465718232559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02472466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a7bb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704fc2c0; to 'JaxprTracer' at 0x7ffc704fc900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x805ee830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02430930424479733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0243093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101106c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a95cb0; to 'JaxprTracer' at 0x7ffa44529b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8936cac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024230134711283737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c307b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119d3830; to 'JaxprTracer' at 0x7ff9d42ed760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b7629f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0226484765246953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44e9f70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711bfcc70; to 'JaxprTracer' at 0x7ff711bff240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55b87430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024426925652593412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02442693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f8760>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7d0781f80; to 'JaxprTracer' at 0x7ff7d0781df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x534d3060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0015641969951853537
96, epoch_train_loss=0.0015641969951853537
Epoch 97
Epoch 97 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021515035483023335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02151504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e4900>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70713a10; to 'JaxprTracer' at 0x7ffb70710b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa11de6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018512051336832123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01851205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0337bb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa441321b0; to 'JaxprTracer' at 0x7ffa44130ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1368e160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008509526306498883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00850953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30520420>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713edfd30; to 'JaxprTracer' at 0x7ff713eddd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5f973c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013379886007492514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01337989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e670>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70722480; to 'JaxprTracer' at 0x7ffb70722750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x875470a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019300848277313907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01930085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10112490>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90715350; to 'JaxprTracer' at 0x7ffc90715f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x284be420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023422292238262313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486f8210>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900e3100; to 'JaxprTracer' at 0x7ffc900e36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e7f6cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02094677527584152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e50a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb40703330; to 'JaxprTracer' at 0x7ffb40701cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x621626b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022308728100282244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02230873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a06a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139eff10; to 'JaxprTracer' at 0x7ff7139ec950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b7ebd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02152972652589349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc9049d0e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417f970; to 'JaxprTracer' at 0x7ff71417c090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9571ab80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022731068205953508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c6cd200>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb032b010; to 'JaxprTracer' at 0x7ffbb0328450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f1ef5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01809531944642322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01809532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e7150>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712db6ca0; to 'JaxprTracer' at 0x7ff712db6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185c3db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022600269822027043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03377a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1073bc90; to 'JaxprTracer' at 0x7ffc1073b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c090bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022111931713937372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521be0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04a4270; to 'JaxprTracer' at 0x7ffab04a65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4468a770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025431459150400383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833fa40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701533d0; to 'JaxprTracer' at 0x7ffa70151210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c74cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02276222807725962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a5f50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c101e90; to 'JaxprTracer' at 0x7ffa3c1036f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6df8a400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022031179845815464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02203118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a1300>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06e2520; to 'JaxprTracer' at 0x7ffc304fcc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11a33070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022673145576288408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1a10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03fc630; to 'JaxprTracer' at 0x7ffaf03fe9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfb4ccb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021698280923326197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f41b3dd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0744e50; to 'JaxprTracer' at 0x7ffcb0746200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa48a0030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023943077515515193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4c477570>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036c180; to 'JaxprTracer' at 0x7ffbd0780db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5844e3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01684285546339623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01684286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d7790>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70174770; to 'JaxprTracer' at 0x7ffb70174090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e324f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019840441668592727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01984044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5062a920>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100bfe70; to 'JaxprTracer' at 0x7ffc100bdc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f747580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025172643799452495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02517264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b3670>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0721800; to 'JaxprTracer' at 0x7ffaf00844a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88da1760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024522007000840895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02452201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f3410>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b05d0680; to 'JaxprTracer' at 0x7ff9b05d0090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c48ecb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024061851612178713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ec470>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0242de0; to 'JaxprTracer' at 0x7ffcb0240e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6c285e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02402863132890491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407e2b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa442bf2e0; to 'JaxprTracer' at 0x7ffa442bf920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f0fc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022469932402462683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e98a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50678b80; to 'JaxprTracer' at 0x7ff7119d3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x734fa200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02424083674649225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02424084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9063de20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71308b510; to 'JaxprTracer' at 0x7ff71308bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa76416f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0013146613439248595
97, epoch_train_loss=0.0013146613439248595
Epoch 98
Epoch 98 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021463257843368562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706054b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a3a10; to 'JaxprTracer' at 0x7ff70c5a37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x270208c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018582800901692335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0185828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf05d6110>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0707740; to 'JaxprTracer' at 0x7ffbb0706c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb635c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008507514312581744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00850751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06eb880>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7065cd60; to 'JaxprTracer' at 0x7ffa7065f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99bed370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013255052814628602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01325505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c120>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71264cd10; to 'JaxprTracer' at 0x7ff71264cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51be3390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019301608623739263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01930161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301c1bf0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8119df0; to 'JaxprTracer' at 0x7ffaa8119d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28958b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023403452296415193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02340345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bec20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa80dede0; to 'JaxprTracer' at 0x7ffaa80dd850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa767680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020901993247729542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02090199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0774df0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d19e0; to 'JaxprTracer' at 0x7ffbb01d27f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31817fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022305054623240807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02230505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0455f80; to 'JaxprTracer' at 0x7ffcd0456340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x107078e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021388793146218343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02138879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a2d80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a9a610; to 'JaxprTracer' at 0x7ff713a99530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f6e0520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02285197509882146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb02f88b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb400b6d40; to 'JaxprTracer' at 0x7ffb400b49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6280baf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018018413296855527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01801841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90213320>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132d5da0; to 'JaxprTracer' at 0x7ff7132d7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7249e170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02265164543445401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf0285c20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b074a0c0; to 'JaxprTracer' at 0x7ff9b074aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x437ff2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022140630278065575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9960>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712bb6980; to 'JaxprTracer' at 0x7ff712bb6890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93f03f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025445104357953507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0254451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01efb00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106d73d0; to 'JaxprTracer' at 0x7ffc106d5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75887fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022741492710451727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b2530>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb4057fd80; to 'JaxprTracer' at 0x7ffa4c4477e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55c9a740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022035796998735552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bee30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505bfba0; to 'JaxprTracer' at 0x7ffb505be980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x780fd600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022674140590998263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0775f10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9b0082a20; to 'JaxprTracer' at 0x7ff9b0083dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x706f8010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021741326360424616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a0900>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71193e250; to 'JaxprTracer' at 0x7ff71193c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ccd4680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02391505166070986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702a10a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4e7600; to 'JaxprTracer' at 0x7ffa4c4e4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x679d3110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016730218422854975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01673022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e3c90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8592700; to 'JaxprTracer' at 0x7ffae042d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x681c04f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01985609100539051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01985609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa3c0e32c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c52ed0; to 'JaxprTracer' at 0x7ff713c51fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70be47d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02519252268542816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a42f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa44242930; to 'JaxprTracer' at 0x7ffa442433d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84bc9a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024427680216331342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02442768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711c32f50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711925620; to 'JaxprTracer' at 0x7ff711927970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b7f71a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024027269489048566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833e530>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9062f010; to 'JaxprTracer' at 0x7ffc9062ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e22d190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02395579275158703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d44ea150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8796700; to 'JaxprTracer' at 0x7ffaa8794770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42589c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02242429235126443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02b1930>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffae068b970; to 'JaxprTracer' at 0x7ffae068b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x467ff290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0241296033214872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713aca4e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7b01d4680; to 'JaxprTracer' at 0x7ff7b01d5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2c9fb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0012522503232756542
98, epoch_train_loss=0.0012522503232756542
Epoch 99
Epoch 99 :: Batch 1/1
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021664602140542878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30522020>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07204a0; to 'JaxprTracer' at 0x7ffbf07203b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f750c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.0215974633328226
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018984379094048334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01898438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e68f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c3df6a0; to 'JaxprTracer' at 0x7ffa3c3dfce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa272f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.018771968176869464
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008595844540349161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00859584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf0334ac0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c161170; to 'JaxprTracer' at 0x7ffa3c1628e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6569260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.008466749468441413
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013230887234810113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01323089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833d7a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70720a90; to 'JaxprTracer' at 0x7ffb70720360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e6696c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.013480201438505911
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019513783306251652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01951378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10113db0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c4455d0; to 'JaxprTracer' at 0x7ffa4c4443b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b9c22e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.01917731784845747
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023646636704965827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02364664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb486fab60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304dad40; to 'JaxprTracer' at 0x7ff711ed6980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d0a7810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.02354338020586407
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02120128424708524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7410>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904112b0; to 'JaxprTracer' at 0x7ffc904130b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15160480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.020917534542386092
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022611009923865315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a1420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa85c8ef0; to 'JaxprTracer' at 0x7ffaa85c9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95ef4270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.022383926734127823
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02179463743753952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ab920>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7119b54e0; to 'JaxprTracer' at 0x7ff7119b78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1076a610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.021212925548649123
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02333819689940944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0233382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70616ac0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07131a0; to 'JaxprTracer' at 0x7ffcb0713ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e10b820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.022895487217695718
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018078471247477648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01807847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30521570>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0329bc0; to 'JaxprTracer' at 0x7ff712db6660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x351831d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.017431270102573726
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02307447565216195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa447e5780>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50437dd0; to 'JaxprTracer' at 0x7ffb50436ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33edd6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.02289021496356398
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02242399671102429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf03352b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712898180; to 'JaxprTracer' at 0x7ffc505e94e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e8958b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.022767543105730724
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025742801616616996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0257428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa833f8c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128d5580; to 'JaxprTracer' at 0x7ff7128d7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x468d2d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.02531416903223795
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02294106537657598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05a48c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3c1027f0; to 'JaxprTracer' at 0x7ffa3c101da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa68291f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.022761249105293358
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022241161367186076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02224116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7125e0ab0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70063a10; to 'JaxprTracer' at 0x7ffc70063470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa29b96d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.022175843788845868
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023054135003311514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb402a11d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf052b5b0; to 'JaxprTracer' at 0x7ffbf0529710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf1f8270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.022890250718588627
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022050417561360076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706067d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5027b600; to 'JaxprTracer' at 0x7ffc50279ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d10fac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.021913289279012163
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024233449088731086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0776690>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01050d0; to 'JaxprTracer' at 0x7ffaf0104b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a324f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.023845254181983005
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016903114158078783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01690311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06d4430>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04a7240; to 'JaxprTracer' at 0x7ffcb04a6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79ffb940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.016692439036706492
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020154162934372534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02015416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffae06bcc80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd022aed0; to 'JaxprTracer' at 0x7ffbd02294e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d7194d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.019992249981082625
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025512315982620524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02551232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7b03b0b70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a2980; to 'JaxprTracer' at 0x7ff70c5a3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30656960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.025220525743551242
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024768624799957947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02476862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb01ed090>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b57970; to 'JaxprTracer' at 0x7ff711b56a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49694be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.02473561365336351
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024215460005071868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02421546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307f1810>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4c258d60; to 'JaxprTracer' at 0x7ffa4c25a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c75f220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.023824274306913876
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024383527350237914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa4407c0a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7036f560; to 'JaxprTracer' at 0x7ffbd0783b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fe79830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.024344366305461506
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02279678061513924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab06e9280>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d32ac0; to 'JaxprTracer' at 0x7ff712d33e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54df7450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.022160471752565858
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02445961057347621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc50499a80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712665da0; to 'JaxprTracer' at 0x7ff7126667a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x724a8040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.024441582530723805
Batch Loss = 0.0016195417024437555
99, epoch_train_loss=0.0016195417024437555

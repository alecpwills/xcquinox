no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/condabin/conda
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/conda
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/conda-env
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/activate
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/deactivate
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/profile.d/conda.sh
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/fish/conf.d/conda.fish
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/shell/condabin/Conda.psm1
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/shell/condabin/conda-hook.ps1
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/lib/python3.9/site-packages/xontrib/conda.xsh
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/profile.d/conda.csh
no change     /gpfs/home/awills/.bashrc
No action taken.
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d8b80> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d8b80> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffe380d8b80> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380d97b0> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380da0b0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380d8340> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380db460> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380da2c0> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380da980> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380da770> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe380db850> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe380daa40> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe380d9330> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe380d9c90> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe380dba60> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe380d8ee0> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe380da230> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe380dae30> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b4460> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe381b4b80> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b7850> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b7880> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b5450> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b7640> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe381b5f90> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe381b72b0> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe381b5cf0> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffe381b69e0> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe381b55d0> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d97b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d97b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-0.00051022 -0.00019156 -0.00051334 ... -0.02830887 -0.02830887
 -0.02830887] = ,SCAN
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046674  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380da0b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380da0b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc with xc_func = [-3.60081838e-04 -1.08775305e-04 -1.31917160e-05 ... -2.74817476e-02
 -2.74817476e-02 -2.74817476e-02] = ,SCAN
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597092, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025284, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.499812984008539  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d8340> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d8340> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc with xc_func = [-4.92637321e-09 -1.31700808e-07 -9.61527370e-06 ... -7.42461648e-16
 -7.42461648e-16 -7.42461648e-16] = ,SCAN
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627842  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380db460> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380db460> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc with xc_func = [-5.31884219e-04 -2.81911891e-04 -2.81911891e-04 ... -1.27154711e-05
 -2.64861768e-02 -2.64861768e-02] = ,SCAN
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033780917794  <S^2> = 2.002745  2S+1 = 3.0018295
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380da2c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380da2c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc with xc_func = [-1.45796951e-04 -2.66059696e-05 -1.39872802e-06 ... -2.76158569e-02
 -2.76158569e-02 -2.76158569e-02] = ,SCAN
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.72666426e-13, dtype=float64), Array(148.53261304, dtype=float64))
rho0_b = (Array(1.87981368e-15, dtype=float64), Array(148.54627799, dtype=float64))
gamma_a = (Array(5.88676691e-24, dtype=float64), Array(4945146.01160136, dtype=float64))
gamma_b = (Array(1.42033156e-28, dtype=float64), Array(4956868.60068602, dtype=float64))
gamma_ab = (Array(1.68970662e-26, dtype=float64), Array(4950938.53838039, dtype=float64))
tau_a = (Array(1.10371988e-12, dtype=float64), Array(4773.97058655, dtype=float64))
tau_b = (Array(1.58788103e-14, dtype=float64), Array(4747.12455415, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577123467  <S^2> = 0.75161941  2S+1 = 2.0016188
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380da980> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380da980> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc with xc_func = [-1.19621148e-04 -2.69174123e-04 -8.74569509e-05 ... -2.84484400e-02
 -2.84484400e-02 -2.84484400e-02] = ,SCAN
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.25869255e-11, dtype=float64), Array(1561.9047126, dtype=float64))
rho0_b = (Array(7.59693423e-13, dtype=float64), Array(1561.95787144, dtype=float64))
gamma_a = (Array(1.30591239e-20, dtype=float64), Array(2.7317145e+09, dtype=float64))
gamma_b = (Array(3.41957195e-24, dtype=float64), Array(2.73216753e+09, dtype=float64))
gamma_ab = (Array(-1.13506552e-17, dtype=float64), Array(2.73193772e+09, dtype=float64))
tau_a = (Array(3.15330519e-11, dtype=float64), Array(239540.94871109, dtype=float64))
tau_b = (Array(7.20499907e-13, dtype=float64), Array(239371.79177272, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226561015168  <S^2> = 0.75226414  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380da770> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380da770> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc with xc_func = [-2.33538787e-03 -1.45056538e-03 -7.33174438e-04 ... -2.60996658e-05
 -2.68426410e-04 -2.24003388e-05] = ,SCAN
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.00654278e-12, dtype=float64), Array(679.40140789, dtype=float64))
rho0_b = (Array(5.90276281e-12, dtype=float64), Array(679.49865998, dtype=float64))
gamma_a = (Array(1.00332059e-22, dtype=float64), Array(2.6617071e+08, dtype=float64))
gamma_b = (Array(9.75230619e-23, dtype=float64), Array(2.66254716e+08, dtype=float64))
gamma_ab = (Array(1.08760202e-22, dtype=float64), Array(2.66212709e+08, dtype=float64))
tau_a = (Array(3.72179827e-12, dtype=float64), Array(56081.37757542, dtype=float64))
tau_b = (Array(2.09727309e-12, dtype=float64), Array(56073.23125165, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.938786818865  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380db850> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380db850> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-0.00037576 -0.00017728 -0.000229   ... -0.02838402 -0.02838402
 -0.02838402] = ,SCAN
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.90761098e-12, dtype=float64), Array(1294.97547004, dtype=float64))
rho0_b = (Array(9.50339698e-15, dtype=float64), Array(1295.10901248, dtype=float64))
gamma_a = (Array(1.96884472e-23, dtype=float64), Array(1.63838345e+09, dtype=float64))
gamma_b = (Array(5.13733548e-28, dtype=float64), Array(1.63892023e+09, dtype=float64))
gamma_ab = (Array(-1.00394676e-15, dtype=float64), Array(1.63865068e+09, dtype=float64))
tau_a = (Array(1.29970014e-12, dtype=float64), Array(172116.85462084, dtype=float64))
tau_b = (Array(9.87522368e-15, dtype=float64), Array(171895.27040642, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182912  <S^2> = 0  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380daa40> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380daa40> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc with xc_func = [-1.43725660e-05 -1.02204687e-06 -4.05575842e-05 ... -2.36278434e-02
 -2.36278434e-02 -2.36278434e-02] = ,SCAN
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 1.4210855e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d9330> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d9330> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc with xc_func = [-2.89629699e-05 -2.76172354e-04 -7.59017288e-05 ... -7.34654212e-06
 -7.34654212e-06 -2.89629699e-05] = ,SCAN
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.64475818, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933791, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204804, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850636, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = 3.5527137e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d9c90> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d9c90> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc with xc_func = [-0.00043469 -0.00024024 -0.00035532 ... -0.00047537 -0.03728133
 -0.03728133] = ,SCAN
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.1507467, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.15767305, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420987, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.3377924465129  <S^2> = 4.0073722e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380dba60> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380dba60> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc with xc_func = [-9.02468888e-05 -7.92694658e-06 -9.80568469e-06 ... -4.33714150e-02
 -4.33714150e-02 -4.33714150e-02] = ,SCAN
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746183, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036922, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391552, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026184e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322844  <S^2> = 1.5987212e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380d8ee0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380d8ee0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc with xc_func = [-7.48187338e-05 -6.19475249e-05 -2.61742784e-04 ... -8.70042314e-07
 -2.73391097e-02 -2.73391097e-02] = ,SCAN
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35241552, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.35050467, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.3514601, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601498, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601227, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.005608888959  <S^2> = 4.9737992e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380da230> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380da230> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc with xc_func = [-0.00051559 -0.00027432 -0.00088583 ... -0.00027432 -0.04174728
 -0.04174728] = ,SCAN
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.2079227e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe380dae30> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe380dae30> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc with xc_func = [-5.53951178e-05 -5.93507199e-06 -3.10072916e-04 ... -5.94325581e-02
 -5.94325581e-02 -5.94325581e-02] = ,SCAN
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996826, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158325, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577576, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.21489440264  <S^2> = 1.0018598  2S+1 = 2.2377308
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b4460> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b4460> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc with xc_func = [-1.52253347e-04 -2.88141597e-05 -1.57892498e-06 ... -4.22396685e-02
 -4.22396685e-02 -4.22396685e-02] = ,SCAN
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.72974974e-13, dtype=float64), Array(148.29947154, dtype=float64))
rho0_b = (Array(1.72974789e-13, dtype=float64), Array(148.29947154, dtype=float64))
gamma_a = (Array(4.00340854e-25, dtype=float64), Array(4951708.91430542, dtype=float64))
gamma_b = (Array(4.00340013e-25, dtype=float64), Array(4951708.91429647, dtype=float64))
gamma_ab = (Array(2.13966349e-24, dtype=float64), Array(4951708.91430094, dtype=float64))
tau_a = (Array(2.97616964e-13, dtype=float64), Array(4771.62331197, dtype=float64))
tau_b = (Array(2.97616673e-13, dtype=float64), Array(4771.62331196, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346373  <S^2> = 1.2434498e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b4b80> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b4b80> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc with xc_func = [-2.72190712e-05 -2.72190712e-05 -2.84904833e-04 ... -1.08108260e-05
 -1.03072478e-05 -1.03072478e-05] = ,SCAN
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931846e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.01492366, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01408614, dtype=float64))
gamma_ab = (Array(1.65925442e-22, dtype=float64), Array(440696.0145049, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.2990185, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901761, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.5991657e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b7850> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b7850> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc with xc_func = [-0.00015688 -0.00024669 -0.00068269 ... -0.03791166 -0.03791166
 -0.03791166] = ,SCAN
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683903, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.34129878, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.3440689, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374077  <S^2> = 7.1054274e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b7880> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b7880> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc with xc_func = [-7.28500681e-05 -5.65091132e-06 -7.37932132e-06 ... -4.76689214e-02
 -4.76689214e-02 -4.76689214e-02] = ,SCAN
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018922  <S^2> = 7.8159701e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b5450> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b5450> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc with xc_func = [-0.0003863  -0.00040095 -0.00040095 ... -0.0213199  -0.0213199
 -0.0213199 ] = ,SCAN
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.5866419e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b7640> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b7640> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc with xc_func = [-0.00088473 -0.00088473 -0.00116894 ... -0.00088473 -0.00088473
 -0.00116894] = ,SCAN
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.6558497, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498188, dtype=float64))
gamma_ab = (Array(6.90080201e-19, dtype=float64), Array(74474467.54541579, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845814  <S^2> = 8.2067686e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b5f90> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b5f90> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc with xc_func = [-4.91408540e-05 -1.46971271e-04 -1.08734417e-03 ... -2.81566369e-02
 -2.81566369e-02 -2.81566369e-02] = ,SCAN
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469576  <S^2> = 2.5382363e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b72b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b72b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc with xc_func = [-4.39373335e-04 -1.31641332e-04 -1.15950750e-05 ... -7.32416564e-02
 -7.32416564e-02 -7.32416564e-02] = ,SCAN
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.565335868078  <S^2> = 1.0034705  2S+1 = 2.2391699
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b5cf0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b5cf0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc with xc_func = [-4.84673444e-05 -7.80551684e-05 -7.80531039e-05 ... -2.92531323e-02
 -2.92531323e-02 -2.92531323e-02] = ,SCAN
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.40590832e-12, dtype=float64), Array(856.05048585, dtype=float64))
rho0_b = (Array(8.40590925e-12, dtype=float64), Array(856.05048586, dtype=float64))
gamma_a = (Array(2.86121862e-22, dtype=float64), Array(5.06808646e+08, dtype=float64))
gamma_b = (Array(2.86121926e-22, dtype=float64), Array(5.06808646e+08, dtype=float64))
gamma_ab = (Array(2.93942887e-22, dtype=float64), Array(5.06808646e+08, dtype=float64))
tau_a = (Array(4.27823828e-12, dtype=float64), Array(79367.69532443, dtype=float64))
tau_b = (Array(4.27823876e-12, dtype=float64), Array(79367.69532326, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864077  <S^2> = 3.1885605e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b69e0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b69e0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc with xc_func = [-2.56165538e-04 -7.34744214e-05 -5.30574304e-06 ... -7.93995702e-06
 -7.93995702e-06 -7.93995702e-06] = ,SCAN
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271682, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483504  <S^2> = 6.1963767e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe381b55d0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe381b55d0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc with xc_func = [-2.28290753e-04 -1.41305449e-05 -6.13700492e-05 ... -2.47993463e-02
 -2.47993463e-02 -2.47993463e-02] = ,SCAN
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437819  <S^2> = 1.3153922e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Correlation contribution only
,SCAN
no spin scaling
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc with xc_func = [-2.45512011e-04 -7.12775692e-05 -5.48666345e-06 ... -6.02613084e-06
 -6.02613084e-06 -6.02613084e-06] = ,SCAN
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.011782482583459004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01178248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90574440>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd90583010; to 'JaxprTracer' at 0x7ffd90582c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31657190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.015358633418491297
Epoch 0 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.034738825326731435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03473883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67a110>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc529800; to 'JaxprTracer' at 0x7ffdcc528b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa330bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.03052860863899522
Epoch 0 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009796776205223803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00979678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc6795a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c10d120; to 'JaxprTracer' at 0x7ffd9c10d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bd19470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.011030240478753985
Epoch 0 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.015601079452261114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01560108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67abe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc36b560; to 'JaxprTracer' at 0x7ffdcc3685e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37cf8c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.009750889590993952
Epoch 0 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.014139941225546205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01413994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b160>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc528a40; to 'JaxprTracer' at 0x7ffd9c2de5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dc2980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.009225856696688383
Epoch 0 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.016891531110525427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01689153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67a3b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2ab920; to 'JaxprTracer' at 0x7ffd906784a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbb0210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.011988915348822005
Epoch 0 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.03316993542180099, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03316994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67bee0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd90678d10; to 'JaxprTracer' at 0x7ffd9067bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33bd2300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.029687780164728342
Epoch 0 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.018878016448687016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01887802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc6787c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd900ea390; to 'JaxprTracer' at 0x7ffd900e8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33959f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.009358534065439452
Epoch 0 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.017593943600744528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01759394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67aa80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42a3560; to 'JaxprTracer' at 0x7ffdcc2ae660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0cdac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.004028856096123785
Epoch 0 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02174638178434435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc679e60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc306520; to 'JaxprTracer' at 0x7ffdd42e9670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36b49a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.012493647695766608
Epoch 0 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018930776823855522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01893078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67a180>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc368cc0; to 'JaxprTracer' at 0x7ffdd43310d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3209bd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.009464317028756756
Epoch 0 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01979646465917601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc679eb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44fe6b0; to 'JaxprTracer' at 0x7ffdd44fec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x451ce90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.0107743209102168
Epoch 0 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020194622594834802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02019462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc679c90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc70eac0; to 'JaxprTracer' at 0x7ffdcc70e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d7c7ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.011382745654466083
Epoch 0 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.018163474540045996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01816347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b3b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42a2f70; to 'JaxprTracer' at 0x7ffdd42a1800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x335fb950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.011773319314334632
Epoch 0 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021078874513581876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b220>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2a9850; to 'JaxprTracer' at 0x7ffd903f4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ed8660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.009035992451198174
Epoch 0 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020694211486354544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b330>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c10ed90; to 'JaxprTracer' at 0x7ffd9c10f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45e8df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.00855810900763114
Epoch 0 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02135553367957412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67aae0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44ac810; to 'JaxprTracer' at 0x7ffdd44ad940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xff25870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.006792831314292277
Epoch 0 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02138235519348571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02138236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b8a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd406cbd0; to 'JaxprTracer' at 0x7ffdd406c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b949280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.007769187260974816
Epoch 0 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.017747974567223983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01774797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67add0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c326a20; to 'JaxprTracer' at 0x7ffe1c324270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2907cad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.009652266049981052
Epoch 0 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01699683330589219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc679c10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd906fcfe0; to 'JaxprTracer' at 0x7ffd906fdda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa260b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.006152530722787175
Epoch 0 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018960466050425725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01896047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc678310>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd900e8950; to 'JaxprTracer' at 0x7ffd900eb420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x307a9e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.011947111556400622
Epoch 0 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.015685440550043707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01568544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc6781f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c4af8d0; to 'JaxprTracer' at 0x7ffe1c4af100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x664eb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.013340289256411834
Epoch 0 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.01704236817559773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01704237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67a3b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c7482c0; to 'JaxprTracer' at 0x7ffe1c74a2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37185100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.008865161924796734
Epoch 0 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023097745507771578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02309775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc678ee0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc670f90; to 'JaxprTracer' at 0x7ffdcc672020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37b90640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.01170938732031347
Epoch 0 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019912145840782533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01991215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67baf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c6898a0; to 'JaxprTracer' at 0x7ffe1c688680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e724720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.004639166444817336
Epoch 0 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020501698486743183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0205017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc678300>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc4b22a0; to 'JaxprTracer' at 0x7ffd9c10ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5441b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.005424449473265426
Epoch 0 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.018814625294703888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01881463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc678ea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c129170; to 'JaxprTracer' at 0x7ffe1c12b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356eb150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.005972772074169467
0, epoch_train_loss=0.29670591995961676
Epoch 1
Epoch 1 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02074239222943278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02074239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc6798f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c6adfd0; to 'JaxprTracer' at 0x7ffe1c6acb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd8ed610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.01199846841866261
Epoch 1 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020937988536100845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02093799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c306910>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe384c7880; to 'JaxprTracer' at 0x7ffe384c60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10dbc2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.010382346657066437
Epoch 1 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006625788897003539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00662579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90575d00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c7f7ba0; to 'JaxprTracer' at 0x7ffb6c7f62f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a702650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007495987551604053
Epoch 1 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011022606333313409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01102261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c23b440>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6478bd80; to 'JaxprTracer' at 0x7ffb6478b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b173a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004781382358329487
Epoch 1 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.013672058888587774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01367206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb144e72e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb14349e90; to 'JaxprTracer' at 0x7ffb14349a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ced480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.008917872458450923
Epoch 1 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.011671069287166925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01167107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac12a3690>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac10be200; to 'JaxprTracer' at 0x7ffac10bddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a4066d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.015045278991008626
Epoch 1 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.01226914393799945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01226914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac05631f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac03bd260; to 'JaxprTracer' at 0x7ffac03bd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f285a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.012507578186151684
Epoch 1 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.016675793656144276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01667579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac044d190>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0176f70; to 'JaxprTracer' at 0x7ffac0176f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586dd910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.009899120126895984
Epoch 1 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.011859992245402873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01185999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fe520>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabac8c70; to 'JaxprTracer' at 0x7ffaabac8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c734340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.009728117340761398
Epoch 1 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.024959722336286468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02495972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44fa270>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaaf5dd00; to 'JaxprTracer' at 0x7ffaaaf5efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6066afa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.011360271706563608
Epoch 1 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.02483306883679117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02483307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c731bf0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa700090; to 'JaxprTracer' at 0x7ffaaa7004f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6075ad30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.01646816346616199
Epoch 1 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02321614346609791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c6b2390>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ba8cc0; to 'JaxprTracer' at 0x7ffaa9ba8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6957df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.008780173513922003
Epoch 1 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023742776827394913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e29d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa93090d0; to 'JaxprTracer' at 0x7ffaa9308f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x672094d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.010398796326982346
Epoch 1 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03291094679885461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03291095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb143da5f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8ad2390; to 'JaxprTracer' at 0x7ffaa8ad3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6722da90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.03346630276527085
Epoch 1 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02396510915505415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396511, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7e080>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bf371a0; to 'JaxprTracer' at 0x7ffa8bf37100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68d4d4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.010103566546563867
Epoch 1 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022969901901646928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac044dac0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b6cffb0; to 'JaxprTracer' at 0x7ffa8b6cff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x688356f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.008188477429504452
Epoch 1 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021943227379014444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaba94ef0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8aea14e0; to 'JaxprTracer' at 0x7ffa8aea1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e33f4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0058241018131121244
Epoch 1 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023720046513688326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fa770>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8a3518f0; to 'JaxprTracer' at 0x7ffa8a351760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb40060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.007628404094646624
Epoch 1 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02371721379380718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa4483f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89df7dd0; to 'JaxprTracer' at 0x7ffa89df5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a700310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.007863026269664735
Epoch 1 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01735875192973822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01735875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa9e89f50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88f77060; to 'JaxprTracer' at 0x7ffa88f76ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70e910e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.005925281201720096
Epoch 1 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025107235631623252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa95f3560>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa886eb3d0; to 'JaxprTracer' at 0x7ffa886eb510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75b14400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.009763225646299764
Epoch 1 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024474296553646628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0244743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8ac9420>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbe13790; to 'JaxprTracer' at 0x7ff9fbe138d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73ed0640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.009033139227620345
Epoch 1 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02079746228125648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa82571c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb583e70; to 'JaxprTracer' at 0x7ff9fb583ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x791ba1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.006347695761293256
Epoch 1 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.027075274816157856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02707527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad989f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faa74d60; to 'JaxprTracer' at 0x7ff9faa74bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6104fe50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.011294801048389041
Epoch 1 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019055461135606813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01905546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae46210>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa21e3e0; to 'JaxprTracer' at 0x7ff9fa21e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d94a530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.004283761224900335
Epoch 1 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01960360771983699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a60f5a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9fd0770; to 'JaxprTracer' at 0x7ff9f99df650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b0a3ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.004591492647108379
Epoch 1 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02053784861435977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa89aed090>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c4a390; to 'JaxprTracer' at 0x7ff9f8c4bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d67d3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.00460463082429734
1, epoch_train_loss=0.26668146360295236
Epoch 2
Epoch 2 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.025904730792743434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02590473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae444d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa4f3150; to 'JaxprTracer' at 0x7ff9fa4f2c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aa8660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.009761495539455675
Epoch 2 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02197076973490102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb43f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f91d0950; to 'JaxprTracer' at 0x7ff9f91d3c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68459090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.010785877617691519
Epoch 2 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0060988849511408524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00609888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0562d80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88f4a9d0; to 'JaxprTracer' at 0x7ffa88f48540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70f29450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.006837209209725928
Epoch 2 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01186106953858545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01186107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c730900>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89dd2480; to 'JaxprTracer' at 0x7ffa89dd0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cbdc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004521288609449877
Epoch 2 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.014558579462810247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01455858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6dec90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b422430; to 'JaxprTracer' at 0x7ffa8b421170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x652cae10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.006570232111205758
Epoch 2 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01880174534617292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01880175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fbc80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa886acf0; to 'JaxprTracer' at 0x7ffaa886bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6df69d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0077632010347520415
Epoch 2 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02394209192157956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43c240>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9906a70; to 'JaxprTracer' at 0x7ffaa99068e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a6ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.008686264621635017
Epoch 2 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02615158427037762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02615158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7f7a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa98ccea0; to 'JaxprTracer' at 0x7ffaa98cdf80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f345b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.007822630824171306
Epoch 2 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01497247656371475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01497248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e1850>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa7027a0; to 'JaxprTracer' at 0x7ffaaa1f0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7799c100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0033637117380799788
Epoch 2 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02284258146910769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8acbff0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab22b100; to 'JaxprTracer' at 0x7ffaab2284a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6db9e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.0045172702365994955
Epoch 2 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01600802261822444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01600802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67bf60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac059ade0; to 'JaxprTracer' at 0x7ffac059a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d42d610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0038491276023582843
Epoch 2 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.018014381097332388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01801438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0561b60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c4afc40; to 'JaxprTracer' at 0x7ffe1c4ae5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5789ee30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.004590247061121569
Epoch 2 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.01923709134366433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01923709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c733bc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac09d4590; to 'JaxprTracer' at 0x7ffac09d6480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5c3be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.004654457474739529
Epoch 2 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024014733273773597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2ff610>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac14b1800; to 'JaxprTracer' at 0x7ffac14b2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33e74850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.008203134169794202
Epoch 2 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02513105753609274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa82559f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb641e86d0; to 'JaxprTracer' at 0x7ffb641eb6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50689030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.006154752680350545
Epoch 2 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022454734020374404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7f6a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb647888b0; to 'JaxprTracer' at 0x7ffb6478b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c751bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0038833816971202877
Epoch 2 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.01927648115206861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01927648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972ddb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c787600; to 'JaxprTracer' at 0x7ffb6c735a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79b2d130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.002626612335964279
Epoch 2 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.018738238107690625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01873824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd905756e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd905b7ec0; to 'JaxprTracer' at 0x7ffd905b6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0f3f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.004943815148063946
Epoch 2 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.019732867122831503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f46a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd901465c0; to 'JaxprTracer' at 0x7ffd90147bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51ec1b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.006858971324172448
Epoch 2 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01765735695998729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01765736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c21f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe383c3100; to 'JaxprTracer' at 0x7ffe383c3060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a3770d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.0062984392358037536
Epoch 2 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02492299455376455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02492299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa95f24c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc52ba60; to 'JaxprTracer' at 0x7ffdcc529df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31ead740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.008028847414392314
Epoch 2 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.023602636123679143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02360264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae656f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c53d260; to 'JaxprTracer' at 0x7ffe2c53cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43991090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.005458439263490305
Epoch 2 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.021523901124007382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f942f490>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c051530; to 'JaxprTracer' at 0x7ffe2c050680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57786cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.003588494624481456
Epoch 2 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026010015465636666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02601002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8adcc60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89d996c0; to 'JaxprTracer' at 0x7ffa89d9a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57d548f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.005724398384729639
Epoch 2 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019683204456574645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0196832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8552460>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb64246e80; to 'JaxprTracer' at 0x7ffb64246cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b098a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0034307504101997867
Epoch 2 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.018794226403590887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01879423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa9bbf840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac01fd260; to 'JaxprTracer' at 0x7ffac171c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x477f7100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.003321784911428314
Epoch 2 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.019444302007190464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0194443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edd330>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab898590; to 'JaxprTracer' at 0x7ffaab89a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e85ece0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.003114526134054445
2, epoch_train_loss=0.15535936141503165
Epoch 3
Epoch 3 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022668917748783567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae655c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb8648b0; to 'JaxprTracer' at 0x7ff9fb866fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfd0120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.00795319204823579
Epoch 3 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018916746088236524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01891675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972fbb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c53e750; to 'JaxprTracer' at 0x7ffe2c53fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x432239d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.008396574050245428
Epoch 3 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006395781133274138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00639578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad98dd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c711a80; to 'JaxprTracer' at 0x7ffe2c711080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f824300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.0073465900196247325
Epoch 3 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010998145403301018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01099815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fac10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba80131f0; to 'JaxprTracer' at 0x7ffba8040540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x603bc5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.0037680766023453134
Epoch 3 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01395939142097848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01395939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c306f30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0862a0; to 'JaxprTracer' at 0x7ffe2c087060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36db6500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.00634003555302736
Epoch 3 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.018137304940362472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0181373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac17872f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb144ebe20; to 'JaxprTracer' at 0x7ffb1454c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e19e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.008219135798753554
Epoch 3 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.024339377306615614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02433938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44bcf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0805710; to 'JaxprTracer' at 0x7ffac0805d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e43b510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.008859511650154563
Epoch 3 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.025894512639673864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02589451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa4498c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c2bba60; to 'JaxprTracer' at 0x7ffe1c2b8e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e925ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.006860557232415983
Epoch 3 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.018520069507970242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01852007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9fa6950>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac03be8e0; to 'JaxprTracer' at 0x7ffac03be430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5b4b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.005241230300319642
Epoch 3 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022438617998893177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02243862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c0e80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab4af830; to 'JaxprTracer' at 0x7ffaab4ace50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42cc1200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.0034627226531014285
Epoch 3 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016601346700220888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01660135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7e070>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa6cb920; to 'JaxprTracer' at 0x7ffaab037330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80732a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0039853124806453555
Epoch 3 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01712880718371603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01712881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43f1f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9e28a40; to 'JaxprTracer' at 0x7ffaa9e2b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13bf1260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.005133434295917786
Epoch 3 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.018269657551419054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01826966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fc0d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9680ae0; to 'JaxprTracer' at 0x7ffaa96823e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a93e220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.005214278185402633
Epoch 3 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024928202501603634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c090c10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8e10450; to 'JaxprTracer' at 0x7ffaa8e11cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c58700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.00494969755546541
Epoch 3 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02279440747104975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e2f70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b420040; to 'JaxprTracer' at 0x7ffa8b421e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2546e7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.00449309986802672
Epoch 3 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02010521273493584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02010521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae44910>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8adce930; to 'JaxprTracer' at 0x7ffa8adcdf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b0a5100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.005895371214646721
Epoch 3 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019320195328835055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0193202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3930>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8920cd60; to 'JaxprTracer' at 0x7ffa8a049120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab7ac00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0033193111086531175
Epoch 3 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.01946322447611386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01946322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8256020>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88c9b4c0; to 'JaxprTracer' at 0x7ffa88c99030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a32ffc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0035982757194103813
Epoch 3 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.020001459613809523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02000146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8acabd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88d1bbf0; to 'JaxprTracer' at 0x7ffa88d1b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76aaf490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.0038730980191155452
Epoch 3 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.015740259662704446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01574026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb6720>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8866b1f0; to 'JaxprTracer' at 0x7ffa88669710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48f1c590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.005169502685066592
Epoch 3 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024102175254114056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0563aa0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9cbdfd0; to 'JaxprTracer' at 0x7ff9f9cbcae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f389ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.007336460729865142
Epoch 3 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02463020279602905, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0246302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edcfb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb31a110; to 'JaxprTracer' at 0x7ff9fb319350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7965e640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.004134119891335199
Epoch 3 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.021088010972253726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fadb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe38314c70; to 'JaxprTracer' at 0x7ffe38317c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66595fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.003326986313292213
Epoch 3 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026139703125725985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0261397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa9884d20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa993a930; to 'JaxprTracer' at 0x7ffaa993a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71c415f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.005590349964505634
Epoch 3 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019678179981414207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01967818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac14fe330>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab57c5e0; to 'JaxprTracer' at 0x7ffaab57c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf3f94b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0025917488438990275
Epoch 3 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01893008709711235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01893009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa89e27910>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8cdd300; to 'JaxprTracer' at 0x7ff9f8cb23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64413b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.002958628960932638
Epoch 3 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.01905903356281648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01905903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9faa7d400>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa9b7b50; to 'JaxprTracer' at 0x7ffaaacc6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bf732e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0030563864110715404
3, epoch_train_loss=0.14107368815547544
Epoch 4
Epoch 4 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022366367376600232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff14997fa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabfa5d00; to 'JaxprTracer' at 0x7ffaabfa5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57cc0640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.007765886622813472
Epoch 4 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01788847531912591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01788848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f4040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb094090; to 'JaxprTracer' at 0x7ff9fb095850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x668e41b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.0063864850164950865
Epoch 4 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0058360750491071225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00583608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3affa0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa881121b0; to 'JaxprTracer' at 0x7ffa88113740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x339e6da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.006684341533844827
Epoch 4 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.008929976226830894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00892998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1786080>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8957bce0; to 'JaxprTracer' at 0x7ffa89578220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7388d780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004532047311883932
Epoch 4 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.013717071186094294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01371707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c306c80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89e29800; to 'JaxprTracer' at 0x7ffa89e28360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a3da3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.006649199317423935
Epoch 4 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01843946656540295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01843947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44fb160>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bfe9c60; to 'JaxprTracer' at 0x7ffa8bfeae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b449a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.007188733813819596
Epoch 4 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021542438043223634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02154244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b9872b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9036930; to 'JaxprTracer' at 0x7ffaa9036de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4afe31f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.006473126419156732
Epoch 4 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022890989638857558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02289099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7f410>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9423ab0; to 'JaxprTracer' at 0x7ff9f9423b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ceefdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.005198024528807714
Epoch 4 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.015447438876966722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01544744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8a0f980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ba9710; to 'JaxprTracer' at 0x7ffaa9bab560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cfe1150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.001945020911778386
Epoch 4 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021681793415529824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb4770>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa960f880; to 'JaxprTracer' at 0x7ffaa960c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x685ec8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.0033954302546805593
Epoch 4 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017599746242385764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01759975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e2da0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0598a40; to 'JaxprTracer' at 0x7ffac059b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51940f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.003480458349291115
Epoch 4 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01933458306737484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01933458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8adf240>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac023f650; to 'JaxprTracer' at 0x7ffd905189f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f8eab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.0031965809864541177
Epoch 4 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020406372588550447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac17840c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb03e430; to 'JaxprTracer' at 0x7ff9fb03c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x582d7260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0033304032411486835
Epoch 4 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025810649111552425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02581065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6dd8a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd470f470; to 'JaxprTracer' at 0x7ffdd470cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73fbe7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.004062229943552357
Epoch 4 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022682231239009632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1f9c00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac123f010; to 'JaxprTracer' at 0x7ffac123fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a368b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0030667091443468365
Epoch 4 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02136772457568204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7ce50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0ef60c0; to 'JaxprTracer' at 0x7ffb64668770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b54d390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0026872484068075986
Epoch 4 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019686074627889454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01968607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c2610>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0842c0; to 'JaxprTracer' at 0x7ffe2c084db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c7a9b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0023992632982525056
Epoch 4 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020410973829525305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02041097, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9fa6b20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbac9a7d30; to 'JaxprTracer' at 0x7ffbac9a60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4358b090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.003017463142157045
Epoch 4 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02112194007198513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae66eb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe38283920; to 'JaxprTracer' at 0x7ffdd4305530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x364b6a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.003802435620448943
Epoch 4 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017003097242301344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8ac8a00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c482070; to 'JaxprTracer' at 0x7ffe1c481da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cbc9c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.005662675971101045
Epoch 4 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02390252578760863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edd9b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c4ec130; to 'JaxprTracer' at 0x7ffe1c4ef5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64985540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.007078447662891494
Epoch 4 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024090578330105222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90576db0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f998ae80; to 'JaxprTracer' at 0x7ff9f998ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a7a2690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.004208019833900714
Epoch 4 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02053084535715369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fb0e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc0c3970; to 'JaxprTracer' at 0x7ffac01c1300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x233bb220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0030472283169909356
Epoch 4 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02425799825323898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.024258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fb344e30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c034c0; to 'JaxprTracer' at 0x7ff9fb867560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79956160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.004315512634900567
Epoch 4 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019631118080400217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01963112, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b2f90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c9df80; to 'JaxprTracer' at 0x7ff9f8c9c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78720ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0026392310232189954
Epoch 4 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.018764896173592664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0187649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad98c50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb8c3010; to 'JaxprTracer' at 0x7ff9fb8c3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44782ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.003153576828127827
Epoch 4 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.019670549925757758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01967055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e1490>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab21d260; to 'JaxprTracer' at 0x7ffaab21d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac7fa80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0029061404510048777
4, epoch_train_loss=0.11827192058529992
Epoch 5
Epoch 5 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01622204390958093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01622204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4f8430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa193650; to 'JaxprTracer' at 0x7ffaaa1913f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60fb1530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.008423285085915165
Epoch 5 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.013723193692275256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01372319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edcbf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa4dfb50; to 'JaxprTracer' at 0x7ff9fa4dc900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32a8faa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.00519163118001673
Epoch 5 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006977008825164182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00697701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972f750>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4665440; to 'JaxprTracer' at 0x7ffdd4667010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f2ade0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007950068635024888
Epoch 5 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01437945789856671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01437946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa834760>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c3143b0; to 'JaxprTracer' at 0x7ffe38115990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229d3790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.006623445454525076
Epoch 5 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02152786868778339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43ec70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb644503b0; to 'JaxprTracer' at 0x7ffb644517b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70c093c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.005793223605592481
Epoch 5 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024934500084056604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7323c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb14373560; to 'JaxprTracer' at 0x7ffb14370220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c740910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.004499967515744711
Epoch 5 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02332227092954226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02332227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3b70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac09d7830; to 'JaxprTracer' at 0x7ffac09d7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f97f780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.007145101093080455
Epoch 5 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019153236132390884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01915324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e1f30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c4acd10; to 'JaxprTracer' at 0x7ffe1c4ae340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22993ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.0055471371162028596
Epoch 5 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.011174431345520678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01117443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb64636220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabded8f0; to 'JaxprTracer' at 0x7ffaabdef880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b92b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0040529262705121
Epoch 5 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.01547417054815615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01547417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90574100>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab1d3ab0; to 'JaxprTracer' at 0x7ffaab1d1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499c93a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.009050824856178297
Epoch 5 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.014132688443133597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01413269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c161080>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbbe77e0; to 'JaxprTracer' at 0x7ffe3828e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x415dfc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0065752499136947935
Epoch 5 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01704977672003925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01704978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972eb40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ba8b30; to 'JaxprTracer' at 0x7ffaa9ba9b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a4bcd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.005573582803775145
Epoch 5 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02034770563400585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02034771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b9856c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa95b84f0; to 'JaxprTracer' at 0x7ffaa95b9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0ad9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.003973131757140964
Epoch 5 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02810079321935826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02810079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6dcc00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa888e250; to 'JaxprTracer' at 0x7ffaa888d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55daddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.005839604387052937
Epoch 5 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02696242910111381, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02696243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1786210>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bfe9620; to 'JaxprTracer' at 0x7ff9f94eba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x788161d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.007048311202277135
Epoch 5 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.025291055490362684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3810>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9725350; to 'JaxprTracer' at 0x7ffa8ae69f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x375a07d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.00635850852336175
Epoch 5 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021609131878720128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0563580>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88c72f70; to 'JaxprTracer' at 0x7ffa88c72a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50064d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0035582917215638363
Epoch 5 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020518637310728508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02051864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb7790>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa892b99e0; to 'JaxprTracer' at 0x7ffa892b8450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c5060a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.003494128488087076
Epoch 5 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.01931913002627125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01931913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8ac86e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fad9da30; to 'JaxprTracer' at 0x7ff9fad9e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cf3aef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.0045410377205305314
Epoch 5 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01406447675237724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01406448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f5e40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb851580; to 'JaxprTracer' at 0x7ff9fb852020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51613da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.004432462390074357
Epoch 5 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020768270518542183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa4494b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb340d10; to 'JaxprTracer' at 0x7ff9fb340360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a52290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.007590593281227889
Epoch 5 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.020690528317475018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad990e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c4b470; to 'JaxprTracer' at 0x7ff9f8c4b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51bb99c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.006977536604279365
Epoch 5 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.017758208861947993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01775821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc6786b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb080ef0; to 'JaxprTracer' at 0x7ff9fb0830b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4974c4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.005230511370983609
Epoch 5 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02305825812715477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa9b94f10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaac8b6a0; to 'JaxprTracer' at 0x7ffaaac886d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fe1c9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.005809749971287353
Epoch 5 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.017772882093385817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01777288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae44b30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab22a070; to 'JaxprTracer' at 0x7ffb6c61f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28e1f480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.003240740489585266
Epoch 5 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01927616002181115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01927616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8256070>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa891ec7c0; to 'JaxprTracer' at 0x7ffa89dc0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d6cc7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.0031795387714595637
Epoch 5 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02239909223527972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3ae700>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faacacf0; to 'JaxprTracer' at 0x7ff9faacab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5994ba50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0042930757190047
5, epoch_train_loss=0.15199366592817906
Epoch 6
Epoch 6 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.025969224821031534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02596922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc679a20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f945d170; to 'JaxprTracer' at 0x7ff9f945c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26572860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.008752975628144822
Epoch 6 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.021353895316206423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44b240>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89afa020; to 'JaxprTracer' at 0x7ffa89afb830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd8c5340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.008966213498076615
Epoch 6 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00758508873808182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00758509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f7f00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa805fd0; to 'JaxprTracer' at 0x7ff9fa805490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e1bb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.00865572050837766
Epoch 6 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012365080561390017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01236508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb141202c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa767330; to 'JaxprTracer' at 0x7ff9fa765f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ebd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004132304143260395
Epoch 6 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017255974885037575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01725597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8aded50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88c72610; to 'JaxprTracer' at 0x7ffa88c73290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51e96220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.003102663735112867
Epoch 6 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02075671762841181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02075672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6de9a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8adcf1f0; to 'JaxprTracer' at 0x7ffa8adcd440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c7d9640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.004899506879075655
Epoch 6 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020016361902763933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02001636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa835ed0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaaff48b0; to 'JaxprTracer' at 0x7ffaaaff6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac9e650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.0062633306880898795
Epoch 6 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020791389537794726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7d200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa95bab60; to 'JaxprTracer' at 0x7ffaa95ba390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696774e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.00403542425007662
Epoch 6 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.015596329896412854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01559633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa662460>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa96484a0; to 'JaxprTracer' at 0x7ffaa964a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe1dc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0019780781153226974
Epoch 6 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0212568439731852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad9a3e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa98cf420; to 'JaxprTracer' at 0x7ffaa98cf1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x563ce5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.003229833290204654
Epoch 6 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018898604201753003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0188986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f74f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa1670b0; to 'JaxprTracer' at 0x7ffaaa167c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43abe8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0035298433534503484
Epoch 6 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.020822042666041738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02082204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0563980>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c2984f0; to 'JaxprTracer' at 0x7ffe1c298130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x309ed840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.0024803026893753196
Epoch 6 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021734859368014347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3140>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa909c770; to 'JaxprTracer' at 0x7ffaa909fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6af58c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0024797413572694316
Epoch 6 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026100133420729477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02610013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c732c70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89a3c450; to 'JaxprTracer' at 0x7ffac171d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7111dd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.004064357018726788
Epoch 6 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021930477464752227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fa490>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb147a8f90; to 'JaxprTracer' at 0x7ffb147ab510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3db5fa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0029289702780281924
Epoch 6 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020167996392641236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.020168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7e340>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb643f37e0; to 'JaxprTracer' at 0x7ffb643f31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x735d0de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0024860927265310494
Epoch 6 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0189834866498065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01898349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9fa5eb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd905b4040; to 'JaxprTracer' at 0x7ffd905b65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77d60b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0024024895282842695
Epoch 6 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020628630321590256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02062863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e30d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe38280630; to 'JaxprTracer' at 0x7ffe38283150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e906c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0024312617451650717
Epoch 6 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.021908167008164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90576190>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4665710; to 'JaxprTracer' at 0x7ffdcc671f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54f27dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.002695467649949345
Epoch 6 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01570458847771741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01570459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b2e40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd903c9b20; to 'JaxprTracer' at 0x7ffa88f993a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6623f290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.004831730667370498
Epoch 6 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01895194780731724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01895195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb4430>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc74d080; to 'JaxprTracer' at 0x7ffdcc74f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28ace390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.0055658503161082175
Epoch 6 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.023719517037569953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fdb50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb0223e0; to 'JaxprTracer' at 0x7ff9fb0237e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45964df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.003578527318507196
Epoch 6 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.019975388328328493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8256890>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9055c9a0; to 'JaxprTracer' at 0x7ffd9055e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7995c900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.002750069725336037
Epoch 6 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02427560367513248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0242756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886acfa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b416d40; to 'JaxprTracer' at 0x7ffa8b417a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x428b1ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.004319319088582389
Epoch 6 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.018947890596396427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01894789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edffa0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb141ec450; to 'JaxprTracer' at 0x7ffb141ec590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7200980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0023472256680172453
Epoch 6 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01868038657376528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01868039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972eec0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88cfd260; to 'JaxprTracer' at 0x7ffa88d16ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586375b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.002588867780307471
Epoch 6 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.020207241119533245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02020724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43eac0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb14387d80; to 'JaxprTracer' at 0x7ffb14387bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e68faa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.00229013476350787
6, epoch_train_loss=0.1077863024102586
Epoch 7
Epoch 7 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.017014997157991547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.017015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972e5e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faac82c0; to 'JaxprTracer' at 0x7ff9faac93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd02be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.0067964155821332445
Epoch 7 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017419323186898872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01741932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae65230>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f974dfd0; to 'JaxprTracer' at 0x7ff9f974cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25f43b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.0027702374562798733
Epoch 7 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006671775953253144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00667178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb646364b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9989f80; to 'JaxprTracer' at 0x7ff9f9988860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ae69600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007574283284106723
Epoch 7 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009791720341635005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00979172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7c0d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe381a4180; to 'JaxprTracer' at 0x7ffe381a79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6a57b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004853749786735462
Epoch 7 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.014918362061074992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01491836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cde880>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c5194e0; to 'JaxprTracer' at 0x7ffd9c5186d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75fc23d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.005279607527734101
Epoch 7 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.018938197573866673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0189382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b985260>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaba1e390; to 'JaxprTracer' at 0x7ffaaba1fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79225510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0066351792224633496
Epoch 7 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.015528893833479966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01552889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8add040>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb5cc720; to 'JaxprTracer' at 0x7ff9fb4e9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bbf17d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.008629498055171363
Epoch 7 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021397605202175565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02139761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8addc30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd90660d60; to 'JaxprTracer' at 0x7ffd90663c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64b9b710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.004588266706146982
Epoch 7 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01724255912239651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01724256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3ae230>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb0944f0; to 'JaxprTracer' at 0x7ff9fb095bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10544310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.003654575942477021
Epoch 7 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.024516733784544394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02451673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8257320>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab4acc70; to 'JaxprTracer' at 0x7ffdcc0c25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28bb4cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.004620117042938139
Epoch 7 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.020210590917702952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02021059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb7e60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bfcb240; to 'JaxprTracer' at 0x7ffaab4e83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x521d04d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.004632448675378975
Epoch 7 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0207399311088086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02073993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd905765a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9d0f830; to 'JaxprTracer' at 0x7ff9f9d0cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67e8cc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.002423097220915384
Epoch 7 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020007785084845024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02000779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c161830>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa98d4590; to 'JaxprTracer' at 0x7ff9f9f51c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50027dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0034648163221805027
Epoch 7 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.023380714419163947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa836a20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c4a7a10; to 'JaxprTracer' at 0x7ffb6c4a46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5732cbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.003727909426008589
Epoch 7 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.020388318991710445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02038832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6dda90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b1c28e0; to 'JaxprTracer' at 0x7ffa8b1c1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa80d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.003663420656581745
Epoch 7 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02019894401923743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02019894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8adcee0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b9e5ad0; to 'JaxprTracer' at 0x7ff9f97278d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36a2ae30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0030682897593736877
Epoch 7 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.01971057854630929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb14120ac0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8a67c770; to 'JaxprTracer' at 0x7ffa8a67cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x625377a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0027485835369140525
Epoch 7 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021689047879116064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d3ff0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f91b9df0; to 'JaxprTracer' at 0x7ff9f91ba9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fae91d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.003758832872422073
Epoch 7 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02269916863320942, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c092d60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88144e50; to 'JaxprTracer' at 0x7ffa88145800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x398dd800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.003696647068758403
Epoch 7 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.014474800001948146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0144748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad9b8e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbb87240; to 'JaxprTracer' at 0x7ff9fb3193f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x568b7510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.003580738901039642
Epoch 7 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018622623866370897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01862262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa661450>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f978dc10; to 'JaxprTracer' at 0x7ff9f978c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d77cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.0051730306299818275
Epoch 7 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.023671646314134764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae45440>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabf511c0; to 'JaxprTracer' at 0x7ffaabf533d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42985390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.00394745083130177
Epoch 7 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.01961044799457188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01961045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaacef150; to 'JaxprTracer' at 0x7ff9f9d5d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42900420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0029623861728220904
Epoch 7 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024012031826904874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c1d5020>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faa70040; to 'JaxprTracer' at 0x7ff9f8cb21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ff1520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.004255728241929389
Epoch 7 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.01851540259221777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0185154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67bd40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbb4a930; to 'JaxprTracer' at 0x7ffb14404db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76fffb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0022472711948947296
Epoch 7 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01898488137983134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01898488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44b8f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaac87560; to 'JaxprTracer' at 0x7ffa89e2c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36004550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.0023681626982315607
Epoch 7 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02092130827826416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02092131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edffb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0235e40; to 'JaxprTracer' at 0x7ffac045df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e300b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0024300003527841386
7, epoch_train_loss=0.11355074516770483
Epoch 8
Epoch 8 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019500465059511637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f62e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4305bc0; to 'JaxprTracer' at 0x7ffb14406520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15672d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.0045215045560993965
Epoch 8 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017460736141897682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01746074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9fa48c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89a2e840; to 'JaxprTracer' at 0x7ffa89a2cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7644c810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.0022484481821791005
Epoch 8 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007102251142788488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00710225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac05609f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb340720; to 'JaxprTracer' at 0x7ffaa9590b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a6c4970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.008035811511808806
Epoch 8 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011981403731848696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0119814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8ac8c10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa9b5a80; to 'JaxprTracer' at 0x7ffaaa9b7920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f02490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004817443359145099
Epoch 8 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018331400259814654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0183314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3042b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b437790; to 'JaxprTracer' at 0x7ffa8b436cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33db6320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0018758057209967952
Epoch 8 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021519897273881743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b9872d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b9884a0; to 'JaxprTracer' at 0x7ffa8b988900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x515861c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0031964346561424908
Epoch 8 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023156339264078115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02315634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c163ea0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabfed9e0; to 'JaxprTracer' at 0x7ffaabfedbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cbbe510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.00650205950847798
Epoch 8 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021360485706358925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e2030>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa98d4ae0; to 'JaxprTracer' at 0x7ffaa98d6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11d5d760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.0034294248590836193
Epoch 8 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.013506387151509742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01350639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8a0e5a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44fe660; to 'JaxprTracer' at 0x7ffaa9c2c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b8224c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0013567074602850995
Epoch 8 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.019585708114314735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01958571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44ab60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b4d3e20; to 'JaxprTracer' at 0x7ffaab53e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x171a04c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.003568470306754913
Epoch 8 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017101129210733708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01710113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa660cd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c2516c0; to 'JaxprTracer' at 0x7ffe1c253330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c858910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0026153683760672627
Epoch 8 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02098049848420777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0209805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0562d70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bffa160; to 'JaxprTracer' at 0x7ffa8bff8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72723050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.0025778185578145935
Epoch 8 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02254311750932899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c2d70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faade2a0; to 'JaxprTracer' at 0x7ff9faade570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d27bf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0029038056736451472
Epoch 8 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026900837908462278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02690084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c731390>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb4eb060; to 'JaxprTracer' at 0x7ff9fb4eabb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c41c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.005074133919293999
Epoch 8 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02218195564411534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fa200>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb83ade0; to 'JaxprTracer' at 0x7ffa8ae06390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c23dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0026038759499292493
Epoch 8 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.01996853831095694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01996854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e18f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c51aa20; to 'JaxprTracer' at 0x7ffd9c51bb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef0a290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0027502366074030533
Epoch 8 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.018988592857281317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01898859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd905777a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbac9a7ec0; to 'JaxprTracer' at 0x7ffbac9a45e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x792bd430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0023301629739856267
Epoch 8 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02023576276866018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02023576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e0070>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd901114e0; to 'JaxprTracer' at 0x7ffd90113ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d341cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0025898298985510496
Epoch 8 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.021969269243614975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb7fb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3823ec00; to 'JaxprTracer' at 0x7ffd903c8450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6370a310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.002357149108103251
Epoch 8 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016724126973560054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01672413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3ae080>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc4870b0; to 'JaxprTracer' at 0x7ffdcc486200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7acbfd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.005080826143330312
Epoch 8 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024704911287469683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02470491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972f980>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb141411c0; to 'JaxprTracer' at 0x7ffb14143b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81d20130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.006740009266165939
Epoch 8 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02538206820078578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02538207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d0c60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0c32020; to 'JaxprTracer' at 0x7ffac0c31350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d36a000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0029913507061018717
Epoch 8 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02108632542373933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa835e00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb141dfce0; to 'JaxprTracer' at 0x7ffb141ded90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47c1a650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0026014164406082557
Epoch 8 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.0240112977790833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa88f35060>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbb49670; to 'JaxprTracer' at 0x7ff9fbb48fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43a96ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.004445818300378631
Epoch 8 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.018066423145446993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01806642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae475d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1455b740; to 'JaxprTracer' at 0x7ffb1455b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ed9af10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.002685293948386484
Epoch 8 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0176082424066117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01760824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae67360>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f99657b0; to 'JaxprTracer' at 0x7ff9f9999580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1538d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.002071693655203803
Epoch 8 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.019592188150807682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01959219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b2e90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa95ba980; to 'JaxprTracer' at 0x7ffaa95ba7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f008680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.002402876252170594
8, epoch_train_loss=0.09437377589811242
Epoch 9
Epoch 9 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02045355452982469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02045355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e02d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaac742c0; to 'JaxprTracer' at 0x7ffaaac778d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62d1ba20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.005427494500042426
Epoch 9 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01772793760379462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01772794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa836130>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0c331a0; to 'JaxprTracer' at 0x7ffac0c33920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c12d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004842273912957558
Epoch 9 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006706131326112965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00670613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3af6d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c01c60; to 'JaxprTracer' at 0x7ffaabd31a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d9586b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007582254306550026
Epoch 9 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010424445912544706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01042445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e1940>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd900e89a0; to 'JaxprTracer' at 0x7ffd900e84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33e1a690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004763882734627837
Epoch 9 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.016412941933545037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01641294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e3040>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb64453240; to 'JaxprTracer' at 0x7ffb64452110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b0a4370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0036836482438038364
Epoch 9 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.020886812876451274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02088681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1f8910>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c1b0450; to 'JaxprTracer' at 0x7ffb6c1b2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x311225b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.004765792708190228
Epoch 9 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.017493470889356977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01749347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7324e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa9c2610; to 'JaxprTracer' at 0x7ffaaa9c15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f825bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.007094773782523541
Epoch 9 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023161060504974337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02316106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7305b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd903f7600; to 'JaxprTracer' at 0x7ffd903f6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2620d7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.004098219374327802
Epoch 9 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01732302750270371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01732303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c093fa0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa2227f0; to 'JaxprTracer' at 0x7ffac0567d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f227260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0038824695987935524
Epoch 9 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02362912909348887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb64634d90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9dfe660; to 'JaxprTracer' at 0x7ffaa9dff420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fdeb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.004042069502086534
Epoch 9 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018676945626641978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01867695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f4bd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88fbf7e0; to 'JaxprTracer' at 0x7ff9fbe12ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49063010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.003380620120970304
Epoch 9 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.019730641081644063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8257600>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa88c7bf0; to 'JaxprTracer' at 0x7ffaa88c63e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e77c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.002910678146484867
Epoch 9 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.019732520427124867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd905769d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbacb65d50; to 'JaxprTracer' at 0x7ffd9c0808b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75603840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.003605918957488085
Epoch 9 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.023575041389306394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02357504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f7e30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bc56c00; to 'JaxprTracer' at 0x7ffa8bc57290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66579ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.003496161451950427
Epoch 9 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021876033421906985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1f9680>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f977ddf0; to 'JaxprTracer' at 0x7ff9f977ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ebff270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0026586973781029845
Epoch 9 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021773704010581384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c732aa0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b9e62a0; to 'JaxprTracer' at 0x7ffa8b9e6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81cd6150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.00240897969496849
Epoch 9 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020214205230979693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02021421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c304030>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa88c9be70; to 'JaxprTracer' at 0x7ffa88c98ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564f0790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0026538434749199856
Epoch 9 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0208837660111729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02088377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8acb910>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa889f15d0; to 'JaxprTracer' at 0x7ffb6c354a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x446230a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.00238577016042456
Epoch 9 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0205477180533625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02054772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb141215b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb06e6b0; to 'JaxprTracer' at 0x7ff9fb06f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x809f7050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.0028728586982587306
Epoch 9 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.013482664979320373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01348266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9fa4540>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bcc62a0; to 'JaxprTracer' at 0x7ff9f9fc39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62c34a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.00323797805621519
Epoch 9 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.016945606884754234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01694561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44afe0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab4c22a0; to 'JaxprTracer' at 0x7ffac01fc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78c2bf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.005828138521887071
Epoch 9 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024223868805259077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4f9f70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb14407380; to 'JaxprTracer' at 0x7ffb14407ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a781b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0028394495864435677
Epoch 9 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.021662144550205813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02166214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d2b50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9faa70450; to 'JaxprTracer' at 0x7ff9faa71580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78dab410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.002853716180633137
Epoch 9 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025136663473049103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabdd9170>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac04a5940; to 'JaxprTracer' at 0x7ffaaac85490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f723220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.003908935847329025
Epoch 9 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.018594480245929572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01859448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae656f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b1bd2b0; to 'JaxprTracer' at 0x7ffa8b152d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20a41090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.002373164956777706
Epoch 9 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.018137458936767076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01813746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1785dd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa01ac00; to 'JaxprTracer' at 0x7ff9fa01aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74172840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.0019965526999582324
Epoch 9 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.019829509395178302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01982951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fe640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c6d4e00; to 'JaxprTracer' at 0x7ffba80faed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82cceb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0019923677384397114
9, epoch_train_loss=0.10158671033515543
Epoch 10
Epoch 10 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02121835508182841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0560800>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89e27880; to 'JaxprTracer' at 0x7ffa89e27650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x385e410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.0038598928818730787
Epoch 10 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.015170893727655158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01517089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa663630>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0ceee30; to 'JaxprTracer' at 0x7ffac0cee520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50cb5bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004454222563147393
Epoch 10 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006859409494380262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00685941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad9bd20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaac8b560; to 'JaxprTracer' at 0x7ffaaac8ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59f43f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007739047960574295
Epoch 10 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011338545609065425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01133855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c307fe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fa4990d0; to 'JaxprTracer' at 0x7ff9fa49a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e52e390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004995461854517424
Epoch 10 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01645291939764289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01645292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c732af0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c128590; to 'JaxprTracer' at 0x7ffe1c1296c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x332c6480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0032100102649415124
Epoch 10 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021670090787013138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02167009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fa5d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f977fa60; to 'JaxprTracer' at 0x7ff9f977d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cebcf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0031681578773421317
Epoch 10 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.018085318400882636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01808532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43c5b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9683240; to 'JaxprTracer' at 0x7ffaa96836a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53524f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.0061513482539320725
Epoch 10 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022710752743935112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e1080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac151cb80; to 'JaxprTracer' at 0x7ffac151c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x361b71f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.0035055653270311808
Epoch 10 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01580864693588727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01580865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44f9cb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c588770; to 'JaxprTracer' at 0x7ffaaa696520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79a4a310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0019108492012227785
Epoch 10 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02234971581519839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c25f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa498b80; to 'JaxprTracer' at 0x7ffaaa499850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf3616b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.0027485760593179954
Epoch 10 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017082596124575123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4f90a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9dfd1c0; to 'JaxprTracer' at 0x7ffaa9dfe700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e9ad8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0029487819245579954
Epoch 10 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.019868360204618716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01986836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad98760>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb64197920; to 'JaxprTracer' at 0x7ffb641971a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e6c7f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.0023290337062551675
Epoch 10 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02047387695536708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02047388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6de510>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa81c79c0; to 'JaxprTracer' at 0x7ffaa81c58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x844b2370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0027394260412109714
Epoch 10 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.023892569458579618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b984360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9c23330; to 'JaxprTracer' at 0x7ffaa9c207c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x233e44b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.0038873823577013876
Epoch 10 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021994742385295526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c162240>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd470fba0; to 'JaxprTracer' at 0x7ffb641ae480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x233d4f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0026517919008442986
Epoch 10 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022006966818322427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e2ed0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd427ebb0; to 'JaxprTracer' at 0x7ffdd427e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84af4710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.002557308358316827
Epoch 10 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020621275507371476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02062128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7d480>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb14711a30; to 'JaxprTracer' at 0x7ffdd413fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x765a0450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.002282941535038905
Epoch 10 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021074937994584677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e3db0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaca68040; to 'JaxprTracer' at 0x7ffbaca68400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7158f740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0023152681010522673
Epoch 10 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.020974017727856842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb72b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab568810; to 'JaxprTracer' at 0x7ffa88f65c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef6b7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.0026967829325670253
Epoch 10 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.013955452474815474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01395545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f7ae0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc74ed90; to 'JaxprTracer' at 0x7ffdcc74dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c5d600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.0027713588740741484
Epoch 10 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.017251112107595924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01725111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa834270>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c0df6a0; to 'JaxprTracer' at 0x7ffe1c0df830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f65f750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.005377078321311917
Epoch 10 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02368827844565429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c091470>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bcbaed0; to 'JaxprTracer' at 0x7ffa8bcb9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ca09500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0030448944683669423
Epoch 10 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.020593988954310614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02059399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67abb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9055c270; to 'JaxprTracer' at 0x7ffd9055d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7868f9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0020738836974366626
Epoch 10 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024298083465626032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02429808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabd65170>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1455aa20; to 'JaxprTracer' at 0x7ffb145593a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c44c1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.0033165666905604486
Epoch 10 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019409340511477496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01940934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae45920>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa1c99e0; to 'JaxprTracer' at 0x7ffaaa1c9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d74f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.002128078050996886
Epoch 10 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.018986054179438088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01898605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d2950>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab8272e0; to 'JaxprTracer' at 0x7ffaab827150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7f0b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.002210858669140089
Epoch 10 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.020568933678119943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02056893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae65420>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa8d45800; to 'JaxprTracer' at 0x7ffaabf2ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63da1930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.00196072146636764
10, epoch_train_loss=0.08903528933969945
Epoch 11
Epoch 11 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01811878645671736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01811879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d1b60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6445d800; to 'JaxprTracer' at 0x7ffb14541440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41003c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.005843784465223515
Epoch 11 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.015840482190559398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01584048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb64636280>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bcb9850; to 'JaxprTracer' at 0x7ffa8bcb93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e8b0460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004190648209196874
Epoch 11 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006875826100547384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00687583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff14997b80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f8c012b0; to 'JaxprTracer' at 0x7ff9f8c01ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2df52e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007705053039540082
Epoch 11 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012774068472619011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01277407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90575950>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2c3150; to 'JaxprTracer' at 0x7ffe2c2c1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f0fce70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.005119420262355358
Epoch 11 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018439703030666443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0184397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b1160>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb147aa340; to 'JaxprTracer' at 0x7ffb147abce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12f0ce80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0025446747197679226
Epoch 11 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021632797613350477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f7ed0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0f5a1b0; to 'JaxprTracer' at 0x7ffac0f58b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5efe4480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.003654380006647691
Epoch 11 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02297774640621597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cdfe90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0a38590; to 'JaxprTracer' at 0x7ffa8bcf1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41230320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.005232796093999492
Epoch 11 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020650172999291203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02065017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cdc570>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c08d0d0; to 'JaxprTracer' at 0x7ffe1c08e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ea020e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.0024586289340214587
Epoch 11 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.013887843535072376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01388784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3ae7b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa167470; to 'JaxprTracer' at 0x7ffaaa166610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b816770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0016543521678674853
Epoch 11 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02052101939697293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02052102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8ac9000>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab195490; to 'JaxprTracer' at 0x7ffaab197b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59e96640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.002302628751936198
Epoch 11 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017236651013629062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01723665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa835620>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9d0f1a0; to 'JaxprTracer' at 0x7ffe2c46af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c8bd010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0026919135281709247
Epoch 11 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021613784814411095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e3ed0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac151cb30; to 'JaxprTracer' at 0x7ffac151f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fd973d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.003083358329292551
Epoch 11 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022846339724201952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e01a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa6e1fd0; to 'JaxprTracer' at 0x7ffaaa6e0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bda17b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.0032598948297299568
Epoch 11 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026510025366728727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02651003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645d2c40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c573420; to 'JaxprTracer' at 0x7ffb6c572de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a493330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.0056822803449515045
Epoch 11 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021512155088365535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02151216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f7260>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc101800; to 'JaxprTracer' at 0x7ffa895b46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ca6ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0026870527478251955
Epoch 11 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.019765966480862374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01976597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cddac0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c329120; to 'JaxprTracer' at 0x7ffa8ac72750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b3c730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0031703949160600403
Epoch 11 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02040514252190117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edfce0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8aea2110; to 'JaxprTracer' at 0x7ffa8aea3a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53f68ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.003549911344661084
Epoch 11 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020108916764977454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02010892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8adcbe0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fad26340; to 'JaxprTracer' at 0x7ff9fad25350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30ac3950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.003040644967102952
Epoch 11 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02101300064898893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb141221d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fad05b70; to 'JaxprTracer' at 0x7ff9f978c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32218840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.0027872877027761266
Epoch 11 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.014463027808324012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01446303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1785de0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8a3213f0; to 'JaxprTracer' at 0x7ffaa9e4a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5709fb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.0036782472378341056
Epoch 11 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.017658533313991417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01765853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c3750>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa993b4c0; to 'JaxprTracer' at 0x7ffaa993ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63ebe3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.005451835966298079
Epoch 11 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02523657163918744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02523657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972ee70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbb13380; to 'JaxprTracer' at 0x7ff9fbb13c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d698b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0028760043839515777
Epoch 11 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02260255951324429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6de3e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa149b20; to 'JaxprTracer' at 0x7ffaaa14a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x374e48d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0027741539024237253
Epoch 11 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025161095914162424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8bd251a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab8246d0; to 'JaxprTracer' at 0x7ffaab824950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f59da80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.003393506954315071
Epoch 11 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0197336001784233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0197336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4f8fb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac10c7510; to 'JaxprTracer' at 0x7ffb6c739b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x354799e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0022893454444327214
Epoch 11 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01839215790997478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01839216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae450f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa886f0770; to 'JaxprTracer' at 0x7ffa886f0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b0468e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.0017929432585618312
Epoch 11 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.01912196610721187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01912197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8257260>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa90611c0; to 'JaxprTracer' at 0x7ffaa9062e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54eacb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.002608642398860589
11, epoch_train_loss=0.09552378490780414
Epoch 12
Epoch 12 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.016738100300446777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0167381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8a0e210>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c6f5f30; to 'JaxprTracer' at 0x7ffe1c6f47c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x235900f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.0068322775977083606
Epoch 12 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.014480721311982782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01448072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c2580>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac17b9800; to 'JaxprTracer' at 0x7ffa8b153420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a094c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004701231458168285
Epoch 12 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006230699229958255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0062307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c307890>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabf3ae30; to 'JaxprTracer' at 0x7ffaabf382c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2c6090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.006958683395708653
Epoch 12 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010560759401049613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01056076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fe730>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9fc18a0; to 'JaxprTracer' at 0x7ffb6c793060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x765d5670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.004796287256059311
Epoch 12 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018493815018739444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01849382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f5dc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c12a8e0; to 'JaxprTracer' at 0x7ffe1c129850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79a669b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0023184982441020133
Epoch 12 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022754941321104283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645d1b30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bcda200; to 'JaxprTracer' at 0x7ffa8bcd9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2caa1e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0029856855872461827
Epoch 12 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0216240180084153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e17d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa6e08b0; to 'JaxprTracer' at 0x7ffb6c7b39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78c42640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.004892238107395887
Epoch 12 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021330206077058197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90575bd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c6fde90; to 'JaxprTracer' at 0x7ffb6c6fc860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad48d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.0028692121891205767
Epoch 12 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.013719389029666459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01371939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa883e3a20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb147e66b0; to 'JaxprTracer' at 0x7ffb147e6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4deb8940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.001362882430911753
Epoch 12 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.01958825881805986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01958826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c092590>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ba8090; to 'JaxprTracer' at 0x7ffaa9baa430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f6ef30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.003742924160522529
Epoch 12 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016787133516675445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01678713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c1390>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c251080; to 'JaxprTracer' at 0x7ffe1c252930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44bff250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0028697161444598547
Epoch 12 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02053701483229489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8ede650>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c2e4cc0; to 'JaxprTracer' at 0x7ffe1c2e6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f067ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.002228580775598306
Epoch 12 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022384060201482238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cde330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8ae9a840; to 'JaxprTracer' at 0x7ffa8ae99120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aa69e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.002380806488905517
Epoch 12 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026767779242120298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02676778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c1628c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac123d760; to 'JaxprTracer' at 0x7ffac08154e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x412bfe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.004259060353836393
Epoch 12 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02308521697375633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b37c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb592160; to 'JaxprTracer' at 0x7ff9fb590860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x488a32e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.002747682786020513
Epoch 12 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020891923259560338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02089192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90574470>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c51bdd0; to 'JaxprTracer' at 0x7ffd9c51a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71822dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0019721792942835373
Epoch 12 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019079143600651948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01907914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7df60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd906ca480; to 'JaxprTracer' at 0x7ffd906caed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654c8a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.002064616527133152
Epoch 12 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.01973388796084521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa834a70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9ccd210; to 'JaxprTracer' at 0x7ff9f9ccd0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef77e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0023503942894450847
Epoch 12 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.020926115524521526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02092612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc67b530>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3835f3d0; to 'JaxprTracer' at 0x7ffb141eef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7468f680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.002927184991437651
Epoch 12 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.014353324207444972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01435332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8acad60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c0f5d50; to 'JaxprTracer' at 0x7ffe1c0f6160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51641f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.0026818817730728606
Epoch 12 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02225494565215644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae64e10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa191cb0; to 'JaxprTracer' at 0x7ffaaa192480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7647fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.005572462365702422
Epoch 12 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025876435233356275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02587644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892d2560>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb641b94e0; to 'JaxprTracer' at 0x7ffa895413f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78b2b090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0034075542688630756
Epoch 12 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.021632740607400478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f972c750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89e161b0; to 'JaxprTracer' at 0x7ffa89e17740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c81e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.002582882276351682
Epoch 12 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023805767782064433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b3fd280>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac10ce480; to 'JaxprTracer' at 0x7ffac10cdc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d79c060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.0032294889939273336
Epoch 12 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.018603498395030657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0186035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1f9df0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb641d5030; to 'JaxprTracer' at 0x7ffb64216d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12d80d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.00208072003218661
Epoch 12 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.01791176381506275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01791176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4f9870>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9c7a980; to 'JaxprTracer' at 0x7ffaa9c7aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75988e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.001795218480059106
Epoch 12 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0195744714891724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01957447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb647f40d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb643e8860; to 'JaxprTracer' at 0x7ffb643e89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ee52240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.002193762127022131
12, epoch_train_loss=0.0888041123952488
Epoch 13
Epoch 13 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.017178620166718138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01717862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8add8b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa886bdc60; to 'JaxprTracer' at 0x7ffa886bde90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x401e36a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.00674002315090199
Epoch 13 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.015505706418420162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01550571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae65d40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac07d7010; to 'JaxprTracer' at 0x7ffac07d5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x736f4890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004365910640024398
Epoch 13 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006661434585515032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00666143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb64636880>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ec09a0; to 'JaxprTracer' at 0x7ffac103a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f2c72b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007422089981045432
Epoch 13 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012410589000668947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01241059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad99880>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3820f010; to 'JaxprTracer' at 0x7ffe3820f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x609ee9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.00548450699160335
Epoch 13 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019935553361003222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01993555, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e35c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c6652b0; to 'JaxprTracer' at 0x7ffe1c665d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b949c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.0028814609433852993
Epoch 13 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02359225444259347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645d0730>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c349b20; to 'JaxprTracer' at 0x7ffe1c718590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56b69c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.0028914814520629435
Epoch 13 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.018635435606778168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01863544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cdeb30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c4c8310; to 'JaxprTracer' at 0x7ffaaa1caa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9e6430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.005872486642893526
Epoch 13 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02119179047103011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cdf340>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb1412c4f0; to 'JaxprTracer' at 0x7ffb1412e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d8d6f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.00221074965332066
Epoch 13 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.014206242233644853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01420624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8255070>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0e6c1d0; to 'JaxprTracer' at 0x7ffac0e6cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4134ba10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0018957047251866109
Epoch 13 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02052985299977533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02052985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1f8310>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa498450; to 'JaxprTracer' at 0x7ffaaa4987c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d210e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.0025853984356981902
Epoch 13 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016978773566592067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01697877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3ad360>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa9f1f30; to 'JaxprTracer' at 0x7ffd9c62e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e904410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.0026661516234379795
Epoch 13 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021019391139517826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02101939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7c220>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb147b31a0; to 'JaxprTracer' at 0x7ffdcc368f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5c61b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.002078878595441015
Epoch 13 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022154995594954253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90575290>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c58a7f0; to 'JaxprTracer' at 0x7ffb6c589850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37150210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.00214030880545948
Epoch 13 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025848701179996957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0258487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b09a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaab21d8f0; to 'JaxprTracer' at 0x7ffa8b435620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33e608a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.003934468815232377
Epoch 13 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02185750498272877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c160090>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c513420; to 'JaxprTracer' at 0x7ffaa910f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59bde8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0024639723457060662
Epoch 13 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020205009616598664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02020501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f9cdf750>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c329210; to 'JaxprTracer' at 0x7ffe2c32bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a058f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.002580080598209275
Epoch 13 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019186174408368218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01918617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2ffce0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa892e5940; to 'JaxprTracer' at 0x7ffa892e7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x584fcc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.002174772147865351
Epoch 13 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02052484882862355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02052485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7329a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9486a70; to 'JaxprTracer' at 0x7ff9f9486200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3c15b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0024118541525149574
Epoch 13 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.021577870767189353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1785f50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbea2930; to 'JaxprTracer' at 0x7ff9f9a10ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e4a6100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.002469074412126825
Epoch 13 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016067869425373648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01606787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6de420>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaabf38590; to 'JaxprTracer' at 0x7ffa8a322b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d91a700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.004096039026605654
Epoch 13 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022495339946870266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8a0eca0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8a121710; to 'JaxprTracer' at 0x7ffa8a1216c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d49d1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.00579472980493091
Epoch 13 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02505376187802754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02505376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fb260>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa72d760; to 'JaxprTracer' at 0x7ffaaa72ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425d6a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.0026978204085478003
Epoch 13 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.020684286056862462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02068429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa8355c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa89e2d210; to 'JaxprTracer' at 0x7ffa89e2dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x446f0060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0021564312152396853
Epoch 13 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023483882823108204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02348388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1a5310>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c7ae5c0; to 'JaxprTracer' at 0x7ffb6c7ae480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f1ae990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.0032991490382049066
Epoch 13 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.01811233294777565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01811233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8acafb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bfdd670; to 'JaxprTracer' at 0x7ffa8bfdd260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4be530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.0027266637014069406
Epoch 13 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.017583576447655576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01758358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44f9660>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa1d3dd0; to 'JaxprTracer' at 0x7ffaaa1d3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c8e3e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.0020950677504839805
Epoch 13 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.019691713858895378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01969171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c3740>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa895362f0; to 'JaxprTracer' at 0x7ffa8a5fc6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c92ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.002026940136410344
13, epoch_train_loss=0.09016221519394596
Epoch 14
Epoch 14 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01762474167952273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01762474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c305370>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0487290; to 'JaxprTracer' at 0x7ffac0487c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75aad5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.006075409558430434
Epoch 14 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.015644160391435184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01564416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa8366d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c738ae0; to 'JaxprTracer' at 0x7ffb6c738d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25abb180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.004161443843529464
Epoch 14 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.007107728852397374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00710773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6de810>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0cefce0; to 'JaxprTracer' at 0x7ffac0ceee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6741ba40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.007996240625790931
Epoch 14 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01211085539362543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01211086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f8edf4c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fbea1e90; to 'JaxprTracer' at 0x7ff9f9a12a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a44de70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.005260955165633271
Epoch 14 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020828842320811888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02082884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8add010>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9d3f100; to 'JaxprTracer' at 0x7ffa8b4a6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f9d4f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.004137392058229913
Epoch 14 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024737309629315807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02473731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe382f59c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8b15c400; to 'JaxprTracer' at 0x7ffa8b9e4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64084760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.003608552862350704
Epoch 14 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020180380362880126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02018038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645d1cd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaca60450; to 'JaxprTracer' at 0x7ffbaca61da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a5674b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.004592698127674953
Epoch 14 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020402983817269064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0561730>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c5f7b50; to 'JaxprTracer' at 0x7ffb6c5f58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c72fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.002946017384308926
Epoch 14 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01435933356306456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01435933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa6630f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbacb07880; to 'JaxprTracer' at 0x7ffbacb05300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b93fba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0007042946162606339
Epoch 14 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.019123442789397007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01912344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae47170>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9ba89f0; to 'JaxprTracer' at 0x7ffe381c73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd24c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.003960015990800961
Epoch 14 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01605959279804606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01605959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fa840>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa438130; to 'JaxprTracer' at 0x7ffac0e91670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x384c73a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.002744582671346639
Epoch 14 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.019919431687551503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01991943, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe1c6ddb20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdcc70e930; to 'JaxprTracer' at 0x7ffdcc70e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33a5dfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.002077048971085864
Epoch 14 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02226944547928364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fd520>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c08de90; to 'JaxprTracer' at 0x7ffe1c08ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d7a1590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.001987467686739442
Epoch 14 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02581158041077272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02581158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8256440>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa881b2700; to 'JaxprTracer' at 0x7ffa88c9b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fdc8290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.0031548593401027644
Epoch 14 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02336834498425813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02336834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8b43d460>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9c260c0; to 'JaxprTracer' at 0x7ffaa9c24e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56722370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.021856080823966766
Batch Loss = 0.0032588812684342925
Epoch 14 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021613293403291677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0560980>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd427c9a0; to 'JaxprTracer' at 0x7ffdd427de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50854fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.020998255209581387
Batch Loss = 0.0018241631098450451
Epoch 14 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019343241572922134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01934324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd90575da0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe1c6aede0; to 'JaxprTracer' at 0x7ffe1c6ae110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ad3de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.019814738130375122
Batch Loss = 0.0019186425161195767
Epoch 14 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.019576559924340178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01957656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad9bbe0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c479a30; to 'JaxprTracer' at 0x7ffd9c47af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a935a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.020606859795781047
Batch Loss = 0.0026322186650482304
Epoch 14 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.020345265419004315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02034527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb645e1b50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd90581030; to 'JaxprTracer' at 0x7ffd90583790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e3b5ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.021595902701888856
Batch Loss = 0.002677719050094142
Epoch 14 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.014867381563077722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01486738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb6c3afc60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6eb0b0; to 'JaxprTracer' at 0x7ffd9c6ea6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229e6500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.013662007931030248
Batch Loss = 0.003691789473859567
Epoch 14 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.020409077112116453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaaa44ad30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa1916c0; to 'JaxprTracer' at 0x7ffaaa193010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e9c4470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01987538998668327
Batch Loss = 0.005398336807376934
Epoch 14 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02561778403502575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaabfb6df0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c712ac0; to 'JaxprTracer' at 0x7ffe2c710a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79186d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.024753793052075028
Batch Loss = 0.002858250352146818
Epoch 14 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.021340700936373865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fb4e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa8bc6acf0; to 'JaxprTracer' at 0x7ffa8bc689f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72b92270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.020818058083394254
Batch Loss = 0.0021016431889268744
Epoch 14 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02397991501629395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fa199320>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0e58a0; to 'JaxprTracer' at 0x7ffe2c0e6ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bbe66e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02358139504657889
Batch Loss = 0.003347728868559784
Epoch 14 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.01832377782663145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01832378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa892b29e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaa9c7a840; to 'JaxprTracer' at 0x7ffaa9c78f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3abbe4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.01924621953037428
Batch Loss = 0.002677555287677725
Epoch 14 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.017570649635121113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01757065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44faf60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa898552b0; to 'JaxprTracer' at 0x7ffa89855120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x734ac7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.018181257417711587
Batch Loss = 0.002228067578451877
Epoch 14 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.01952039978157906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0195204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac1785b40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c45b4c0; to 'JaxprTracer' at 0x7ffb6c459580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ba7ffc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.019895564771301808
Batch Loss = 0.0021462146158025964
14, epoch_train_loss=0.09016818968462838
Epoch 15
Epoch 15 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.017705387773016463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01770539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8ae65cc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9d10400; to 'JaxprTracer' at 0x7ff9f9d12340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x671efd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.020472401125126796
Batch Loss = 0.005467542546456708
Epoch 15 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.015962156646675944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01596216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaab1fbdd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac1219ad0; to 'JaxprTracer' at 0x7ffac12183b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fdd64f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.01670431583442157
Batch Loss = 0.003212664024593694
Epoch 15 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.006117269488340801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00611727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0e7fdc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac103a020; to 'JaxprTracer' at 0x7ffa89a22070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c290ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-3.437299615704339e-07
Batch Loss = 0.006806741762613106
Epoch 15 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01413873454004769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01413873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa886e0860>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2a9670; to 'JaxprTracer' at 0x7ffd9c2abb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76301350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.009214489521161318
Batch Loss = 0.005614466186078394
Epoch 15 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0218147557769324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0561da0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac079c8b0; to 'JaxprTracer' at 0x7ffac079fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46532d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.01775961773144579
Batch Loss = 0.006063647987459851
Epoch 15 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025659934445665406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaa8255a60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffac0815b20; to 'JaxprTracer' at 0x7ffac08141d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44f0ad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.02249997091391774
Batch Loss = 0.004988210720532307
Epoch 15 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.025677446647900285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02567745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fd860>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb4e5300; to 'JaxprTracer' at 0x7ff9fb4e7380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x266ca8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.020578148965291664
Batch Loss = 0.008119221159062521
Epoch 15 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022346640183723683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdcc2fc5a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9967880; to 'JaxprTracer' at 0x7ff9f9964860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af54440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02143921567774958
Batch Loss = 0.003750064084615321
Epoch 15 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.014061461342689565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01406146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa8a9c0080>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9fb5cffb0; to 'JaxprTracer' at 0x7ff9fb5cd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5308ce30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.014110355308829672
Batch Loss = 0.0009477473752300029
Epoch 15 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.018399284321442458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01839928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd44fae20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c70a9d0; to 'JaxprTracer' at 0x7ffb6c708fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46bb80b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.021456667905749304
Batch Loss = 0.004669608344644495
Epoch 15 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01508507980862903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01508508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb141216a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f9d0f240; to 'JaxprTracer' at 0x7ffaab53ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a49ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017152609945859376
Batch Loss = 0.003821853264429938
Epoch 15 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.01814441876306764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01814442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9fad98530>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c083010; to 'JaxprTracer' at 0x7ffd9c080f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4443e160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.020574343853973217
Batch Loss = 0.003740743678928739
Epoch 15 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020351382814009947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02035138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c305b90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa1d2840; to 'JaxprTracer' at 0x7ffaaa1d2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48e956d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.02165253719762462
Batch Loss = 0.002738783587776032
Epoch 15 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025228109096357483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffac0c6a2d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaaa4ce390; to 'JaxprTracer' at 0x7ffb647b40e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13ad13a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.02452215548153046
Batch Loss = 0.002957784127615661
Epoch 15 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
slurmstepd: error: *** JOB 613604 ON dn048 CANCELLED AT 2024-07-16T09:31:17 ***
